   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"bsp_timer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	rreg_uriquery:
  23 0000 683D7563 		.ascii	"h=ucb\000"
  23      6200
  24 0006 0000     		.align	2
  27              	infoBoardname:
  28 0008 43433235 		.ascii	"CC2538\000"
  28      333800
  29 000f 00       		.align	2
  32              	infouCName:
  33 0010 43433235 		.ascii	"CC2538\000"
  33      333800
  34 0017 00       		.align	2
  37              	infoRadioName:
  38 0018 43433235 		.ascii	"CC2538 SoC\000"
  38      33382053 
  38      6F4300
  39              		.comm	bsp_timer_vars,20,4
  40              		.text
  41              		.align	2
  42              		.global	bsp_timer_init
  43              		.thumb
  44              		.thumb_func
  46              	bsp_timer_init:
  47              	.LFB0:
  48              		.file 1 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c"
   1:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
   2:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  * Author: Xavier Vilajosana (xvilajosana@eecs.berkeley.edu)
   3:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  *         Pere Tuset (peretuset@openmote.com)
   4:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  * Date:   July 2013
   5:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  * Description: CC2538-specific definition of the "bsp_timer" bsp module.
   6:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
   7:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
   8:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include <headers/hw_ints.h>
   9:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include <headers/hw_memmap.h>
  10:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include <headers/hw_smwdthrosc.h>
  11:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  12:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "string.h"
  13:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "bsp_timer.h"
  14:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "board.h"
  15:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "debug.h"
  16:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "interrupt.h"
  17:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "sleepmode.h"
  18:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "debugpins.h"
  19:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  20:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== defines =========================================
  21:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  22:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== variables =======================================
  23:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  24:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** typedef struct {
  25:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_cbt cb;
  26:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	PORT_TIMER_WIDTH last_compare_value;
  27:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bool initiated;
  28:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	uint32_t tooclose;
  29:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	uint32_t diff;
  30:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** } bsp_timer_vars_t;
  31:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  32:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** bsp_timer_vars_t bsp_timer_vars;
  33:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  34:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== prototypes ======================================
  35:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_isr_private(void);
  36:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== public ==========================================
  37:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  38:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
  39:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Initialize this module.
  40:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  41:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  This functions starts the timer, i.e. the counter increments, but doesn't set
  42:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  any compare registers, so no interrupt will fire.
  43:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
  44:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_init() {
  49              		.loc 1 44 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 1, uses_anonymous_args = 0
  53 0000 80B5     		push	{r7, lr}
  54              		.cfi_def_cfa_offset 8
  55              		.cfi_offset 7, -8
  56              		.cfi_offset 14, -4
  57 0002 00AF     		add	r7, sp, #0
  58              		.cfi_def_cfa_register 7
  45:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  46:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// clear local variables
  47:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	memset(&bsp_timer_vars, 0, sizeof(bsp_timer_vars_t));
  59              		.loc 1 47 0
  60 0004 0448     		ldr	r0, .L2
  61 0006 0021     		movs	r1, #0
  62 0008 1422     		movs	r2, #20
  63 000a FFF7FEFF 		bl	memset
  48:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  49:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// enable peripheral Sleeptimer
  50:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	IntRegister(INT_SMTIM, bsp_timer_isr_private);
  64              		.loc 1 50 0
  65 000e A120     		movs	r0, #161
  66 0010 0249     		ldr	r1, .L2+4
  67 0012 FFF7FEFF 		bl	IntRegister
  51:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
  68              		.loc 1 51 0
  69 0016 80BD     		pop	{r7, pc}
  70              	.L3:
  71              		.align	2
  72              	.L2:
  73 0018 00000000 		.word	bsp_timer_vars
  74 001c 00000000 		.word	bsp_timer_isr_private
  75              		.cfi_endproc
  76              	.LFE0:
  78              		.align	2
  79              		.global	bsp_timer_set_callback
  80              		.thumb
  81              		.thumb_func
  83              	bsp_timer_set_callback:
  84              	.LFB1:
  52:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  53:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
  54:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Register a callback.
  55:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  56:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \param cb The function to be called when a compare event happens.
  57:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
  58:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_set_callback(bsp_timer_cbt cb) {
  85              		.loc 1 58 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 8
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90 0020 80B4     		push	{r7}
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 0022 83B0     		sub	sp, sp, #12
  94              		.cfi_def_cfa_offset 16
  95 0024 00AF     		add	r7, sp, #0
  96              		.cfi_def_cfa_register 7
  97 0026 7860     		str	r0, [r7, #4]
  59:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_vars.cb = cb;
  98              		.loc 1 59 0
  99 0028 034A     		ldr	r2, .L5
 100 002a 7B68     		ldr	r3, [r7, #4]
 101 002c 1360     		str	r3, [r2]
  60:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 102              		.loc 1 60 0
 103 002e 0C37     		adds	r7, r7, #12
 104              		.cfi_def_cfa_offset 4
 105 0030 BD46     		mov	sp, r7
 106              		.cfi_def_cfa_register 13
 107              		@ sp needed
 108 0032 5DF8047B 		ldr	r7, [sp], #4
 109              		.cfi_restore 7
 110              		.cfi_def_cfa_offset 0
 111 0036 7047     		bx	lr
 112              	.L6:
 113              		.align	2
 114              	.L5:
 115 0038 00000000 		.word	bsp_timer_vars
 116              		.cfi_endproc
 117              	.LFE1:
 119              		.align	2
 120              		.global	bsp_timer_reset
 121              		.thumb
 122              		.thumb_func
 124              	bsp_timer_reset:
 125              	.LFB2:
  61:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  62:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
  63:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Reset the timer.
  64:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  65:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  This function does not stop the timer, it rather resets the value of the
  66:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  counter, and cancels a possible pending compare event.
  67:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
  68:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_reset() {
 126              		.loc 1 68 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 003c 80B4     		push	{r7}
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 7, -4
 134 003e 00AF     		add	r7, sp, #0
 135              		.cfi_def_cfa_register 7
  69:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// reset compare
  70:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  71:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// reset timer
  72:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****     bsp_timer_vars.initiated=false;
 136              		.loc 1 72 0
 137 0040 044B     		ldr	r3, .L8
 138 0042 0022     		movs	r2, #0
 139 0044 1A72     		strb	r2, [r3, #8]
  73:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// record last timer compare value
  74:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_vars.last_compare_value = 0;
 140              		.loc 1 74 0
 141 0046 034B     		ldr	r3, .L8
 142 0048 0022     		movs	r2, #0
 143 004a 5A60     		str	r2, [r3, #4]
  75:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 144              		.loc 1 75 0
 145 004c BD46     		mov	sp, r7
 146              		.cfi_def_cfa_register 13
 147              		@ sp needed
 148 004e 5DF8047B 		ldr	r7, [sp], #4
 149              		.cfi_restore 7
 150              		.cfi_def_cfa_offset 0
 151 0052 7047     		bx	lr
 152              	.L9:
 153              		.align	2
 154              	.L8:
 155 0054 00000000 		.word	bsp_timer_vars
 156              		.cfi_endproc
 157              	.LFE2:
 159              		.align	2
 160              		.global	bsp_timer_scheduleIn
 161              		.thumb
 162              		.thumb_func
 164              	bsp_timer_scheduleIn:
 165              	.LFB3:
  76:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  77:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
  78:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Schedule the callback to be called in some specified time.
  79:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  80:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  The delay is expressed relative to the last compare event. It doesn't matter
  81:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  how long it took to call this function after the last compare, the timer will
  82:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  expire precisely delayTicks after the last one.
  83:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  84:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  The only possible problem is that it took so long to call this function that
  85:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  the delay specified is shorter than the time already elapsed since the last
  86:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  compare. In that case, this function triggers the interrupt to fire right away.
  87:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  88:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  This means that the interrupt may fire a bit off, but this inaccuracy does not
  89:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  propagate to subsequent timers.
  90:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  91:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \param delayTicks Number of ticks before the timer expired, relative to the
  92:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  last compare event.
  93:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
  94:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_scheduleIn(PORT_TIMER_WIDTH delayTicks) {
 166              		.loc 1 94 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 24
 169              		@ frame_needed = 1, uses_anonymous_args = 0
 170 0058 80B5     		push	{r7, lr}
 171              		.cfi_def_cfa_offset 8
 172              		.cfi_offset 7, -8
 173              		.cfi_offset 14, -4
 174 005a 86B0     		sub	sp, sp, #24
 175              		.cfi_def_cfa_offset 32
 176 005c 00AF     		add	r7, sp, #0
 177              		.cfi_def_cfa_register 7
 178 005e 7860     		str	r0, [r7, #4]
  95:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	PORT_TIMER_WIDTH newCompareValue, current;
  96:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	PORT_TIMER_WIDTH temp_last_compare_value;
  97:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  98:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	if (!bsp_timer_vars.initiated){
 179              		.loc 1 98 0
 180 0060 1E4B     		ldr	r3, .L14
 181 0062 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 182 0064 83F00103 		eor	r3, r3, #1
 183 0068 DBB2     		uxtb	r3, r3
 184 006a 002B     		cmp	r3, #0
 185 006c 07D0     		beq	.L11
  99:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		//as the timer runs forever the first time it is turned on has a weired value
 100:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.last_compare_value=SleepModeTimerCountGet();
 186              		.loc 1 100 0
 187 006e FFF7FEFF 		bl	SleepModeTimerCountGet
 188 0072 0246     		mov	r2, r0
 189 0074 194B     		ldr	r3, .L14
 190 0076 5A60     		str	r2, [r3, #4]
 101:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.initiated=true;
 191              		.loc 1 101 0
 192 0078 184B     		ldr	r3, .L14
 193 007a 0122     		movs	r2, #1
 194 007c 1A72     		strb	r2, [r3, #8]
 195              	.L11:
 102:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	}
 103:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 104:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	temp_last_compare_value = bsp_timer_vars.last_compare_value;
 196              		.loc 1 104 0
 197 007e 174B     		ldr	r3, .L14
 198 0080 5B68     		ldr	r3, [r3, #4]
 199 0082 7B61     		str	r3, [r7, #20]
 105:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 106:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	newCompareValue = bsp_timer_vars.last_compare_value + delayTicks + 1;
 200              		.loc 1 106 0
 201 0084 154B     		ldr	r3, .L14
 202 0086 5A68     		ldr	r2, [r3, #4]
 203 0088 7B68     		ldr	r3, [r7, #4]
 204 008a 1344     		add	r3, r3, r2
 205 008c 0133     		adds	r3, r3, #1
 206 008e 3B61     		str	r3, [r7, #16]
 107:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_vars.last_compare_value = newCompareValue;
 207              		.loc 1 107 0
 208 0090 124A     		ldr	r2, .L14
 209 0092 3B69     		ldr	r3, [r7, #16]
 210 0094 5360     		str	r3, [r2, #4]
 108:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	current = SleepModeTimerCountGet();
 211              		.loc 1 109 0
 212 0096 FFF7FEFF 		bl	SleepModeTimerCountGet
 213 009a F860     		str	r0, [r7, #12]
 110:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 111:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	if (delayTicks < current - temp_last_compare_value) {
 214              		.loc 1 111 0
 215 009c FA68     		ldr	r2, [r7, #12]
 216 009e 7B69     		ldr	r3, [r7, #20]
 217 00a0 D21A     		subs	r2, r2, r3
 218 00a2 7B68     		ldr	r3, [r7, #4]
 219 00a4 9A42     		cmp	r2, r3
 220 00a6 10D9     		bls	.L12
 112:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 113:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		// we're already too late, schedule the ISR right now manually
 114:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		// setting the interrupt flag triggers an interrupt
 115:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.tooclose++;
 221              		.loc 1 115 0
 222 00a8 0C4B     		ldr	r3, .L14
 223 00aa DB68     		ldr	r3, [r3, #12]
 224 00ac 0133     		adds	r3, r3, #1
 225 00ae 0B4A     		ldr	r2, .L14
 226 00b0 D360     		str	r3, [r2, #12]
 116:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.diff=(current - temp_last_compare_value);
 227              		.loc 1 116 0
 228 00b2 FA68     		ldr	r2, [r7, #12]
 229 00b4 7B69     		ldr	r3, [r7, #20]
 230 00b6 D31A     		subs	r3, r2, r3
 231 00b8 084A     		ldr	r2, .L14
 232 00ba 1361     		str	r3, [r2, #16]
 117:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.last_compare_value = current;
 233              		.loc 1 117 0
 234 00bc 074A     		ldr	r2, .L14
 235 00be FB68     		ldr	r3, [r7, #12]
 236 00c0 5360     		str	r3, [r2, #4]
 118:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		IntPendSet(INT_SMTIM);
 237              		.loc 1 118 0
 238 00c2 A120     		movs	r0, #161
 239 00c4 FFF7FEFF 		bl	IntPendSet
 240 00c8 02E0     		b	.L13
 241              	.L12:
 119:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	} else {
 120:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		// this is the normal case, have timer expire at newCompareValue
 121:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		SleepModeTimerCompareSet(newCompareValue);
 242              		.loc 1 121 0
 243 00ca 3869     		ldr	r0, [r7, #16]
 244 00cc FFF7FEFF 		bl	SleepModeTimerCompareSet
 245              	.L13:
 122:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	}
 123:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	//enable interrupt
 124:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	IntEnable(INT_SMTIM);
 246              		.loc 1 124 0
 247 00d0 A120     		movs	r0, #161
 248 00d2 FFF7FEFF 		bl	IntEnable
 125:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 249              		.loc 1 125 0
 250 00d6 1837     		adds	r7, r7, #24
 251              		.cfi_def_cfa_offset 8
 252 00d8 BD46     		mov	sp, r7
 253              		.cfi_def_cfa_register 13
 254              		@ sp needed
 255 00da 80BD     		pop	{r7, pc}
 256              	.L15:
 257              		.align	2
 258              	.L14:
 259 00dc 00000000 		.word	bsp_timer_vars
 260              		.cfi_endproc
 261              	.LFE3:
 263              		.align	2
 264              		.global	bsp_timer_cancel_schedule
 265              		.thumb
 266              		.thumb_func
 268              	bsp_timer_cancel_schedule:
 269              	.LFB4:
 126:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 127:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
 128:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Cancel a running compare.
 129:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
 130:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_cancel_schedule() {
 270              		.loc 1 130 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 1, uses_anonymous_args = 0
 274 00e0 80B5     		push	{r7, lr}
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 7, -8
 277              		.cfi_offset 14, -4
 278 00e2 00AF     		add	r7, sp, #0
 279              		.cfi_def_cfa_register 7
 131:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// Disable the Timer0B interrupt.
 132:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	IntDisable(INT_SMTIM);
 280              		.loc 1 132 0
 281 00e4 A120     		movs	r0, #161
 282 00e6 FFF7FEFF 		bl	IntDisable
 133:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 283              		.loc 1 133 0
 284 00ea 80BD     		pop	{r7, pc}
 285              		.cfi_endproc
 286              	.LFE4:
 288              		.align	2
 289              		.global	bsp_timer_get_currentValue
 290              		.thumb
 291              		.thumb_func
 293              	bsp_timer_get_currentValue:
 294              	.LFB5:
 134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 135:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
 136:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Return the current value of the timer's counter.
 137:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 138:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \returns The current value of the timer's counter.
 139:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
 140:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** PORT_TIMER_WIDTH bsp_timer_get_currentValue() {
 295              		.loc 1 140 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 1, uses_anonymous_args = 0
 299 00ec 80B5     		push	{r7, lr}
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 7, -8
 302              		.cfi_offset 14, -4
 303 00ee 00AF     		add	r7, sp, #0
 304              		.cfi_def_cfa_register 7
 141:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	return SleepModeTimerCountGet();
 305              		.loc 1 141 0
 306 00f0 FFF7FEFF 		bl	SleepModeTimerCountGet
 307 00f4 0346     		mov	r3, r0
 142:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 308              		.loc 1 142 0
 309 00f6 1846     		mov	r0, r3
 310 00f8 80BD     		pop	{r7, pc}
 311              		.cfi_endproc
 312              	.LFE5:
 314 00fa 00BF     		.align	2
 315              		.global	bsp_timer_isr_private
 316              		.thumb
 317              		.thumb_func
 319              	bsp_timer_isr_private:
 320              	.LFB6:
 143:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 144:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== private =========================================
 145:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 146:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_isr_private(void) {
 321              		.loc 1 146 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325 00fc 80B5     		push	{r7, lr}
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 7, -8
 328              		.cfi_offset 14, -4
 329 00fe 00AF     		add	r7, sp, #0
 330              		.cfi_def_cfa_register 7
 147:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	debugpins_isr_set();
 331              		.loc 1 147 0
 332 0100 FFF7FEFF 		bl	debugpins_isr_set
 148:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	IntPendClear(INT_SMTIM);
 333              		.loc 1 148 0
 334 0104 A120     		movs	r0, #161
 335 0106 FFF7FEFF 		bl	IntPendClear
 149:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_isr();
 336              		.loc 1 149 0
 337 010a FFF7FEFF 		bl	bsp_timer_isr
 150:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	debugpins_isr_clr();
 338              		.loc 1 150 0
 339 010e FFF7FEFF 		bl	debugpins_isr_clr
 151:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 340              		.loc 1 151 0
 341 0112 80BD     		pop	{r7, pc}
 342              		.cfi_endproc
 343              	.LFE6:
 345              		.align	2
 346              		.global	bsp_timer_isr
 347              		.thumb
 348              		.thumb_func
 350              	bsp_timer_isr:
 351              	.LFB7:
 152:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== interrupt handlers ==============================
 154:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 155:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** kick_scheduler_t bsp_timer_isr() {
 352              		.loc 1 155 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356 0114 80B5     		push	{r7, lr}
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 7, -8
 359              		.cfi_offset 14, -4
 360 0116 00AF     		add	r7, sp, #0
 361              		.cfi_def_cfa_register 7
 156:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 157:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// call the callback
 158:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_vars.cb();
 362              		.loc 1 158 0
 363 0118 024B     		ldr	r3, .L22
 364 011a 1B68     		ldr	r3, [r3]
 365 011c 9847     		blx	r3
 159:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// kick the OS
 160:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	return KICK_SCHEDULER;
 366              		.loc 1 160 0
 367 011e 0123     		movs	r3, #1
 161:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 368              		.loc 1 161 0
 369 0120 1846     		mov	r0, r3
 370 0122 80BD     		pop	{r7, pc}
 371              	.L23:
 372              		.align	2
 373              	.L22:
 374 0124 00000000 		.word	bsp_timer_vars
 375              		.cfi_endproc
 376              	.LFE7:
 378              	.Letext0:
 379              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 380              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 381              		.file 4 "bsp/boards/board.h"
 382              		.file 5 "bsp/boards/bsp_timer.h"
 383              		.file 6 "bsp/boards/OpenMote-CC2538/board_info.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bsp_timer.c
     /tmp/ccl10TZt.s:19     .rodata:0000000000000000 $d
     /tmp/ccl10TZt.s:22     .rodata:0000000000000000 rreg_uriquery
     /tmp/ccl10TZt.s:27     .rodata:0000000000000008 infoBoardname
     /tmp/ccl10TZt.s:32     .rodata:0000000000000010 infouCName
     /tmp/ccl10TZt.s:37     .rodata:0000000000000018 infoRadioName
                            *COM*:0000000000000014 bsp_timer_vars
     /tmp/ccl10TZt.s:41     .text:0000000000000000 $t
     /tmp/ccl10TZt.s:46     .text:0000000000000000 bsp_timer_init
     /tmp/ccl10TZt.s:73     .text:0000000000000018 $d
     /tmp/ccl10TZt.s:319    .text:00000000000000fc bsp_timer_isr_private
     /tmp/ccl10TZt.s:78     .text:0000000000000020 $t
     /tmp/ccl10TZt.s:83     .text:0000000000000020 bsp_timer_set_callback
     /tmp/ccl10TZt.s:115    .text:0000000000000038 $d
     /tmp/ccl10TZt.s:119    .text:000000000000003c $t
     /tmp/ccl10TZt.s:124    .text:000000000000003c bsp_timer_reset
     /tmp/ccl10TZt.s:155    .text:0000000000000054 $d
     /tmp/ccl10TZt.s:159    .text:0000000000000058 $t
     /tmp/ccl10TZt.s:164    .text:0000000000000058 bsp_timer_scheduleIn
     /tmp/ccl10TZt.s:259    .text:00000000000000dc $d
     /tmp/ccl10TZt.s:263    .text:00000000000000e0 $t
     /tmp/ccl10TZt.s:268    .text:00000000000000e0 bsp_timer_cancel_schedule
     /tmp/ccl10TZt.s:293    .text:00000000000000ec bsp_timer_get_currentValue
     /tmp/ccl10TZt.s:350    .text:0000000000000114 bsp_timer_isr
     /tmp/ccl10TZt.s:374    .text:0000000000000124 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.59116071098782a37a9183a8102fe91b
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_smwdthrosc.h.39.ab42722bc5551495328d9a67238c9bbc
                           .group:0000000000000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:0000000000000000 wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51
                           .group:0000000000000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:0000000000000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.cdefs.h.47.e6563c1c3863188ba4ac4eaa2c85b6f1
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.board_info.h.22.aeb00002354a4949fff54190040e37af
                           .group:0000000000000000 wm4.toolchain_defs.h.2.59a5259f74cb714abc17e042354ff20f
                           .group:0000000000000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a
                           .group:0000000000000000 wm4.sleepmode.h.41.8aaaa1e0c85692d50a0ac7b45436b69e

UNDEFINED SYMBOLS
memset
IntRegister
SleepModeTimerCountGet
IntPendSet
SleepModeTimerCompareSet
IntEnable
IntDisable
debugpins_isr_set
IntPendClear
debugpins_isr_clr
