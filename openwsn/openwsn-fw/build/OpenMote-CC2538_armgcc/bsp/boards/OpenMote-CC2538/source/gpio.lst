   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"gpio.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	GPIOGetIntNumber
  20              		.thumb
  21              		.thumb_func
  23              	GPIOGetIntNumber:
  24              	.LFB0:
  25              		.file 1 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c"
   1:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** /******************************************************************************
   2:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  Filename:       gpio.c
   3:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  Revised:        $Date: 2013-04-29 09:36:44 +0200 (Mon, 29 Apr 2013) $
   4:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  Revision:       $Revision: 9922 $
   5:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
   6:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  Description:    Driver for the GPIO controller.
   7:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
   8:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
  10:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
  11:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  modification, are permitted provided that the following conditions
  13:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  are met:
  14:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
  15:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *    Redistributions of source code must retain the above copyright
  16:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
  18:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *    documentation and/or other materials provided with the distribution.
  21:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
  22:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *    its contributors may be used to endorse or promote products derived
  24:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *    from this software without specific prior written permission.
  25:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
  26:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** *
  38:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** ******************************************************************************/
  39:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
  40:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
  41:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
  42:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \addtogroup gpio_api
  43:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! @{
  44:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
  45:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
  46:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
  47:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #include <headers/hw_gpio.h>
  48:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #include <headers/hw_ints.h>
  49:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #include <headers/hw_memmap.h>
  50:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #include <headers/hw_sys_ctrl.h>
  51:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #include "debug.h"
  52:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #include "gpio.h"
  53:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #include "interrupt.h"
  54:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #include "ioc.h"
  55:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
  56:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
  57:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
  58:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \internal
  59:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Checks a GPIO base address
  60:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
  61:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
  62:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
  63:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function determines if a GPIO port base address is valid.
  64:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
  65:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return Returns \b true if the base address is valid and \b false
  66:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! otherwise.
  67:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
  68:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
  69:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #ifdef ENABLE_ASSERT
  70:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** static bool
  71:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOBaseValid(uint32_t ui32Port)
  72:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
  73:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     return((ui32Port == GPIO_A_BASE) || (ui32Port == GPIO_B_BASE) ||
  74:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****            (ui32Port == GPIO_C_BASE) || (ui32Port == GPIO_D_BASE));
  75:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
  76:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** #endif
  77:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
  78:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
  79:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
  80:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \internal
  81:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Gets the GPIO interrupt number
  82:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
  83:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
  84:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
  85:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Given a GPIO base address, returns the corresponding interrupt number.
  86:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
  87:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return Returns a GPIO interrupt number, or 0 if \e ui32Port is invalid.
  88:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
  89:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
  90:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** uint32_t
  91:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOGetIntNumber(uint32_t ui32Port)
  92:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
  26              		.loc 1 92 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 85B0     		sub	sp, sp, #20
  35              		.cfi_def_cfa_offset 24
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
  93:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32Int;
  94:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
  95:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
  96:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
  97:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
  98:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
  99:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 100:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 101:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Determine the GPIO interrupt number for the given module.
 102:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 103:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     switch(ui32Port)
  39              		.loc 1 103 0
  40 0008 7B68     		ldr	r3, [r7, #4]
  41 000a 134A     		ldr	r2, .L10
  42 000c 9342     		cmp	r3, r2
  43 000e 10D0     		beq	.L3
  44 0010 114A     		ldr	r2, .L10
  45 0012 9342     		cmp	r3, r2
  46 0014 03D8     		bhi	.L4
  47 0016 114A     		ldr	r2, .L10+4
  48 0018 9342     		cmp	r3, r2
  49 001a 07D0     		beq	.L5
  50 001c 12E0     		b	.L2
  51              	.L4:
  52 001e 104A     		ldr	r2, .L10+8
  53 0020 9342     		cmp	r3, r2
  54 0022 09D0     		beq	.L6
  55 0024 0F4A     		ldr	r2, .L10+12
  56 0026 9342     		cmp	r3, r2
  57 0028 09D0     		beq	.L7
  58 002a 0BE0     		b	.L2
  59              	.L5:
 104:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 105:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     case GPIO_A_BASE:
 106:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 107:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32Int = INT_GPIOA;
  60              		.loc 1 107 0
  61 002c 1023     		movs	r3, #16
  62 002e FB60     		str	r3, [r7, #12]
 108:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         break;
  63              		.loc 1 108 0
  64 0030 0AE0     		b	.L8
  65              	.L3:
 109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 110:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 111:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     case GPIO_B_BASE:
 112:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 113:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32Int = INT_GPIOB;
  66              		.loc 1 113 0
  67 0032 1123     		movs	r3, #17
  68 0034 FB60     		str	r3, [r7, #12]
 114:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         break;
  69              		.loc 1 114 0
  70 0036 07E0     		b	.L8
  71              	.L6:
 115:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 116:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 117:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     case GPIO_C_BASE:
 118:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 119:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32Int = INT_GPIOC;
  72              		.loc 1 119 0
  73 0038 1223     		movs	r3, #18
  74 003a FB60     		str	r3, [r7, #12]
 120:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         break;
  75              		.loc 1 120 0
  76 003c 04E0     		b	.L8
  77              	.L7:
 121:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 122:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 123:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     case GPIO_D_BASE:
 124:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 125:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32Int = INT_GPIOD;
  78              		.loc 1 125 0
  79 003e 1323     		movs	r3, #19
  80 0040 FB60     		str	r3, [r7, #12]
 126:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         break;
  81              		.loc 1 126 0
  82 0042 01E0     		b	.L8
  83              	.L2:
 127:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 128:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 129:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     default:
 130:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 131:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         return(0);
  84              		.loc 1 131 0
  85 0044 0023     		movs	r3, #0
  86 0046 00E0     		b	.L9
  87              	.L8:
 132:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 133:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 135:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 136:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Return GPIO interrupt number.
 137:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 138:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     return(ui32Int);
  88              		.loc 1 138 0
  89 0048 FB68     		ldr	r3, [r7, #12]
  90              	.L9:
 139:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
  91              		.loc 1 139 0
  92 004a 1846     		mov	r0, r3
  93 004c 1437     		adds	r7, r7, #20
  94              		.cfi_def_cfa_offset 4
  95 004e BD46     		mov	sp, r7
  96              		.cfi_def_cfa_register 13
  97              		@ sp needed
  98 0050 5DF8047B 		ldr	r7, [sp], #4
  99              		.cfi_restore 7
 100              		.cfi_def_cfa_offset 0
 101 0054 7047     		bx	lr
 102              	.L11:
 103 0056 00BF     		.align	2
 104              	.L10:
 105 0058 00A00D40 		.word	1074634752
 106 005c 00900D40 		.word	1074630656
 107 0060 00B00D40 		.word	1074638848
 108 0064 00C00D40 		.word	1074642944
 109              		.cfi_endproc
 110              	.LFE0:
 112              		.align	2
 113              		.global	GPIODirModeSet
 114              		.thumb
 115              		.thumb_func
 117              	GPIODirModeSet:
 118              	.LFB1:
 140:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 141:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 142:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 143:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Sets the direction and mode of the specified pin(s)
 144:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 145:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 146:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 147:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32PinIO is the pin direction and/or mode.
 148:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 149:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function sets the specified pin(s) on the selected GPIO port
 150:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! as either an input or output under software control or sets the
 151:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! pin to be under hardware control.
 152:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The parameter \e ui32PinIO is an enumerated data type that can be one of
 154:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! the following values:
 155:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 156:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_IN
 157:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_OUT
 158:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_HW
 159:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 160:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! where \b GPIO_DIR_MODE_IN specifies that the pin will be programmed as
 161:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! a software controlled input, \b GPIO_DIR_MODE_OUT specifies that the pin
 162:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! will be programmed as a software controlled output, and
 163:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \b GPIO_DIR_MODE_HW specifies that the pin will be placed under
 164:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! hardware control.
 165:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 166:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 167:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 168:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 169:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 170:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 171:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 172:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 173:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 174:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIODirModeSet(uint32_t ui32Port, uint8_t ui8Pins,
 175:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                uint32_t ui32PinIO)
 176:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 119              		.loc 1 176 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 16
 122              		@ frame_needed = 1, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124 0068 80B4     		push	{r7}
 125              		.cfi_def_cfa_offset 4
 126              		.cfi_offset 7, -4
 127 006a 85B0     		sub	sp, sp, #20
 128              		.cfi_def_cfa_offset 24
 129 006c 00AF     		add	r7, sp, #0
 130              		.cfi_def_cfa_register 7
 131 006e F860     		str	r0, [r7, #12]
 132 0070 0B46     		mov	r3, r1
 133 0072 7A60     		str	r2, [r7, #4]
 134 0074 FB72     		strb	r3, [r7, #11]
 177:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 178:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 179:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 180:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 181:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 182:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT((ui32PinIO == GPIO_DIR_MODE_IN) || (ui32PinIO == GPIO_DIR_MODE_OUT) ||
 183:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****            (ui32PinIO == GPIO_DIR_MODE_HW));
 184:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 185:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 186:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pin direction and mode.
 187:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 188:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_DIR)   = ((ui32PinIO & GPIO_DIR_MODE_OUT) ?
 135              		.loc 1 188 0
 136 0076 FB68     		ldr	r3, [r7, #12]
 137 0078 03F58063 		add	r3, r3, #1024
 138 007c 1946     		mov	r1, r3
 139 007e 7B68     		ldr	r3, [r7, #4]
 140 0080 03F00103 		and	r3, r3, #1
 189:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 141              		.loc 1 189 0
 142 0084 002B     		cmp	r3, #0
 143 0086 06D0     		beq	.L13
 144              		.loc 1 189 0 is_stmt 0 discriminator 1
 145 0088 FB68     		ldr	r3, [r7, #12]
 146 008a 03F58063 		add	r3, r3, #1024
 147 008e 1A68     		ldr	r2, [r3]
 148 0090 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 149 0092 1343     		orrs	r3, r3, r2
 150 0094 06E0     		b	.L14
 151              	.L13:
 190:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) & ~(ui8Pins)));
 152              		.loc 1 190 0 is_stmt 1 discriminator 2
 153 0096 FB68     		ldr	r3, [r7, #12]
 154 0098 03F58063 		add	r3, r3, #1024
 155 009c 1B68     		ldr	r3, [r3]
 156 009e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 157 00a0 D243     		mvns	r2, r2
 189:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 158              		.loc 1 189 0 discriminator 2
 159 00a2 1340     		ands	r3, r3, r2
 160              	.L14:
 188:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 161              		.loc 1 188 0
 162 00a4 0B60     		str	r3, [r1]
 191:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_AFSEL) = ((ui32PinIO & GPIO_DIR_MODE_HW) ?
 163              		.loc 1 191 0
 164 00a6 FB68     		ldr	r3, [r7, #12]
 165 00a8 03F58463 		add	r3, r3, #1056
 166 00ac 1946     		mov	r1, r3
 167 00ae 7B68     		ldr	r3, [r7, #4]
 168 00b0 03F00203 		and	r3, r3, #2
 192:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) | ui8Pins) :
 169              		.loc 1 192 0
 170 00b4 002B     		cmp	r3, #0
 171 00b6 06D0     		beq	.L15
 172              		.loc 1 192 0 is_stmt 0 discriminator 1
 173 00b8 FB68     		ldr	r3, [r7, #12]
 174 00ba 03F58463 		add	r3, r3, #1056
 175 00be 1A68     		ldr	r2, [r3]
 176 00c0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 177 00c2 1343     		orrs	r3, r3, r2
 178 00c4 06E0     		b	.L16
 179              	.L15:
 193:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) & ~(ui8Pins)));
 180              		.loc 1 193 0 is_stmt 1 discriminator 2
 181 00c6 FB68     		ldr	r3, [r7, #12]
 182 00c8 03F58463 		add	r3, r3, #1056
 183 00cc 1B68     		ldr	r3, [r3]
 184 00ce FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 185 00d0 D243     		mvns	r2, r2
 192:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) | ui8Pins) :
 186              		.loc 1 192 0 discriminator 2
 187 00d2 1340     		ands	r3, r3, r2
 188              	.L16:
 191:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_AFSEL) = ((ui32PinIO & GPIO_DIR_MODE_HW) ?
 189              		.loc 1 191 0
 190 00d4 0B60     		str	r3, [r1]
 194:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 191              		.loc 1 194 0
 192 00d6 1437     		adds	r7, r7, #20
 193              		.cfi_def_cfa_offset 4
 194 00d8 BD46     		mov	sp, r7
 195              		.cfi_def_cfa_register 13
 196              		@ sp needed
 197 00da 5DF8047B 		ldr	r7, [sp], #4
 198              		.cfi_restore 7
 199              		.cfi_def_cfa_offset 0
 200 00de 7047     		bx	lr
 201              		.cfi_endproc
 202              	.LFE1:
 204              		.align	2
 205              		.global	GPIODirModeGet
 206              		.thumb
 207              		.thumb_func
 209              	GPIODirModeGet:
 210              	.LFB2:
 195:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 196:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 197:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 198:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Gets the direction and mode of a pin
 199:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 200:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 201:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pin is the pin number.
 202:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 203:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function gets the direction and control mode for a specified pin on
 204:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! the selected GPIO port.  The pin can be configured as either an input or
 205:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! output under software control, or it can be under hardware control.  The
 206:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! type of control and direction are returned as an enumerated data type.
 207:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 208:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
 209:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIODirModeSet().
 210:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 211:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 212:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** uint32_t
 213:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIODirModeGet(uint32_t ui32Port, uint8_t ui8Pin)
 214:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 211              		.loc 1 214 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 16
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216 00e0 80B4     		push	{r7}
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 7, -4
 219 00e2 85B0     		sub	sp, sp, #20
 220              		.cfi_def_cfa_offset 24
 221 00e4 00AF     		add	r7, sp, #0
 222              		.cfi_def_cfa_register 7
 223 00e6 7860     		str	r0, [r7, #4]
 224 00e8 0B46     		mov	r3, r1
 225 00ea FB70     		strb	r3, [r7, #3]
 215:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32Dir;
 216:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32AFSEL;
 217:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 218:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 219:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 220:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 221:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 222:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
 223:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 224:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 225:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Convert from a pin number to a bit position.
 226:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui8Pin = 1 << ui8Pin;
 226              		.loc 1 227 0
 227 00ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 228 00ee 0122     		movs	r2, #1
 229 00f0 02FA03F3 		lsl	r3, r2, r3
 230 00f4 FB70     		strb	r3, [r7, #3]
 228:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 229:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 230:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Return the pin direction and mode.
 231:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 232:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32Dir   = HWREG(ui32Port + GPIO_O_DIR);
 231              		.loc 1 232 0
 232 00f6 7B68     		ldr	r3, [r7, #4]
 233 00f8 03F58063 		add	r3, r3, #1024
 234 00fc 1B68     		ldr	r3, [r3]
 235 00fe FB60     		str	r3, [r7, #12]
 233:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32AFSEL = HWREG(ui32Port + GPIO_O_AFSEL);
 236              		.loc 1 233 0
 237 0100 7B68     		ldr	r3, [r7, #4]
 238 0102 03F58463 		add	r3, r3, #1056
 239 0106 1B68     		ldr	r3, [r3]
 240 0108 BB60     		str	r3, [r7, #8]
 234:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     return(((ui32Dir & ui8Pin) ? GPIO_DIR_MODE_OUT : GPIO_DIR_MODE_IN) |
 241              		.loc 1 234 0
 242 010a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 243 010c FB68     		ldr	r3, [r7, #12]
 244 010e 1340     		ands	r3, r3, r2
 245 0110 002B     		cmp	r3, #0
 246 0112 14BF     		ite	ne
 247 0114 0123     		movne	r3, #1
 248 0116 0023     		moveq	r3, #0
 249 0118 DBB2     		uxtb	r3, r3
 250 011a 1946     		mov	r1, r3
 235:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****            ((ui32AFSEL & ui8Pin) ? GPIO_DIR_MODE_HW : GPIO_DIR_MODE_IN));
 251              		.loc 1 235 0
 252 011c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 253 011e BB68     		ldr	r3, [r7, #8]
 254 0120 1340     		ands	r3, r3, r2
 255 0122 002B     		cmp	r3, #0
 256 0124 01D0     		beq	.L18
 257              		.loc 1 235 0 is_stmt 0 discriminator 1
 258 0126 0223     		movs	r3, #2
 259 0128 00E0     		b	.L19
 260              	.L18:
 261              		.loc 1 235 0 discriminator 2
 262 012a 0023     		movs	r3, #0
 263              	.L19:
 234:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     return(((ui32Dir & ui8Pin) ? GPIO_DIR_MODE_OUT : GPIO_DIR_MODE_IN) |
 264              		.loc 1 234 0 is_stmt 1
 265 012c 0B43     		orrs	r3, r3, r1
 236:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 266              		.loc 1 236 0
 267 012e 1846     		mov	r0, r3
 268 0130 1437     		adds	r7, r7, #20
 269              		.cfi_def_cfa_offset 4
 270 0132 BD46     		mov	sp, r7
 271              		.cfi_def_cfa_register 13
 272              		@ sp needed
 273 0134 5DF8047B 		ldr	r7, [sp], #4
 274              		.cfi_restore 7
 275              		.cfi_def_cfa_offset 0
 276 0138 7047     		bx	lr
 277              		.cfi_endproc
 278              	.LFE2:
 280 013a 00BF     		.align	2
 281              		.global	GPIOIntTypeSet
 282              		.thumb
 283              		.thumb_func
 285              	GPIOIntTypeSet:
 286              	.LFB3:
 237:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 238:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 239:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 240:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Sets the interrupt type for the specified pin(s)
 241:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 242:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 243:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 244:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32IntType specifies the type of interrupt trigger mechanism.
 245:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 246:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function sets up the various interrupt trigger mechanisms for the
 247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! specified pin(s) on the selected GPIO port.
 248:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 249:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The parameter \e ui32IntType is an enumerated data type that can be one of
 250:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! the following values:
 251:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 252:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_FALLING_EDGE
 253:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_RISING_EDGE
 254:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_BOTH_EDGES
 255:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_LOW_LEVEL
 256:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_HIGH_LEVEL
 257:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 258:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! where the different values describe the interrupt detection mechanism
 259:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! (edge or level) and the particular triggering event (falling, rising,
 260:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! or both edges for edge detect, low or high for level detect).
 261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 262:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 263:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 264:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 265:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 266:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note To avoid any spurious interrupts, the user must
 267:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! ensure that the GPIO inputs remain stable for the duration of
 268:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! this function.
 269:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 270:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 271:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 272:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 273:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
 275:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                uint32_t ui32IntType)
 276:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 287              		.loc 1 276 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 16
 290              		@ frame_needed = 1, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292 013c 80B4     		push	{r7}
 293              		.cfi_def_cfa_offset 4
 294              		.cfi_offset 7, -4
 295 013e 85B0     		sub	sp, sp, #20
 296              		.cfi_def_cfa_offset 24
 297 0140 00AF     		add	r7, sp, #0
 298              		.cfi_def_cfa_register 7
 299 0142 F860     		str	r0, [r7, #12]
 300 0144 0B46     		mov	r3, r1
 301 0146 7A60     		str	r2, [r7, #4]
 302 0148 FB72     		strb	r3, [r7, #11]
 277:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 278:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 279:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 280:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 281:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 282:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT((ui32IntType == GPIO_FALLING_EDGE) ||
 283:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****            (ui32IntType == GPIO_RISING_EDGE) || (ui32IntType == GPIO_BOTH_EDGES) ||
 284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****            (ui32IntType == GPIO_LOW_LEVEL)  || (ui32IntType == GPIO_HIGH_LEVEL));
 285:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 286:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 287:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pin interrupt type.
 288:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 289:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IBE) = ((ui32IntType & 1) ?
 303              		.loc 1 289 0
 304 014a FB68     		ldr	r3, [r7, #12]
 305 014c 03F58163 		add	r3, r3, #1032
 306 0150 1946     		mov	r1, r3
 307 0152 7B68     		ldr	r3, [r7, #4]
 308 0154 03F00103 		and	r3, r3, #1
 290:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 309              		.loc 1 290 0
 310 0158 002B     		cmp	r3, #0
 311 015a 06D0     		beq	.L22
 312              		.loc 1 290 0 is_stmt 0 discriminator 1
 313 015c FB68     		ldr	r3, [r7, #12]
 314 015e 03F58163 		add	r3, r3, #1032
 315 0162 1A68     		ldr	r2, [r3]
 316 0164 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 317 0166 1343     		orrs	r3, r3, r2
 318 0168 06E0     		b	.L23
 319              	.L22:
 291:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) & ~(ui8Pins)));
 320              		.loc 1 291 0 is_stmt 1 discriminator 2
 321 016a FB68     		ldr	r3, [r7, #12]
 322 016c 03F58163 		add	r3, r3, #1032
 323 0170 1B68     		ldr	r3, [r3]
 324 0172 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 325 0174 D243     		mvns	r2, r2
 290:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 326              		.loc 1 290 0 discriminator 2
 327 0176 1340     		ands	r3, r3, r2
 328              	.L23:
 289:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 329              		.loc 1 289 0
 330 0178 0B60     		str	r3, [r1]
 292:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IS) = ((ui32IntType & 2) ?
 331              		.loc 1 292 0
 332 017a FB68     		ldr	r3, [r7, #12]
 333 017c 03F20443 		addw	r3, r3, #1028
 334 0180 1946     		mov	r1, r3
 335 0182 7B68     		ldr	r3, [r7, #4]
 336 0184 03F00203 		and	r3, r3, #2
 293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) | ui8Pins) :
 337              		.loc 1 293 0
 338 0188 002B     		cmp	r3, #0
 339 018a 06D0     		beq	.L24
 340              		.loc 1 293 0 is_stmt 0 discriminator 1
 341 018c FB68     		ldr	r3, [r7, #12]
 342 018e 03F20443 		addw	r3, r3, #1028
 343 0192 1A68     		ldr	r2, [r3]
 344 0194 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 345 0196 1343     		orrs	r3, r3, r2
 346 0198 06E0     		b	.L25
 347              	.L24:
 294:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) & ~(ui8Pins)));
 348              		.loc 1 294 0 is_stmt 1 discriminator 2
 349 019a FB68     		ldr	r3, [r7, #12]
 350 019c 03F20443 		addw	r3, r3, #1028
 351 01a0 1B68     		ldr	r3, [r3]
 352 01a2 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 353 01a4 D243     		mvns	r2, r2
 293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) | ui8Pins) :
 354              		.loc 1 293 0 discriminator 2
 355 01a6 1340     		ands	r3, r3, r2
 356              	.L25:
 292:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IS) = ((ui32IntType & 2) ?
 357              		.loc 1 292 0
 358 01a8 0B60     		str	r3, [r1]
 295:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IEV) = ((ui32IntType & 4) ?
 359              		.loc 1 295 0
 360 01aa FB68     		ldr	r3, [r7, #12]
 361 01ac 03F20C43 		addw	r3, r3, #1036
 362 01b0 1946     		mov	r1, r3
 363 01b2 7B68     		ldr	r3, [r7, #4]
 364 01b4 03F00403 		and	r3, r3, #4
 296:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) | ui8Pins) :
 365              		.loc 1 296 0
 366 01b8 002B     		cmp	r3, #0
 367 01ba 06D0     		beq	.L26
 368              		.loc 1 296 0 is_stmt 0 discriminator 1
 369 01bc FB68     		ldr	r3, [r7, #12]
 370 01be 03F20C43 		addw	r3, r3, #1036
 371 01c2 1A68     		ldr	r2, [r3]
 372 01c4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 373 01c6 1343     		orrs	r3, r3, r2
 374 01c8 06E0     		b	.L27
 375              	.L26:
 297:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) & ~(ui8Pins)));
 376              		.loc 1 297 0 is_stmt 1 discriminator 2
 377 01ca FB68     		ldr	r3, [r7, #12]
 378 01cc 03F20C43 		addw	r3, r3, #1036
 379 01d0 1B68     		ldr	r3, [r3]
 380 01d2 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 381 01d4 D243     		mvns	r2, r2
 296:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) | ui8Pins) :
 382              		.loc 1 296 0 discriminator 2
 383 01d6 1340     		ands	r3, r3, r2
 384              	.L27:
 295:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IEV) = ((ui32IntType & 4) ?
 385              		.loc 1 295 0
 386 01d8 0B60     		str	r3, [r1]
 298:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 387              		.loc 1 298 0
 388 01da 1437     		adds	r7, r7, #20
 389              		.cfi_def_cfa_offset 4
 390 01dc BD46     		mov	sp, r7
 391              		.cfi_def_cfa_register 13
 392              		@ sp needed
 393 01de 5DF8047B 		ldr	r7, [sp], #4
 394              		.cfi_restore 7
 395              		.cfi_def_cfa_offset 0
 396 01e2 7047     		bx	lr
 397              		.cfi_endproc
 398              	.LFE3:
 400              		.align	2
 401              		.global	GPIOIntTypeGet
 402              		.thumb
 403              		.thumb_func
 405              	GPIOIntTypeGet:
 406              	.LFB4:
 299:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 300:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 301:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 302:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Gets the interrupt type for a pin
 303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 304:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 305:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pin is the pin number.
 306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 307:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function gets the interrupt type for a specified pin on the selected
 308:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIO port.  The pin can be configured as a falling edge, rising edge, or
 309:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! both edge detected interrupt, or can be configured as a low level or
 310:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! high level detected interrupt.  The type of interrupt detection mechanism
 311:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! is returned as an enumerated data type.
 312:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 313:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
 314:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIOIntTypeSet().
 315:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 316:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 317:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** uint32_t
 318:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin)
 319:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 407              		.loc 1 319 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 24
 410              		@ frame_needed = 1, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412 01e4 80B4     		push	{r7}
 413              		.cfi_def_cfa_offset 4
 414              		.cfi_offset 7, -4
 415 01e6 87B0     		sub	sp, sp, #28
 416              		.cfi_def_cfa_offset 32
 417 01e8 00AF     		add	r7, sp, #0
 418              		.cfi_def_cfa_register 7
 419 01ea 7860     		str	r0, [r7, #4]
 420 01ec 0B46     		mov	r3, r1
 421 01ee FB70     		strb	r3, [r7, #3]
 320:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32IBE, ui32IS, ui32IEV;
 321:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 322:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 323:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 324:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 325:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 326:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
 327:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 328:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 329:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Convert from a pin number to a bit position.
 330:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 331:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui8Pin = 1 << ui8Pin;
 422              		.loc 1 331 0
 423 01f0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 424 01f2 0122     		movs	r2, #1
 425 01f4 02FA03F3 		lsl	r3, r2, r3
 426 01f8 FB70     		strb	r3, [r7, #3]
 332:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 333:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 334:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Return the pin interrupt type.
 335:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 336:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32IBE = HWREG(ui32Port + GPIO_O_IBE);
 427              		.loc 1 336 0
 428 01fa 7B68     		ldr	r3, [r7, #4]
 429 01fc 03F58163 		add	r3, r3, #1032
 430 0200 1B68     		ldr	r3, [r3]
 431 0202 7B61     		str	r3, [r7, #20]
 337:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32IS  = HWREG(ui32Port + GPIO_O_IS);
 432              		.loc 1 337 0
 433 0204 7B68     		ldr	r3, [r7, #4]
 434 0206 03F20443 		addw	r3, r3, #1028
 435 020a 1B68     		ldr	r3, [r3]
 436 020c 3B61     		str	r3, [r7, #16]
 338:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32IEV = HWREG(ui32Port + GPIO_O_IEV);
 437              		.loc 1 338 0
 438 020e 7B68     		ldr	r3, [r7, #4]
 439 0210 03F20C43 		addw	r3, r3, #1036
 440 0214 1B68     		ldr	r3, [r3]
 441 0216 FB60     		str	r3, [r7, #12]
 339:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     return(((ui32IBE & ui8Pin) ? 1 : 0) | ((ui32IS & ui8Pin) ? 2 : 0) |
 442              		.loc 1 339 0
 443 0218 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 444 021a 7B69     		ldr	r3, [r7, #20]
 445 021c 1340     		ands	r3, r3, r2
 446 021e 002B     		cmp	r3, #0
 447 0220 14BF     		ite	ne
 448 0222 0123     		movne	r3, #1
 449 0224 0023     		moveq	r3, #0
 450 0226 DBB2     		uxtb	r3, r3
 451 0228 1946     		mov	r1, r3
 452 022a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 453 022c 3B69     		ldr	r3, [r7, #16]
 454 022e 1340     		ands	r3, r3, r2
 455 0230 002B     		cmp	r3, #0
 456 0232 01D0     		beq	.L29
 457              		.loc 1 339 0 is_stmt 0 discriminator 1
 458 0234 0223     		movs	r3, #2
 459 0236 00E0     		b	.L30
 460              	.L29:
 461              		.loc 1 339 0 discriminator 2
 462 0238 0023     		movs	r3, #0
 463              	.L30:
 464              		.loc 1 339 0 discriminator 4
 465 023a 41EA0302 		orr	r2, r1, r3
 340:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****            ((ui32IEV & ui8Pin) ? 4 : 0));
 466              		.loc 1 340 0 is_stmt 1 discriminator 4
 467 023e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 468 0240 FB68     		ldr	r3, [r7, #12]
 469 0242 0B40     		ands	r3, r3, r1
 470 0244 002B     		cmp	r3, #0
 471 0246 01D0     		beq	.L31
 472              		.loc 1 340 0 is_stmt 0 discriminator 1
 473 0248 0423     		movs	r3, #4
 474 024a 00E0     		b	.L32
 475              	.L31:
 476              		.loc 1 340 0 discriminator 2
 477 024c 0023     		movs	r3, #0
 478              	.L32:
 339:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     return(((ui32IBE & ui8Pin) ? 1 : 0) | ((ui32IS & ui8Pin) ? 2 : 0) |
 479              		.loc 1 339 0 is_stmt 1
 480 024e 1343     		orrs	r3, r3, r2
 341:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 481              		.loc 1 341 0
 482 0250 1846     		mov	r0, r3
 483 0252 1C37     		adds	r7, r7, #28
 484              		.cfi_def_cfa_offset 4
 485 0254 BD46     		mov	sp, r7
 486              		.cfi_def_cfa_register 13
 487              		@ sp needed
 488 0256 5DF8047B 		ldr	r7, [sp], #4
 489              		.cfi_restore 7
 490              		.cfi_def_cfa_offset 0
 491 025a 7047     		bx	lr
 492              		.cfi_endproc
 493              	.LFE4:
 495              		.align	2
 496              		.global	GPIOPinIntEnable
 497              		.thumb
 498              		.thumb_func
 500              	GPIOPinIntEnable:
 501              	.LFB5:
 342:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 343:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 344:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 345:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Enables interrupts for the specified pin(s)
 346:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 347:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 348:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 349:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 350:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Unmasks the interrupt for the specified pin(s).
 351:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 352:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 353:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 354:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 355:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 356:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 357:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 358:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 359:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 360:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinIntEnable(uint32_t ui32Port, uint8_t ui8Pins)
 361:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 502              		.loc 1 361 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 8
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507 025c 80B4     		push	{r7}
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 025e 83B0     		sub	sp, sp, #12
 511              		.cfi_def_cfa_offset 16
 512 0260 00AF     		add	r7, sp, #0
 513              		.cfi_def_cfa_register 7
 514 0262 7860     		str	r0, [r7, #4]
 515 0264 0B46     		mov	r3, r1
 516 0266 FB70     		strb	r3, [r7, #3]
 362:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 363:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 364:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 365:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 366:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 367:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 368:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Enable the interrupts.
 369:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 370:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IE) |= ui8Pins;
 517              		.loc 1 370 0
 518 0268 7B68     		ldr	r3, [r7, #4]
 519 026a 03F58263 		add	r3, r3, #1040
 520 026e 1946     		mov	r1, r3
 521 0270 7B68     		ldr	r3, [r7, #4]
 522 0272 03F58263 		add	r3, r3, #1040
 523 0276 1A68     		ldr	r2, [r3]
 524 0278 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 525 027a 1343     		orrs	r3, r3, r2
 526 027c 0B60     		str	r3, [r1]
 371:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 527              		.loc 1 371 0
 528 027e 0C37     		adds	r7, r7, #12
 529              		.cfi_def_cfa_offset 4
 530 0280 BD46     		mov	sp, r7
 531              		.cfi_def_cfa_register 13
 532              		@ sp needed
 533 0282 5DF8047B 		ldr	r7, [sp], #4
 534              		.cfi_restore 7
 535              		.cfi_def_cfa_offset 0
 536 0286 7047     		bx	lr
 537              		.cfi_endproc
 538              	.LFE5:
 540              		.align	2
 541              		.global	GPIOPinIntDisable
 542              		.thumb
 543              		.thumb_func
 545              	GPIOPinIntDisable:
 546              	.LFB6:
 372:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 373:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 374:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 375:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Disables interrupts for the specified pin(s)
 376:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 377:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 378:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 379:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 380:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Masks the interrupt for the specified pin(s)
 381:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 382:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 383:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 384:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 385:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 386:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 387:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 388:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 389:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 390:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinIntDisable(uint32_t ui32Port, uint8_t ui8Pins)
 391:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 547              		.loc 1 391 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 1, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 552 0288 80B4     		push	{r7}
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 7, -4
 555 028a 83B0     		sub	sp, sp, #12
 556              		.cfi_def_cfa_offset 16
 557 028c 00AF     		add	r7, sp, #0
 558              		.cfi_def_cfa_register 7
 559 028e 7860     		str	r0, [r7, #4]
 560 0290 0B46     		mov	r3, r1
 561 0292 FB70     		strb	r3, [r7, #3]
 392:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 393:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 394:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 395:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 396:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 397:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 398:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Disable the interrupts.
 399:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 400:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IE) &= ~(ui8Pins);
 562              		.loc 1 400 0
 563 0294 7B68     		ldr	r3, [r7, #4]
 564 0296 03F58263 		add	r3, r3, #1040
 565 029a 1946     		mov	r1, r3
 566 029c 7B68     		ldr	r3, [r7, #4]
 567 029e 03F58263 		add	r3, r3, #1040
 568 02a2 1B68     		ldr	r3, [r3]
 569 02a4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 570 02a6 D243     		mvns	r2, r2
 571 02a8 1340     		ands	r3, r3, r2
 572 02aa 0B60     		str	r3, [r1]
 401:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 573              		.loc 1 401 0
 574 02ac 0C37     		adds	r7, r7, #12
 575              		.cfi_def_cfa_offset 4
 576 02ae BD46     		mov	sp, r7
 577              		.cfi_def_cfa_register 13
 578              		@ sp needed
 579 02b0 5DF8047B 		ldr	r7, [sp], #4
 580              		.cfi_restore 7
 581              		.cfi_def_cfa_offset 0
 582 02b4 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE6:
 586 02b6 00BF     		.align	2
 587              		.global	GPIOPinIntStatus
 588              		.thumb
 589              		.thumb_func
 591              	GPIOPinIntStatus:
 592              	.LFB7:
 402:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 403:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 404:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 405:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Gets interrupt status for the specified GPIO port
 406:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 407:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 408:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param bMasked specifies whether masked or raw interrupt status is
 409:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! returned.
 410:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 411:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! If \e bMasked is set as \b true, then the masked interrupt status is
 412:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! returned; otherwise, the raw interrupt status is returned.
 413:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 414:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return Returns a bit-packed byte, where each bit that is set identifies
 415:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! an active masked or raw interrupt, and where bit 0 of the byte
 416:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 417:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Bits 31:8 should be ignored.
 418:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 419:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 420:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** uint32_t
 421:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinIntStatus(uint32_t ui32Port, bool bMasked)
 422:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 593              		.loc 1 422 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 8
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597              		@ link register save eliminated.
 598 02b8 80B4     		push	{r7}
 599              		.cfi_def_cfa_offset 4
 600              		.cfi_offset 7, -4
 601 02ba 83B0     		sub	sp, sp, #12
 602              		.cfi_def_cfa_offset 16
 603 02bc 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 605 02be 7860     		str	r0, [r7, #4]
 606 02c0 0B46     		mov	r3, r1
 607 02c2 FB70     		strb	r3, [r7, #3]
 423:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 424:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 425:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 426:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 427:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 428:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 429:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Return the interrupt status.
 430:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 431:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(bMasked)
 608              		.loc 1 431 0
 609 02c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 610 02c6 002B     		cmp	r3, #0
 611 02c8 04D0     		beq	.L37
 432:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 433:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         return(HWREG(ui32Port + GPIO_O_MIS));
 612              		.loc 1 433 0
 613 02ca 7B68     		ldr	r3, [r7, #4]
 614 02cc 03F58363 		add	r3, r3, #1048
 615 02d0 1B68     		ldr	r3, [r3]
 616 02d2 03E0     		b	.L38
 617              	.L37:
 434:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 435:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     else
 436:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 437:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         return(HWREG(ui32Port + GPIO_O_RIS));
 618              		.loc 1 437 0
 619 02d4 7B68     		ldr	r3, [r7, #4]
 620 02d6 03F21443 		addw	r3, r3, #1044
 621 02da 1B68     		ldr	r3, [r3]
 622              	.L38:
 438:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 439:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 623              		.loc 1 439 0
 624 02dc 1846     		mov	r0, r3
 625 02de 0C37     		adds	r7, r7, #12
 626              		.cfi_def_cfa_offset 4
 627 02e0 BD46     		mov	sp, r7
 628              		.cfi_def_cfa_register 13
 629              		@ sp needed
 630 02e2 5DF8047B 		ldr	r7, [sp], #4
 631              		.cfi_restore 7
 632              		.cfi_def_cfa_offset 0
 633 02e6 7047     		bx	lr
 634              		.cfi_endproc
 635              	.LFE7:
 637              		.align	2
 638              		.global	GPIOPinIntClear
 639              		.thumb
 640              		.thumb_func
 642              	GPIOPinIntClear:
 643              	.LFB8:
 440:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 441:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 442:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 443:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s)
 444:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 445:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 446:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 447:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 448:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s).
 449:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 450:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 451:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 452:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 453:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 454:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note The write buffer in the Cortex-M3 processor can cause the interrupt 
 455:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! source to take several clock cycles before clearing.
 456:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Therefore, TI recommends clearing the interrupt source early in the 
 457:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! interrupt handler (as opposed to the very last action) to avoid
 458:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! returning from the interrupt handler before the interrupt source is
 459:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! actually cleared.  Failure to clear the interrupt source early can result in
 460:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! the interrupt handler being immediately reentered (because NVIC still sees
 461:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! the interrupt source asserted).
 462:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 463:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 464:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 465:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 466:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 467:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinIntClear(uint32_t ui32Port, uint8_t ui8Pins)
 468:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 644              		.loc 1 468 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 8
 647              		@ frame_needed = 1, uses_anonymous_args = 0
 648              		@ link register save eliminated.
 649 02e8 80B4     		push	{r7}
 650              		.cfi_def_cfa_offset 4
 651              		.cfi_offset 7, -4
 652 02ea 83B0     		sub	sp, sp, #12
 653              		.cfi_def_cfa_offset 16
 654 02ec 00AF     		add	r7, sp, #0
 655              		.cfi_def_cfa_register 7
 656 02ee 7860     		str	r0, [r7, #4]
 657 02f0 0B46     		mov	r3, r1
 658 02f2 FB70     		strb	r3, [r7, #3]
 469:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 470:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 471:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 472:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 473:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 474:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 475:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Clear the interrupts.
 476:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 477:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IC) = ui8Pins;
 659              		.loc 1 477 0
 660 02f4 7B68     		ldr	r3, [r7, #4]
 661 02f6 03F21C43 		addw	r3, r3, #1052
 662 02fa 1A46     		mov	r2, r3
 663 02fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 664 02fe 1360     		str	r3, [r2]
 478:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 665              		.loc 1 478 0
 666 0300 0C37     		adds	r7, r7, #12
 667              		.cfi_def_cfa_offset 4
 668 0302 BD46     		mov	sp, r7
 669              		.cfi_def_cfa_register 13
 670              		@ sp needed
 671 0304 5DF8047B 		ldr	r7, [sp], #4
 672              		.cfi_restore 7
 673              		.cfi_def_cfa_offset 0
 674 0308 7047     		bx	lr
 675              		.cfi_endproc
 676              	.LFE8:
 678 030a 00BF     		.align	2
 679              		.global	GPIOPortIntRegister
 680              		.thumb
 681              		.thumb_func
 683              	GPIOPortIntRegister:
 684              	.LFB9:
 479:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 480:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 481:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 482:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Registers an interrupt handler for a GPIO port
 483:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 484:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 485:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param pfnHandler is a pointer to the GPIO port interrupt handling
 486:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! function.
 487:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 488:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function ensures that the interrupt handler specified by
 489:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \e pfnHandler is called when an interrupt is detected from the selected
 490:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIO port.  This function also enables the corresponding GPIO interrupt
 491:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! in the interrupt controller; individual pin interrupts and interrupt
 492:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! sources must be enabled with GPIOPinIntEnable().
 493:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 494:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \sa IntRegister() for important information about registering interrupt
 495:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! handlers.
 496:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 497:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 498:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 499:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 500:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 501:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPortIntRegister(uint32_t ui32Port, void (*pfnHandler)(void))
 502:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 685              		.loc 1 502 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 8
 688              		@ frame_needed = 1, uses_anonymous_args = 0
 689 030c 80B5     		push	{r7, lr}
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 7, -8
 692              		.cfi_offset 14, -4
 693 030e 82B0     		sub	sp, sp, #8
 694              		.cfi_def_cfa_offset 16
 695 0310 00AF     		add	r7, sp, #0
 696              		.cfi_def_cfa_register 7
 697 0312 7860     		str	r0, [r7, #4]
 698 0314 3960     		str	r1, [r7]
 503:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 504:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 505:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 506:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 507:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 508:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 509:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Get the interrupt number associated with the specified GPIO.
 510:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 511:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32Port = GPIOGetIntNumber(ui32Port);
 699              		.loc 1 511 0
 700 0316 7868     		ldr	r0, [r7, #4]
 701 0318 FFF7FEFF 		bl	GPIOGetIntNumber
 702 031c 7860     		str	r0, [r7, #4]
 512:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 513:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 514:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Register the interrupt handler.
 515:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 516:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IntRegister(ui32Port, pfnHandler);
 703              		.loc 1 516 0
 704 031e 7868     		ldr	r0, [r7, #4]
 705 0320 3968     		ldr	r1, [r7]
 706 0322 FFF7FEFF 		bl	IntRegister
 517:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 518:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 519:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Enable the GPIO interrupt.
 520:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 521:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IntEnable(ui32Port);
 707              		.loc 1 521 0
 708 0326 7868     		ldr	r0, [r7, #4]
 709 0328 FFF7FEFF 		bl	IntEnable
 522:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 710              		.loc 1 522 0
 711 032c 0837     		adds	r7, r7, #8
 712              		.cfi_def_cfa_offset 8
 713 032e BD46     		mov	sp, r7
 714              		.cfi_def_cfa_register 13
 715              		@ sp needed
 716 0330 80BD     		pop	{r7, pc}
 717              		.cfi_endproc
 718              	.LFE9:
 720 0332 00BF     		.align	2
 721              		.global	GPIOPortIntUnregister
 722              		.thumb
 723              		.thumb_func
 725              	GPIOPortIntUnregister:
 726              	.LFB10:
 523:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 524:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 525:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 526:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Removes an interrupt handler for a GPIO port
 527:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 528:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 529:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 530:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function unregisters the interrupt handler for the specified
 531:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIO port.  This function also disables the corresponding
 532:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIO port interrupt in the interrupt controller; individual GPIO interrupts
 533:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! and interrupt sources must be disabled with GPIOPinIntDisable().
 534:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 535:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \sa IntRegister() for important information about registering interrupt
 536:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! handlers.
 537:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 538:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 539:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 540:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 541:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 542:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPortIntUnregister(uint32_t ui32Port)
 543:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 727              		.loc 1 543 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 8
 730              		@ frame_needed = 1, uses_anonymous_args = 0
 731 0334 80B5     		push	{r7, lr}
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 7, -8
 734              		.cfi_offset 14, -4
 735 0336 82B0     		sub	sp, sp, #8
 736              		.cfi_def_cfa_offset 16
 737 0338 00AF     		add	r7, sp, #0
 738              		.cfi_def_cfa_register 7
 739 033a 7860     		str	r0, [r7, #4]
 544:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 545:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 546:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 547:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 548:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 549:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 550:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Get the interrupt number associated with the specified GPIO.
 551:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 552:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32Port = GPIOGetIntNumber(ui32Port);
 740              		.loc 1 552 0
 741 033c 7868     		ldr	r0, [r7, #4]
 742 033e FFF7FEFF 		bl	GPIOGetIntNumber
 743 0342 7860     		str	r0, [r7, #4]
 553:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 554:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 555:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Disable the GPIO interrupt.
 556:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 557:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IntDisable(ui32Port);
 744              		.loc 1 557 0
 745 0344 7868     		ldr	r0, [r7, #4]
 746 0346 FFF7FEFF 		bl	IntDisable
 558:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 559:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 560:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Unregister the interrupt handler.
 561:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 562:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IntUnregister(ui32Port);
 747              		.loc 1 562 0
 748 034a 7868     		ldr	r0, [r7, #4]
 749 034c FFF7FEFF 		bl	IntUnregister
 563:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 750              		.loc 1 563 0
 751 0350 0837     		adds	r7, r7, #8
 752              		.cfi_def_cfa_offset 8
 753 0352 BD46     		mov	sp, r7
 754              		.cfi_def_cfa_register 13
 755              		@ sp needed
 756 0354 80BD     		pop	{r7, pc}
 757              		.cfi_endproc
 758              	.LFE10:
 760 0356 00BF     		.align	2
 761              		.global	GPIOPinRead
 762              		.thumb
 763              		.thumb_func
 765              	GPIOPinRead:
 766              	.LFB11:
 564:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 565:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 566:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 567:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Reads the values present of the specified pin(s)
 568:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 569:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 570:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 571:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 572:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The values at the specified pin(s) are read, as specified by \e ui8Pins.
 573:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Values are returned for both input and output pin(s), and the value
 574:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! for pin(s) that are not specified by \e ui8Pins are set to 0.
 575:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 576:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 577:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 578:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 579:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 580:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return Returns a bit-packed byte providing the state of the specified
 581:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! pin, where bit 0 of the byte represents GPIO port pin 0, bit 1 represents
 582:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIO port pin 1, and so on.  Any bit that is not specified by \e ui8Pins
 583:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! is returned as a 0.  Bits 31:8 should be ignored.
 584:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 585:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 586:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** uint32_t
 587:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins)
 588:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 767              		.loc 1 588 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 8
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 772 0358 80B4     		push	{r7}
 773              		.cfi_def_cfa_offset 4
 774              		.cfi_offset 7, -4
 775 035a 83B0     		sub	sp, sp, #12
 776              		.cfi_def_cfa_offset 16
 777 035c 00AF     		add	r7, sp, #0
 778              		.cfi_def_cfa_register 7
 779 035e 7860     		str	r0, [r7, #4]
 780 0360 0B46     		mov	r3, r1
 781 0362 FB70     		strb	r3, [r7, #3]
 589:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 590:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 591:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 592:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 593:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 594:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 595:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Return the pin value(s).
 596:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 597:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     return(HWREG(ui32Port + (GPIO_O_DATA + (ui8Pins << 2))));
 782              		.loc 1 597 0
 783 0364 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 784 0366 9B00     		lsls	r3, r3, #2
 785 0368 1A46     		mov	r2, r3
 786 036a 7B68     		ldr	r3, [r7, #4]
 787 036c 1344     		add	r3, r3, r2
 788 036e 1B68     		ldr	r3, [r3]
 598:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 789              		.loc 1 598 0
 790 0370 1846     		mov	r0, r3
 791 0372 0C37     		adds	r7, r7, #12
 792              		.cfi_def_cfa_offset 4
 793 0374 BD46     		mov	sp, r7
 794              		.cfi_def_cfa_register 13
 795              		@ sp needed
 796 0376 5DF8047B 		ldr	r7, [sp], #4
 797              		.cfi_restore 7
 798              		.cfi_def_cfa_offset 0
 799 037a 7047     		bx	lr
 800              		.cfi_endproc
 801              	.LFE11:
 803              		.align	2
 804              		.global	GPIOPinWrite
 805              		.thumb
 806              		.thumb_func
 808              	GPIOPinWrite:
 809              	.LFB12:
 599:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 600:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 601:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 602:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Writes a value to the specified pin(s)
 603:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 604:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 605:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 606:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Val is the value to write to the pin(s).
 607:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 608:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Writes the corresponding bit values to the output pin(s) specified by
 609:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \e ui8Pins.  Writing to a pin configured as an input pin has no effect.
 610:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 611:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 612:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 613:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 614:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 615:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 616:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 617:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 618:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 619:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val)
 620:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 810              		.loc 1 620 0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 8
 813              		@ frame_needed = 1, uses_anonymous_args = 0
 814              		@ link register save eliminated.
 815 037c 80B4     		push	{r7}
 816              		.cfi_def_cfa_offset 4
 817              		.cfi_offset 7, -4
 818 037e 83B0     		sub	sp, sp, #12
 819              		.cfi_def_cfa_offset 16
 820 0380 00AF     		add	r7, sp, #0
 821              		.cfi_def_cfa_register 7
 822 0382 7860     		str	r0, [r7, #4]
 823 0384 0B46     		mov	r3, r1
 824 0386 FB70     		strb	r3, [r7, #3]
 825 0388 1346     		mov	r3, r2
 826 038a BB70     		strb	r3, [r7, #2]
 621:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 622:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 623:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 624:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 625:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 626:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 627:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Write the pins.
 628:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 629:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + (GPIO_O_DATA + (ui8Pins << 2))) = ui8Val;
 827              		.loc 1 629 0
 828 038c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 829 038e 9B00     		lsls	r3, r3, #2
 830 0390 1A46     		mov	r2, r3
 831 0392 7B68     		ldr	r3, [r7, #4]
 832 0394 1344     		add	r3, r3, r2
 833 0396 1A46     		mov	r2, r3
 834 0398 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 835 039a 1360     		str	r3, [r2]
 630:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 836              		.loc 1 630 0
 837 039c 0C37     		adds	r7, r7, #12
 838              		.cfi_def_cfa_offset 4
 839 039e BD46     		mov	sp, r7
 840              		.cfi_def_cfa_register 13
 841              		@ sp needed
 842 03a0 5DF8047B 		ldr	r7, [sp], #4
 843              		.cfi_restore 7
 844              		.cfi_def_cfa_offset 0
 845 03a4 7047     		bx	lr
 846              		.cfi_endproc
 847              	.LFE12:
 849 03a6 00BF     		.align	2
 850              		.global	GPIOPinTypeGPIOInput
 851              		.thumb
 852              		.thumb_func
 854              	GPIOPinTypeGPIOInput:
 855              	.LFB13:
 631:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 632:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 633:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 634:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Configures pin(s) for use as GPIO inputs
 635:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 636:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 637:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 638:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 639:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The GPIO pins must be properly configured in order to function correctly as
 640:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIO inputs.  This function provides the proper configuration for those
 641:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! pin(s).
 642:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 643:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 644:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 645:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 646:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 647:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 648:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 649:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 650:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 651:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins)
 652:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 856              		.loc 1 652 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 8
 859              		@ frame_needed = 1, uses_anonymous_args = 0
 860 03a8 80B5     		push	{r7, lr}
 861              		.cfi_def_cfa_offset 8
 862              		.cfi_offset 7, -8
 863              		.cfi_offset 14, -4
 864 03aa 82B0     		sub	sp, sp, #8
 865              		.cfi_def_cfa_offset 16
 866 03ac 00AF     		add	r7, sp, #0
 867              		.cfi_def_cfa_register 7
 868 03ae 7860     		str	r0, [r7, #4]
 869 03b0 0B46     		mov	r3, r1
 870 03b2 FB70     		strb	r3, [r7, #3]
 653:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 654:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 655:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 656:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 657:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 658:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 659:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Make the pin(s) be inputs.
 660:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 661:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_IN);
 871              		.loc 1 661 0
 872 03b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 873 03b6 7868     		ldr	r0, [r7, #4]
 874 03b8 1946     		mov	r1, r3
 875 03ba 0022     		movs	r2, #0
 876 03bc FFF7FEFF 		bl	GPIODirModeSet
 662:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 663:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 664:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pad(s) to no override of the drive type.
 665:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 666:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 877              		.loc 1 666 0
 878 03c0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 879 03c2 7868     		ldr	r0, [r7, #4]
 880 03c4 1946     		mov	r1, r3
 881 03c6 0022     		movs	r2, #0
 882 03c8 FFF7FEFF 		bl	IOCPadConfigSet
 667:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 883              		.loc 1 667 0
 884 03cc 0837     		adds	r7, r7, #8
 885              		.cfi_def_cfa_offset 8
 886 03ce BD46     		mov	sp, r7
 887              		.cfi_def_cfa_register 13
 888              		@ sp needed
 889 03d0 80BD     		pop	{r7, pc}
 890              		.cfi_endproc
 891              	.LFE13:
 893 03d2 00BF     		.align	2
 894              		.global	GPIOPinTypeGPIOOutput
 895              		.thumb
 896              		.thumb_func
 898              	GPIOPinTypeGPIOOutput:
 899              	.LFB14:
 668:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 669:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 670:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 671:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Configures pin(s) for use as GPIO outputs
 672:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 673:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 674:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 675:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 676:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The GPIO pins must be properly configured to function correctly as
 677:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIO outputs.  This function provides the proper configuration for those
 678:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! pin(s).
 679:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 680:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 681:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 682:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 683:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 684:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 685:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 686:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 687:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 688:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins)
 689:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 900              		.loc 1 689 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 8
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 03d4 80B5     		push	{r7, lr}
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 7, -8
 907              		.cfi_offset 14, -4
 908 03d6 82B0     		sub	sp, sp, #8
 909              		.cfi_def_cfa_offset 16
 910 03d8 00AF     		add	r7, sp, #0
 911              		.cfi_def_cfa_register 7
 912 03da 7860     		str	r0, [r7, #4]
 913 03dc 0B46     		mov	r3, r1
 914 03de FB70     		strb	r3, [r7, #3]
 690:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 691:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 692:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 693:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 694:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 695:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 696:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Make the pin(s) be outputs.
 697:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 698:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_OUT);
 915              		.loc 1 698 0
 916 03e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 917 03e2 7868     		ldr	r0, [r7, #4]
 918 03e4 1946     		mov	r1, r3
 919 03e6 0122     		movs	r2, #1
 920 03e8 FFF7FEFF 		bl	GPIODirModeSet
 699:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 700:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 701:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pad(s) no override of the drive type.
 702:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 703:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 921              		.loc 1 703 0
 922 03ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 923 03ee 7868     		ldr	r0, [r7, #4]
 924 03f0 1946     		mov	r1, r3
 925 03f2 0022     		movs	r2, #0
 926 03f4 FFF7FEFF 		bl	IOCPadConfigSet
 704:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 927              		.loc 1 704 0
 928 03f8 0837     		adds	r7, r7, #8
 929              		.cfi_def_cfa_offset 8
 930 03fa BD46     		mov	sp, r7
 931              		.cfi_def_cfa_register 13
 932              		@ sp needed
 933 03fc 80BD     		pop	{r7, pc}
 934              		.cfi_endproc
 935              	.LFE14:
 937 03fe 00BF     		.align	2
 938              		.global	GPIOPinTypeI2C
 939              		.thumb
 940              		.thumb_func
 942              	GPIOPinTypeI2C:
 943              	.LFB15:
 705:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 706:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 707:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 708:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Configures pin(s) for use by the I2C peripheral
 709:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 710:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 711:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 712:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 713:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The I2C pins must be properly configured for the I2C peripheral to function
 714:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! correctly.  This function provides the proper configuration for those
 715:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! pin(s).
 716:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 717:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 718:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 719:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 720:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 721:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into an I2C pin; it only
 722:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! configures an I2C pin for proper operation.
 723:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 724:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 725:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 726:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 727:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 728:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinTypeI2C(uint32_t ui32Port, uint8_t ui8Pins)
 729:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 944              		.loc 1 729 0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 8
 947              		@ frame_needed = 1, uses_anonymous_args = 0
 948 0400 80B5     		push	{r7, lr}
 949              		.cfi_def_cfa_offset 8
 950              		.cfi_offset 7, -8
 951              		.cfi_offset 14, -4
 952 0402 82B0     		sub	sp, sp, #8
 953              		.cfi_def_cfa_offset 16
 954 0404 00AF     		add	r7, sp, #0
 955              		.cfi_def_cfa_register 7
 956 0406 7860     		str	r0, [r7, #4]
 957 0408 0B46     		mov	r3, r1
 958 040a FB70     		strb	r3, [r7, #3]
 730:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 731:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 732:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 733:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 734:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 735:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 736:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 737:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 738:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 959              		.loc 1 738 0
 960 040c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 961 040e 7868     		ldr	r0, [r7, #4]
 962 0410 1946     		mov	r1, r3
 963 0412 0222     		movs	r2, #2
 964 0414 FFF7FEFF 		bl	GPIODirModeSet
 739:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 740:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 741:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 742:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 743:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 965              		.loc 1 743 0
 966 0418 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 967 041a 7868     		ldr	r0, [r7, #4]
 968 041c 1946     		mov	r1, r3
 969 041e 0022     		movs	r2, #0
 970 0420 FFF7FEFF 		bl	IOCPadConfigSet
 744:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 971              		.loc 1 744 0
 972 0424 0837     		adds	r7, r7, #8
 973              		.cfi_def_cfa_offset 8
 974 0426 BD46     		mov	sp, r7
 975              		.cfi_def_cfa_register 13
 976              		@ sp needed
 977 0428 80BD     		pop	{r7, pc}
 978              		.cfi_endproc
 979              	.LFE15:
 981 042a 00BF     		.align	2
 982              		.global	GPIOPinTypeSSI
 983              		.thumb
 984              		.thumb_func
 986              	GPIOPinTypeSSI:
 987              	.LFB16:
 745:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 746:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 747:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 748:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Configures pin(s) for use by the SSI peripheral
 749:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 750:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 751:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 752:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 753:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The SSI pins must be properly configured for the SSI peripheral to function
 754:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! correctly.  This function provides a typical configuration for those
 755:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! pin(s); other configurations might work as well depending upon the board
 756:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! setup (for example, using the on-chip pull-ups).
 757:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 758:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 759:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 760:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 761:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 762:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a SSI pin; but only
 763:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! configures an SSI pin for proper operation.
 764:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 765:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 766:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 767:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 768:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 769:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinTypeSSI(uint32_t ui32Port, uint8_t ui8Pins)
 770:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 988              		.loc 1 770 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 8
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992 042c 80B5     		push	{r7, lr}
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 7, -8
 995              		.cfi_offset 14, -4
 996 042e 82B0     		sub	sp, sp, #8
 997              		.cfi_def_cfa_offset 16
 998 0430 00AF     		add	r7, sp, #0
 999              		.cfi_def_cfa_register 7
 1000 0432 7860     		str	r0, [r7, #4]
 1001 0434 0B46     		mov	r3, r1
 1002 0436 FB70     		strb	r3, [r7, #3]
 771:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 772:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 773:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 774:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 775:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 776:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 777:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 778:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 779:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1003              		.loc 1 779 0
 1004 0438 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1005 043a 7868     		ldr	r0, [r7, #4]
 1006 043c 1946     		mov	r1, r3
 1007 043e 0222     		movs	r2, #2
 1008 0440 FFF7FEFF 		bl	GPIODirModeSet
 780:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 781:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 782:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 783:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 784:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1009              		.loc 1 784 0
 1010 0444 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1011 0446 7868     		ldr	r0, [r7, #4]
 1012 0448 1946     		mov	r1, r3
 1013 044a 0022     		movs	r2, #0
 1014 044c FFF7FEFF 		bl	IOCPadConfigSet
 785:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1015              		.loc 1 785 0
 1016 0450 0837     		adds	r7, r7, #8
 1017              		.cfi_def_cfa_offset 8
 1018 0452 BD46     		mov	sp, r7
 1019              		.cfi_def_cfa_register 13
 1020              		@ sp needed
 1021 0454 80BD     		pop	{r7, pc}
 1022              		.cfi_endproc
 1023              	.LFE16:
 1025 0456 00BF     		.align	2
 1026              		.global	GPIOPinTypeTimer
 1027              		.thumb
 1028              		.thumb_func
 1030              	GPIOPinTypeTimer:
 1031              	.LFB17:
 786:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 787:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 788:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 789:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Configures pin(s) for use by the Timer peripheral
 790:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 791:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 792:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 793:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 794:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The CCP pins must be properly configured for the timer peripheral to
 795:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 796:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 797:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 798:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 799:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 800:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 801:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 802:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 803:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a timer pin but only
 804:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! configures a timer pin for proper operation.
 805:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 806:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 807:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 808:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 809:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 810:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinTypeTimer(uint32_t ui32Port, uint8_t ui8Pins)
 811:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1032              		.loc 1 811 0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 8
 1035              		@ frame_needed = 1, uses_anonymous_args = 0
 1036 0458 80B5     		push	{r7, lr}
 1037              		.cfi_def_cfa_offset 8
 1038              		.cfi_offset 7, -8
 1039              		.cfi_offset 14, -4
 1040 045a 82B0     		sub	sp, sp, #8
 1041              		.cfi_def_cfa_offset 16
 1042 045c 00AF     		add	r7, sp, #0
 1043              		.cfi_def_cfa_register 7
 1044 045e 7860     		str	r0, [r7, #4]
 1045 0460 0B46     		mov	r3, r1
 1046 0462 FB70     		strb	r3, [r7, #3]
 812:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 813:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 814:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 815:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 816:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 817:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 818:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 819:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 820:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1047              		.loc 1 820 0
 1048 0464 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1049 0466 7868     		ldr	r0, [r7, #4]
 1050 0468 1946     		mov	r1, r3
 1051 046a 0222     		movs	r2, #2
 1052 046c FFF7FEFF 		bl	GPIODirModeSet
 821:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 822:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 823:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 824:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 825:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1053              		.loc 1 825 0
 1054 0470 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1055 0472 7868     		ldr	r0, [r7, #4]
 1056 0474 1946     		mov	r1, r3
 1057 0476 0022     		movs	r2, #0
 1058 0478 FFF7FEFF 		bl	IOCPadConfigSet
 826:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1059              		.loc 1 826 0
 1060 047c 0837     		adds	r7, r7, #8
 1061              		.cfi_def_cfa_offset 8
 1062 047e BD46     		mov	sp, r7
 1063              		.cfi_def_cfa_register 13
 1064              		@ sp needed
 1065 0480 80BD     		pop	{r7, pc}
 1066              		.cfi_endproc
 1067              	.LFE17:
 1069 0482 00BF     		.align	2
 1070              		.global	GPIOPinTypeUARTInput
 1071              		.thumb
 1072              		.thumb_func
 1074              	GPIOPinTypeUARTInput:
 1075              	.LFB18:
 827:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 828:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 829:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 830:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Configures input pin(s) for use by the UART peripheral
 831:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 832:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 833:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 834:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 835:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The UART input pins must be properly configured for the UART peripheral to
 836:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 837:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 838:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 839:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 840:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note For PC0 through PC3 the function GPIOPinTypeUARTHiDrive() should
 841:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! be used to configure these high drive pins.
 842:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 843:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 844:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 845:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 846:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 847:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a UART pin; but only
 848:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! configures a UART pin for proper operation.
 849:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 850:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 851:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 852:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 853:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 854:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinTypeUARTInput(uint32_t ui32Port, uint8_t ui8Pins)
 855:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1076              		.loc 1 855 0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 8
 1079              		@ frame_needed = 1, uses_anonymous_args = 0
 1080 0484 80B5     		push	{r7, lr}
 1081              		.cfi_def_cfa_offset 8
 1082              		.cfi_offset 7, -8
 1083              		.cfi_offset 14, -4
 1084 0486 82B0     		sub	sp, sp, #8
 1085              		.cfi_def_cfa_offset 16
 1086 0488 00AF     		add	r7, sp, #0
 1087              		.cfi_def_cfa_register 7
 1088 048a 7860     		str	r0, [r7, #4]
 1089 048c 0B46     		mov	r3, r1
 1090 048e FB70     		strb	r3, [r7, #3]
 856:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 857:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 858:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 859:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 860:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(!((ui32Port == GPIO_C_BASE) && ((ui8Pins & 0xf) > 0)));
 861:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 862:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 863:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 864:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 865:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1091              		.loc 1 865 0
 1092 0490 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1093 0492 7868     		ldr	r0, [r7, #4]
 1094 0494 1946     		mov	r1, r3
 1095 0496 0222     		movs	r2, #2
 1096 0498 FFF7FEFF 		bl	GPIODirModeSet
 866:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 867:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 868:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pad(s) to override disable.
 869:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 870:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1097              		.loc 1 870 0
 1098 049c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1099 049e 7868     		ldr	r0, [r7, #4]
 1100 04a0 1946     		mov	r1, r3
 1101 04a2 0022     		movs	r2, #0
 1102 04a4 FFF7FEFF 		bl	IOCPadConfigSet
 871:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1103              		.loc 1 871 0
 1104 04a8 0837     		adds	r7, r7, #8
 1105              		.cfi_def_cfa_offset 8
 1106 04aa BD46     		mov	sp, r7
 1107              		.cfi_def_cfa_register 13
 1108              		@ sp needed
 1109 04ac 80BD     		pop	{r7, pc}
 1110              		.cfi_endproc
 1111              	.LFE18:
 1113 04ae 00BF     		.align	2
 1114              		.global	GPIOPinTypeUARTOutput
 1115              		.thumb
 1116              		.thumb_func
 1118              	GPIOPinTypeUARTOutput:
 1119              	.LFB19:
 872:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 873:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 874:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 875:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Configures output pin(s) for use by the UART peripheral
 876:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 877:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 878:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 879:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 880:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The UART output pins must be properly configured for the UART peripheral to
 881:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 882:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 883:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 884:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 885:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 886:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 887:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 888:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 889:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a UART pin; but only
 890:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! configures a UART pin for proper operation.
 891:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 892:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 893:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 894:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 895:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 896:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPinTypeUARTOutput(uint32_t ui32Port, uint8_t ui8Pins)
 897:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1120              		.loc 1 897 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 8
 1123              		@ frame_needed = 1, uses_anonymous_args = 0
 1124 04b0 80B5     		push	{r7, lr}
 1125              		.cfi_def_cfa_offset 8
 1126              		.cfi_offset 7, -8
 1127              		.cfi_offset 14, -4
 1128 04b2 82B0     		sub	sp, sp, #8
 1129              		.cfi_def_cfa_offset 16
 1130 04b4 00AF     		add	r7, sp, #0
 1131              		.cfi_def_cfa_register 7
 1132 04b6 7860     		str	r0, [r7, #4]
 1133 04b8 0B46     		mov	r3, r1
 1134 04ba FB70     		strb	r3, [r7, #3]
 898:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 899:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 900:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 901:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 902:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(!((ui32Port == GPIO_C_BASE) && ((ui8Pins & 0xf) > 0)));
 903:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 904:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 905:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 906:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 907:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1135              		.loc 1 907 0
 1136 04bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1137 04be 7868     		ldr	r0, [r7, #4]
 1138 04c0 1946     		mov	r1, r3
 1139 04c2 0222     		movs	r2, #2
 1140 04c4 FFF7FEFF 		bl	GPIODirModeSet
 908:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 909:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 910:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pad(s) to output enable.
 911:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 912:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_OE);
 1141              		.loc 1 912 0
 1142 04c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1143 04ca 7868     		ldr	r0, [r7, #4]
 1144 04cc 1946     		mov	r1, r3
 1145 04ce 0822     		movs	r2, #8
 1146 04d0 FFF7FEFF 		bl	IOCPadConfigSet
 913:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1147              		.loc 1 913 0
 1148 04d4 0837     		adds	r7, r7, #8
 1149              		.cfi_def_cfa_offset 8
 1150 04d6 BD46     		mov	sp, r7
 1151              		.cfi_def_cfa_register 13
 1152              		@ sp needed
 1153 04d8 80BD     		pop	{r7, pc}
 1154              		.cfi_endproc
 1155              	.LFE19:
 1157 04da 00BF     		.align	2
 1158              		.global	GPIOPowIntTypeSet
 1159              		.thumb
 1160              		.thumb_func
 1162              	GPIOPowIntTypeSet:
 1163              	.LFB20:
 914:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 915:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 916:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 917:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Sets the power-up interrupt type for the specified pin(s)
 918:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 919:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 920:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 921:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32IntType specifies type of power-up interrupt trigger mechanism.
 922:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 923:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function sets up the various interrupt trigger mechanisms for the
 924:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! specified pin(s) on the selected GPIO port.
 925:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 926:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The parameter \e ui32IntType is an enumerated data type that can be one of
 927:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! the following values:
 928:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 929:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_POW_FALLING_EDGE
 930:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! - \b GPIO_POW_RISING_EDGE
 931:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 932:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 933:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 934:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 935:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 936:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \note To avoid any spurious interrupts, the user must
 937:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! ensure that the GPIO inputs remain stable for the duration of
 938:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! this function.
 939:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
 940:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
 941:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 942:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 943:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
 944:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPowIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
 945:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                   uint32_t ui32IntType)
 946:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1164              		.loc 1 946 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 24
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 1169 04dc 80B4     		push	{r7}
 1170              		.cfi_def_cfa_offset 4
 1171              		.cfi_offset 7, -4
 1172 04de 87B0     		sub	sp, sp, #28
 1173              		.cfi_def_cfa_offset 32
 1174 04e0 00AF     		add	r7, sp, #0
 1175              		.cfi_def_cfa_register 7
 1176 04e2 F860     		str	r0, [r7, #12]
 1177 04e4 0B46     		mov	r3, r1
 1178 04e6 7A60     		str	r2, [r7, #4]
 1179 04e8 FB72     		strb	r3, [r7, #11]
 947:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32PortOffset;
 948:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32IntPins;
 949:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 950:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 951:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Initialize value
 952:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 953:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32PortOffset = 0;
 1180              		.loc 1 953 0
 1181 04ea 0023     		movs	r3, #0
 1182 04ec 7B61     		str	r3, [r7, #20]
 954:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 955:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 956:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
 957:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 958:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 959:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT((ui32IntType == GPIO_POW_FALLING_EDGE) ||
 960:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****            (ui32IntType == GPIO_POW_RISING_EDGE));
 961:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 962:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 963:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
 964:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 965:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1183              		.loc 1 965 0
 1184 04ee FB68     		ldr	r3, [r7, #12]
 1185 04f0 1D4A     		ldr	r2, .L59
 1186 04f2 9342     		cmp	r3, r2
 1187 04f4 01D1     		bne	.L53
 966:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 967:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 0;
 1188              		.loc 1 967 0
 1189 04f6 0023     		movs	r3, #0
 1190 04f8 7B61     		str	r3, [r7, #20]
 1191              	.L53:
 968:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 969:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1192              		.loc 1 969 0
 1193 04fa FB68     		ldr	r3, [r7, #12]
 1194 04fc 1B4A     		ldr	r2, .L59+4
 1195 04fe 9342     		cmp	r3, r2
 1196 0500 01D1     		bne	.L54
 970:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 971:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 8;
 1197              		.loc 1 971 0
 1198 0502 0823     		movs	r3, #8
 1199 0504 7B61     		str	r3, [r7, #20]
 1200              	.L54:
 972:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 973:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1201              		.loc 1 973 0
 1202 0506 FB68     		ldr	r3, [r7, #12]
 1203 0508 194A     		ldr	r2, .L59+8
 1204 050a 9342     		cmp	r3, r2
 1205 050c 01D1     		bne	.L55
 974:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 975:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 16;
 1206              		.loc 1 975 0
 1207 050e 1023     		movs	r3, #16
 1208 0510 7B61     		str	r3, [r7, #20]
 1209              	.L55:
 976:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 977:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1210              		.loc 1 977 0
 1211 0512 FB68     		ldr	r3, [r7, #12]
 1212 0514 174A     		ldr	r2, .L59+12
 1213 0516 9342     		cmp	r3, r2
 1214 0518 01D1     		bne	.L56
 978:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 979:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 24;
 1215              		.loc 1 979 0
 1216 051a 1823     		movs	r3, #24
 1217 051c 7B61     		str	r3, [r7, #20]
 1218              	.L56:
 980:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 981:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1219              		.loc 1 981 0
 1220 051e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1221 0520 7B69     		ldr	r3, [r7, #20]
 1222 0522 02FA03F3 		lsl	r3, r2, r3
 1223 0526 3B61     		str	r3, [r7, #16]
 982:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 983:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 984:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Set the pin interrupt type.
 985:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
 986:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32IntType == GPIO_POW_FALLING_EDGE)
 1224              		.loc 1 986 0
 1225 0528 7B68     		ldr	r3, [r7, #4]
 1226 052a 012B     		cmp	r3, #1
 1227 052c 0BD1     		bne	.L57
 987:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 988:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) |= ui32IntPins;
 1228              		.loc 1 988 0
 1229 052e FB68     		ldr	r3, [r7, #12]
 1230 0530 03F20473 		addw	r3, r3, #1796
 1231 0534 1946     		mov	r1, r3
 1232 0536 FB68     		ldr	r3, [r7, #12]
 1233 0538 03F20473 		addw	r3, r3, #1796
 1234 053c 1A68     		ldr	r2, [r3]
 1235 053e 3B69     		ldr	r3, [r7, #16]
 1236 0540 1343     		orrs	r3, r3, r2
 1237 0542 0B60     		str	r3, [r1]
 1238 0544 0BE0     		b	.L52
 1239              	.L57:
 989:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 990:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     else  // GPIO_POW_RAISING_EDGE
 991:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
 992:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) &= ~(ui32IntPins);
 1240              		.loc 1 992 0
 1241 0546 FB68     		ldr	r3, [r7, #12]
 1242 0548 03F20473 		addw	r3, r3, #1796
 1243 054c 1946     		mov	r1, r3
 1244 054e FB68     		ldr	r3, [r7, #12]
 1245 0550 03F20473 		addw	r3, r3, #1796
 1246 0554 1A68     		ldr	r2, [r3]
 1247 0556 3B69     		ldr	r3, [r7, #16]
 1248 0558 DB43     		mvns	r3, r3
 1249 055a 1340     		ands	r3, r3, r2
 1250 055c 0B60     		str	r3, [r1]
 1251              	.L52:
 993:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
 994:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1252              		.loc 1 994 0
 1253 055e 1C37     		adds	r7, r7, #28
 1254              		.cfi_def_cfa_offset 4
 1255 0560 BD46     		mov	sp, r7
 1256              		.cfi_def_cfa_register 13
 1257              		@ sp needed
 1258 0562 5DF8047B 		ldr	r7, [sp], #4
 1259              		.cfi_restore 7
 1260              		.cfi_def_cfa_offset 0
 1261 0566 7047     		bx	lr
 1262              	.L60:
 1263              		.align	2
 1264              	.L59:
 1265 0568 00900D40 		.word	1074630656
 1266 056c 00A00D40 		.word	1074634752
 1267 0570 00B00D40 		.word	1074638848
 1268 0574 00C00D40 		.word	1074642944
 1269              		.cfi_endproc
 1270              	.LFE20:
 1272              		.align	2
 1273              		.global	GPIOPowIntTypeGet
 1274              		.thumb
 1275              		.thumb_func
 1277              	GPIOPowIntTypeGet:
 1278              	.LFB21:
 995:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
 996:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
 997:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
 998:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Gets the power-up interrupt type for a pin
 999:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1000:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1001:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pin is the pin number.
1002:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1003:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function gets the interrupt type for a specified pin on the selected
1004:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIO port.  The pin can be configured as a falling edge, rising edge, or
1005:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! both edge detected interrupt, or it can be configured as a low level or
1006:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! high level detected interrupt.  The type of interrupt detection mechanism
1007:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! is returned as an enumerated data type.
1008:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1009:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
1010:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! GPIOIntTypeSet().
1011:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1012:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1013:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** uint32_t
1014:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPowIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin)
1015:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1279              		.loc 1 1015 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 16
 1282              		@ frame_needed = 1, uses_anonymous_args = 0
 1283              		@ link register save eliminated.
 1284 0578 80B4     		push	{r7}
 1285              		.cfi_def_cfa_offset 4
 1286              		.cfi_offset 7, -4
 1287 057a 85B0     		sub	sp, sp, #20
 1288              		.cfi_def_cfa_offset 24
 1289 057c 00AF     		add	r7, sp, #0
 1290              		.cfi_def_cfa_register 7
 1291 057e 7860     		str	r0, [r7, #4]
 1292 0580 0B46     		mov	r3, r1
 1293 0582 FB70     		strb	r3, [r7, #3]
1016:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32PortOffset;
1017:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32IntPin;
1018:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1019:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1020:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Initialize value
1021:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1022:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32PortOffset = 0;
 1294              		.loc 1 1022 0
 1295 0584 0023     		movs	r3, #0
 1296 0586 FB60     		str	r3, [r7, #12]
1023:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1024:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1025:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
1026:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1027:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1028:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
1029:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1030:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1031:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Convert from a port- pin number to a bit position.
1032:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1033:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1297              		.loc 1 1033 0
 1298 0588 7B68     		ldr	r3, [r7, #4]
 1299 058a 174A     		ldr	r2, .L68
 1300 058c 9342     		cmp	r3, r2
 1301 058e 01D1     		bne	.L62
1034:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1035:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 0;
 1302              		.loc 1 1035 0
 1303 0590 0023     		movs	r3, #0
 1304 0592 FB60     		str	r3, [r7, #12]
 1305              	.L62:
1036:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1037:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1306              		.loc 1 1037 0
 1307 0594 7B68     		ldr	r3, [r7, #4]
 1308 0596 154A     		ldr	r2, .L68+4
 1309 0598 9342     		cmp	r3, r2
 1310 059a 01D1     		bne	.L63
1038:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1039:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 8;
 1311              		.loc 1 1039 0
 1312 059c 0823     		movs	r3, #8
 1313 059e FB60     		str	r3, [r7, #12]
 1314              	.L63:
1040:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1041:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1315              		.loc 1 1041 0
 1316 05a0 7B68     		ldr	r3, [r7, #4]
 1317 05a2 134A     		ldr	r2, .L68+8
 1318 05a4 9342     		cmp	r3, r2
 1319 05a6 01D1     		bne	.L64
1042:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1043:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 16;
 1320              		.loc 1 1043 0
 1321 05a8 1023     		movs	r3, #16
 1322 05aa FB60     		str	r3, [r7, #12]
 1323              	.L64:
1044:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1045:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1324              		.loc 1 1045 0
 1325 05ac 7B68     		ldr	r3, [r7, #4]
 1326 05ae 114A     		ldr	r2, .L68+12
 1327 05b0 9342     		cmp	r3, r2
 1328 05b2 01D1     		bne	.L65
1046:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1047:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 24;
 1329              		.loc 1 1047 0
 1330 05b4 1823     		movs	r3, #24
 1331 05b6 FB60     		str	r3, [r7, #12]
 1332              	.L65:
1048:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1049:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32IntPin = 1 << (ui8Pin + ui32PortOffset);
 1333              		.loc 1 1049 0
 1334 05b8 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1335 05ba FB68     		ldr	r3, [r7, #12]
 1336 05bc 1344     		add	r3, r3, r2
 1337 05be 1A46     		mov	r2, r3
 1338 05c0 0123     		movs	r3, #1
 1339 05c2 9340     		lsls	r3, r3, r2
 1340 05c4 BB60     		str	r3, [r7, #8]
1050:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1051:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1052:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Return the pin interrupt type.
1053:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1054:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) & ui32IntPin)
 1341              		.loc 1 1054 0
 1342 05c6 7B68     		ldr	r3, [r7, #4]
 1343 05c8 03F20473 		addw	r3, r3, #1796
 1344 05cc 1A68     		ldr	r2, [r3]
 1345 05ce BB68     		ldr	r3, [r7, #8]
 1346 05d0 1340     		ands	r3, r3, r2
 1347 05d2 002B     		cmp	r3, #0
 1348 05d4 01D0     		beq	.L66
1055:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1056:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         return(GPIO_POW_FALLING_EDGE);
 1349              		.loc 1 1056 0
 1350 05d6 0123     		movs	r3, #1
 1351 05d8 00E0     		b	.L67
 1352              	.L66:
1057:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1058:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     else
1059:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1060:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         return(GPIO_POW_RISING_EDGE);
 1353              		.loc 1 1060 0
 1354 05da 0023     		movs	r3, #0
 1355              	.L67:
1061:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1062:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1356              		.loc 1 1062 0
 1357 05dc 1846     		mov	r0, r3
 1358 05de 1437     		adds	r7, r7, #20
 1359              		.cfi_def_cfa_offset 4
 1360 05e0 BD46     		mov	sp, r7
 1361              		.cfi_def_cfa_register 13
 1362              		@ sp needed
 1363 05e2 5DF8047B 		ldr	r7, [sp], #4
 1364              		.cfi_restore 7
 1365              		.cfi_def_cfa_offset 0
 1366 05e6 7047     		bx	lr
 1367              	.L69:
 1368              		.align	2
 1369              	.L68:
 1370 05e8 00900D40 		.word	1074630656
 1371 05ec 00A00D40 		.word	1074634752
 1372 05f0 00B00D40 		.word	1074638848
 1373 05f4 00C00D40 		.word	1074642944
 1374              		.cfi_endproc
 1375              	.LFE21:
 1377              		.align	2
 1378              		.global	GPIOPowIntEnable
 1379              		.thumb
 1380              		.thumb_func
 1382              	GPIOPowIntEnable:
 1383              	.LFB22:
1063:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1064:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1065:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1066:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Enables power-up interrupts for the specified pin(s)
1067:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1068:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1069:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1070:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1071:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Unmasks the interrupt for the specified pin(s).
1072:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1073:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1074:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1075:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1076:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1077:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
1078:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1079:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1080:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
1081:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPowIntEnable(uint32_t ui32Port, uint8_t ui8Pins)
1082:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1384              		.loc 1 1082 0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 16
 1387              		@ frame_needed = 1, uses_anonymous_args = 0
 1388              		@ link register save eliminated.
 1389 05f8 80B4     		push	{r7}
 1390              		.cfi_def_cfa_offset 4
 1391              		.cfi_offset 7, -4
 1392 05fa 85B0     		sub	sp, sp, #20
 1393              		.cfi_def_cfa_offset 24
 1394 05fc 00AF     		add	r7, sp, #0
 1395              		.cfi_def_cfa_register 7
 1396 05fe 7860     		str	r0, [r7, #4]
 1397 0600 0B46     		mov	r3, r1
 1398 0602 FB70     		strb	r3, [r7, #3]
1083:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32PortOffset;
1084:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32IntPins;
1085:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1086:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1087:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Initialize value
1088:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1089:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32PortOffset = 0;
 1399              		.loc 1 1089 0
 1400 0604 0023     		movs	r3, #0
 1401 0606 FB60     		str	r3, [r7, #12]
1090:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1091:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1092:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
1093:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1094:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1095:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1096:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1097:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1098:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1099:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1402              		.loc 1 1099 0
 1403 0608 7B68     		ldr	r3, [r7, #4]
 1404 060a 164A     		ldr	r2, .L75
 1405 060c 9342     		cmp	r3, r2
 1406 060e 01D1     		bne	.L71
1100:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1101:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 0;
 1407              		.loc 1 1101 0
 1408 0610 0023     		movs	r3, #0
 1409 0612 FB60     		str	r3, [r7, #12]
 1410              	.L71:
1102:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1103:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1411              		.loc 1 1103 0
 1412 0614 7B68     		ldr	r3, [r7, #4]
 1413 0616 144A     		ldr	r2, .L75+4
 1414 0618 9342     		cmp	r3, r2
 1415 061a 01D1     		bne	.L72
1104:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1105:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 8;
 1416              		.loc 1 1105 0
 1417 061c 0823     		movs	r3, #8
 1418 061e FB60     		str	r3, [r7, #12]
 1419              	.L72:
1106:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1107:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1420              		.loc 1 1107 0
 1421 0620 7B68     		ldr	r3, [r7, #4]
 1422 0622 124A     		ldr	r2, .L75+8
 1423 0624 9342     		cmp	r3, r2
 1424 0626 01D1     		bne	.L73
1108:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 16;
 1425              		.loc 1 1109 0
 1426 0628 1023     		movs	r3, #16
 1427 062a FB60     		str	r3, [r7, #12]
 1428              	.L73:
1110:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1111:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1429              		.loc 1 1111 0
 1430 062c 7B68     		ldr	r3, [r7, #4]
 1431 062e 104A     		ldr	r2, .L75+12
 1432 0630 9342     		cmp	r3, r2
 1433 0632 01D1     		bne	.L74
1112:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1113:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 24;
 1434              		.loc 1 1113 0
 1435 0634 1823     		movs	r3, #24
 1436 0636 FB60     		str	r3, [r7, #12]
 1437              	.L74:
1114:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1115:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1438              		.loc 1 1115 0
 1439 0638 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1440 063a FB68     		ldr	r3, [r7, #12]
 1441 063c 02FA03F3 		lsl	r3, r2, r3
 1442 0640 BB60     		str	r3, [r7, #8]
1116:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1117:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1118:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Enable the interrupts.
1119:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1120:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_PI_IEN) |= ui32IntPins;
 1443              		.loc 1 1120 0
 1444 0642 7B68     		ldr	r3, [r7, #4]
 1445 0644 03F5E263 		add	r3, r3, #1808
 1446 0648 1946     		mov	r1, r3
 1447 064a 7B68     		ldr	r3, [r7, #4]
 1448 064c 03F5E263 		add	r3, r3, #1808
 1449 0650 1A68     		ldr	r2, [r3]
 1450 0652 BB68     		ldr	r3, [r7, #8]
 1451 0654 1343     		orrs	r3, r3, r2
 1452 0656 0B60     		str	r3, [r1]
1121:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1453              		.loc 1 1121 0
 1454 0658 1437     		adds	r7, r7, #20
 1455              		.cfi_def_cfa_offset 4
 1456 065a BD46     		mov	sp, r7
 1457              		.cfi_def_cfa_register 13
 1458              		@ sp needed
 1459 065c 5DF8047B 		ldr	r7, [sp], #4
 1460              		.cfi_restore 7
 1461              		.cfi_def_cfa_offset 0
 1462 0660 7047     		bx	lr
 1463              	.L76:
 1464 0662 00BF     		.align	2
 1465              	.L75:
 1466 0664 00900D40 		.word	1074630656
 1467 0668 00A00D40 		.word	1074634752
 1468 066c 00B00D40 		.word	1074638848
 1469 0670 00C00D40 		.word	1074642944
 1470              		.cfi_endproc
 1471              	.LFE22:
 1473              		.align	2
 1474              		.global	GPIOPowIntDisable
 1475              		.thumb
 1476              		.thumb_func
 1478              	GPIOPowIntDisable:
 1479              	.LFB23:
1122:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1123:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1124:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1125:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Disables power-up interrupts for the specified pin(s)
1126:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1127:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1128:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1129:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1130:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Masks the interrupt for the specified pin(s).
1131:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1132:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1133:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1135:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1136:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
1137:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1138:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1139:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
1140:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPowIntDisable(uint32_t ui32Port, uint8_t ui8Pins)
1141:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1480              		.loc 1 1141 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 16
 1483              		@ frame_needed = 1, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 1485 0674 80B4     		push	{r7}
 1486              		.cfi_def_cfa_offset 4
 1487              		.cfi_offset 7, -4
 1488 0676 85B0     		sub	sp, sp, #20
 1489              		.cfi_def_cfa_offset 24
 1490 0678 00AF     		add	r7, sp, #0
 1491              		.cfi_def_cfa_register 7
 1492 067a 7860     		str	r0, [r7, #4]
 1493 067c 0B46     		mov	r3, r1
 1494 067e FB70     		strb	r3, [r7, #3]
1142:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32PortOffset;
1143:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32IntPins;
1144:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1145:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1146:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Initialize value
1147:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1148:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32PortOffset = 0;
 1495              		.loc 1 1148 0
 1496 0680 0023     		movs	r3, #0
 1497 0682 FB60     		str	r3, [r7, #12]
1149:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1150:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1151:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
1152:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1154:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1155:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1156:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1157:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1158:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1498              		.loc 1 1158 0
 1499 0684 7B68     		ldr	r3, [r7, #4]
 1500 0686 164A     		ldr	r2, .L82
 1501 0688 9342     		cmp	r3, r2
 1502 068a 01D1     		bne	.L78
1159:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1160:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 0;
 1503              		.loc 1 1160 0
 1504 068c 0023     		movs	r3, #0
 1505 068e FB60     		str	r3, [r7, #12]
 1506              	.L78:
1161:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1162:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1507              		.loc 1 1162 0
 1508 0690 7B68     		ldr	r3, [r7, #4]
 1509 0692 144A     		ldr	r2, .L82+4
 1510 0694 9342     		cmp	r3, r2
 1511 0696 01D1     		bne	.L79
1163:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1164:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 8;
 1512              		.loc 1 1164 0
 1513 0698 0823     		movs	r3, #8
 1514 069a FB60     		str	r3, [r7, #12]
 1515              	.L79:
1165:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1166:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1516              		.loc 1 1166 0
 1517 069c 7B68     		ldr	r3, [r7, #4]
 1518 069e 124A     		ldr	r2, .L82+8
 1519 06a0 9342     		cmp	r3, r2
 1520 06a2 01D1     		bne	.L80
1167:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1168:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 16;
 1521              		.loc 1 1168 0
 1522 06a4 1023     		movs	r3, #16
 1523 06a6 FB60     		str	r3, [r7, #12]
 1524              	.L80:
1169:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1170:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1525              		.loc 1 1170 0
 1526 06a8 7B68     		ldr	r3, [r7, #4]
 1527 06aa 104A     		ldr	r2, .L82+12
 1528 06ac 9342     		cmp	r3, r2
 1529 06ae 01D1     		bne	.L81
1171:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1172:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 24;
 1530              		.loc 1 1172 0
 1531 06b0 1823     		movs	r3, #24
 1532 06b2 FB60     		str	r3, [r7, #12]
 1533              	.L81:
1173:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1174:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1534              		.loc 1 1174 0
 1535 06b4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1536 06b6 FB68     		ldr	r3, [r7, #12]
 1537 06b8 02FA03F3 		lsl	r3, r2, r3
 1538 06bc BB60     		str	r3, [r7, #8]
1175:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1176:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1177:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Disable the interrupts.
1178:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1179:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_PI_IEN) &= ~(ui32IntPins);
 1539              		.loc 1 1179 0
 1540 06be 7B68     		ldr	r3, [r7, #4]
 1541 06c0 03F5E263 		add	r3, r3, #1808
 1542 06c4 1946     		mov	r1, r3
 1543 06c6 7B68     		ldr	r3, [r7, #4]
 1544 06c8 03F5E263 		add	r3, r3, #1808
 1545 06cc 1A68     		ldr	r2, [r3]
 1546 06ce BB68     		ldr	r3, [r7, #8]
 1547 06d0 DB43     		mvns	r3, r3
 1548 06d2 1340     		ands	r3, r3, r2
 1549 06d4 0B60     		str	r3, [r1]
1180:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1550              		.loc 1 1180 0
 1551 06d6 1437     		adds	r7, r7, #20
 1552              		.cfi_def_cfa_offset 4
 1553 06d8 BD46     		mov	sp, r7
 1554              		.cfi_def_cfa_register 13
 1555              		@ sp needed
 1556 06da 5DF8047B 		ldr	r7, [sp], #4
 1557              		.cfi_restore 7
 1558              		.cfi_def_cfa_offset 0
 1559 06de 7047     		bx	lr
 1560              	.L83:
 1561              		.align	2
 1562              	.L82:
 1563 06e0 00900D40 		.word	1074630656
 1564 06e4 00A00D40 		.word	1074634752
 1565 06e8 00B00D40 		.word	1074638848
 1566 06ec 00C00D40 		.word	1074642944
 1567              		.cfi_endproc
 1568              	.LFE23:
 1570              		.align	2
 1571              		.global	GPIOPowIntStatus
 1572              		.thumb
 1573              		.thumb_func
 1575              	GPIOPowIntStatus:
 1576              	.LFB24:
1181:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1182:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1183:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1184:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Gets power-up interrupt status for the specified GPIO port
1185:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1186:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1187:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param bMasked specifies whether masked or raw interrupt status is
1188:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! returned.
1189:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1190:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! If \e bMasked is set as \b true, then the masked interrupt status is
1191:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! returned; otherwise, the raw interrupt status is returned.
1192:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1193:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return Returns a bit-packed byte, where each bit that is set identifies
1194:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! an active masked or raw interrupt, and where bit 0 of the byte
1195:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1196:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Bits 31:8 should be ignored.
1197:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1198:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1199:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** uint32_t
1200:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPowIntStatus(uint32_t ui32Port, bool bMasked)
1201:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1577              		.loc 1 1201 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 16
 1580              		@ frame_needed = 1, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 1582 06f0 80B4     		push	{r7}
 1583              		.cfi_def_cfa_offset 4
 1584              		.cfi_offset 7, -4
 1585 06f2 85B0     		sub	sp, sp, #20
 1586              		.cfi_def_cfa_offset 24
 1587 06f4 00AF     		add	r7, sp, #0
 1588              		.cfi_def_cfa_register 7
 1589 06f6 7860     		str	r0, [r7, #4]
 1590 06f8 0B46     		mov	r3, r1
 1591 06fa FB70     		strb	r3, [r7, #3]
1202:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32PortOffset;
1203:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1204:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1205:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Initialize value
1206:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1207:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32PortOffset = 0;
 1592              		.loc 1 1207 0
 1593 06fc 0023     		movs	r3, #0
 1594 06fe FB60     		str	r3, [r7, #12]
1208:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1209:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
1210:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1211:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1212:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1213:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1214:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1215:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1595              		.loc 1 1215 0
 1596 0700 7B68     		ldr	r3, [r7, #4]
 1597 0702 184A     		ldr	r2, .L91
 1598 0704 9342     		cmp	r3, r2
 1599 0706 01D1     		bne	.L85
1216:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1217:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 0;
 1600              		.loc 1 1217 0
 1601 0708 0023     		movs	r3, #0
 1602 070a FB60     		str	r3, [r7, #12]
 1603              	.L85:
1218:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1219:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1604              		.loc 1 1219 0
 1605 070c 7B68     		ldr	r3, [r7, #4]
 1606 070e 164A     		ldr	r2, .L91+4
 1607 0710 9342     		cmp	r3, r2
 1608 0712 01D1     		bne	.L86
1220:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1221:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 8;
 1609              		.loc 1 1221 0
 1610 0714 0823     		movs	r3, #8
 1611 0716 FB60     		str	r3, [r7, #12]
 1612              	.L86:
1222:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1223:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1613              		.loc 1 1223 0
 1614 0718 7B68     		ldr	r3, [r7, #4]
 1615 071a 144A     		ldr	r2, .L91+8
 1616 071c 9342     		cmp	r3, r2
 1617 071e 01D1     		bne	.L87
1224:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1225:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 16;
 1618              		.loc 1 1225 0
 1619 0720 1023     		movs	r3, #16
 1620 0722 FB60     		str	r3, [r7, #12]
 1621              	.L87:
1226:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1622              		.loc 1 1227 0
 1623 0724 7B68     		ldr	r3, [r7, #4]
 1624 0726 124A     		ldr	r2, .L91+12
 1625 0728 9342     		cmp	r3, r2
 1626 072a 01D1     		bne	.L88
1228:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1229:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 24;
 1627              		.loc 1 1229 0
 1628 072c 1823     		movs	r3, #24
 1629 072e FB60     		str	r3, [r7, #12]
 1630              	.L88:
1230:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1231:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1232:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Return the interrupt status.
1233:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(bMasked)
 1631              		.loc 1 1233 0
 1632 0730 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1633 0732 002B     		cmp	r3, #0
 1634 0734 08D0     		beq	.L89
1234:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1235:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         return((HWREG(ui32Port + GPIO_O_IRQ_DETECT_ACK) >> ui32PortOffset) &
 1635              		.loc 1 1235 0
 1636 0736 7B68     		ldr	r3, [r7, #4]
 1637 0738 03F5E363 		add	r3, r3, #1816
 1638 073c 1A68     		ldr	r2, [r3]
 1639 073e FB68     		ldr	r3, [r7, #12]
 1640 0740 22FA03F3 		lsr	r3, r2, r3
 1641 0744 DBB2     		uxtb	r3, r3
 1642 0746 07E0     		b	.L90
 1643              	.L89:
1236:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                0xFF);
1237:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1238:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     else
1239:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1240:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         return((HWREG(ui32Port + GPIO_O_IRQ_DETECT_UNMASK) >> ui32PortOffset) &
 1644              		.loc 1 1240 0
 1645 0748 7B68     		ldr	r3, [r7, #4]
 1646 074a 03F5E463 		add	r3, r3, #1824
 1647 074e 1A68     		ldr	r2, [r3]
 1648 0750 FB68     		ldr	r3, [r7, #12]
 1649 0752 22FA03F3 		lsr	r3, r2, r3
 1650 0756 DBB2     		uxtb	r3, r3
 1651              	.L90:
1241:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****                0xFF);
1242:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1243:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1652              		.loc 1 1243 0
 1653 0758 1846     		mov	r0, r3
 1654 075a 1437     		adds	r7, r7, #20
 1655              		.cfi_def_cfa_offset 4
 1656 075c BD46     		mov	sp, r7
 1657              		.cfi_def_cfa_register 13
 1658              		@ sp needed
 1659 075e 5DF8047B 		ldr	r7, [sp], #4
 1660              		.cfi_restore 7
 1661              		.cfi_def_cfa_offset 0
 1662 0762 7047     		bx	lr
 1663              	.L92:
 1664              		.align	2
 1665              	.L91:
 1666 0764 00900D40 		.word	1074630656
 1667 0768 00A00D40 		.word	1074634752
 1668 076c 00B00D40 		.word	1074638848
 1669 0770 00C00D40 		.word	1074642944
 1670              		.cfi_endproc
 1671              	.LFE24:
 1673              		.align	2
 1674              		.global	GPIOPowIntClear
 1675              		.thumb
 1676              		.thumb_func
 1678              	GPIOPowIntClear:
 1679              	.LFB25:
1244:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1245:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1246:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Clears the power-up interrupt for the specified pin(s)
1248:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1249:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1250:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1251:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1252:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s).
1253:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1254:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1255:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1256:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1257:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1258:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
1259:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1260:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
1262:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOPowIntClear(uint32_t ui32Port, uint8_t ui8Pins)
1263:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1680              		.loc 1 1263 0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 16
 1683              		@ frame_needed = 1, uses_anonymous_args = 0
 1684              		@ link register save eliminated.
 1685 0774 80B4     		push	{r7}
 1686              		.cfi_def_cfa_offset 4
 1687              		.cfi_offset 7, -4
 1688 0776 85B0     		sub	sp, sp, #20
 1689              		.cfi_def_cfa_offset 24
 1690 0778 00AF     		add	r7, sp, #0
 1691              		.cfi_def_cfa_register 7
 1692 077a 7860     		str	r0, [r7, #4]
 1693 077c 0B46     		mov	r3, r1
 1694 077e FB70     		strb	r3, [r7, #3]
1264:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32PortOffset;
1265:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     uint32_t ui32IntPins;
1266:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1267:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1268:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Initialize value
1269:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1270:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32PortOffset = 0;
 1695              		.loc 1 1270 0
 1696 0780 0023     		movs	r3, #0
 1697 0782 FB60     		str	r3, [r7, #12]
1271:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1272:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1273:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Check the arguments.
1274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1275:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1276:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1277:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1278:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1279:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1280:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1698              		.loc 1 1280 0
 1699 0784 7B68     		ldr	r3, [r7, #4]
 1700 0786 164A     		ldr	r2, .L98
 1701 0788 9342     		cmp	r3, r2
 1702 078a 01D1     		bne	.L94
1281:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1282:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 0;
 1703              		.loc 1 1282 0
 1704 078c 0023     		movs	r3, #0
 1705 078e FB60     		str	r3, [r7, #12]
 1706              	.L94:
1283:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1707              		.loc 1 1284 0
 1708 0790 7B68     		ldr	r3, [r7, #4]
 1709 0792 144A     		ldr	r2, .L98+4
 1710 0794 9342     		cmp	r3, r2
 1711 0796 01D1     		bne	.L95
1285:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1286:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 8;
 1712              		.loc 1 1286 0
 1713 0798 0823     		movs	r3, #8
 1714 079a FB60     		str	r3, [r7, #12]
 1715              	.L95:
1287:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1288:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1716              		.loc 1 1288 0
 1717 079c 7B68     		ldr	r3, [r7, #4]
 1718 079e 124A     		ldr	r2, .L98+8
 1719 07a0 9342     		cmp	r3, r2
 1720 07a2 01D1     		bne	.L96
1289:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1290:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 16;
 1721              		.loc 1 1290 0
 1722 07a4 1023     		movs	r3, #16
 1723 07a6 FB60     		str	r3, [r7, #12]
 1724              	.L96:
1291:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1292:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1725              		.loc 1 1292 0
 1726 07a8 7B68     		ldr	r3, [r7, #4]
 1727 07aa 104A     		ldr	r2, .L98+12
 1728 07ac 9342     		cmp	r3, r2
 1729 07ae 01D1     		bne	.L97
1293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     {
1294:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****         ui32PortOffset = 24;
 1730              		.loc 1 1294 0
 1731 07b0 1823     		movs	r3, #24
 1732 07b2 FB60     		str	r3, [r7, #12]
 1733              	.L97:
1295:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     }
1296:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1734              		.loc 1 1296 0
 1735 07b4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1736 07b6 FB68     		ldr	r3, [r7, #12]
 1737 07b8 02FA03F3 		lsl	r3, r2, r3
 1738 07bc BB60     		str	r3, [r7, #8]
1297:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1298:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1299:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Clear the interrupts.
1300:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1301:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IRQ_DETECT_ACK) |= ui32IntPins;
 1739              		.loc 1 1301 0
 1740 07be 7B68     		ldr	r3, [r7, #4]
 1741 07c0 03F5E363 		add	r3, r3, #1816
 1742 07c4 1946     		mov	r1, r3
 1743 07c6 7B68     		ldr	r3, [r7, #4]
 1744 07c8 03F5E363 		add	r3, r3, #1816
 1745 07cc 1A68     		ldr	r2, [r3]
 1746 07ce BB68     		ldr	r3, [r7, #8]
 1747 07d0 1343     		orrs	r3, r3, r2
 1748 07d2 0B60     		str	r3, [r1]
1302:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1749              		.loc 1 1302 0
 1750 07d4 1437     		adds	r7, r7, #20
 1751              		.cfi_def_cfa_offset 4
 1752 07d6 BD46     		mov	sp, r7
 1753              		.cfi_def_cfa_register 13
 1754              		@ sp needed
 1755 07d8 5DF8047B 		ldr	r7, [sp], #4
 1756              		.cfi_restore 7
 1757              		.cfi_def_cfa_offset 0
 1758 07dc 7047     		bx	lr
 1759              	.L99:
 1760 07de 00BF     		.align	2
 1761              	.L98:
 1762 07e0 00900D40 		.word	1074630656
 1763 07e4 00A00D40 		.word	1074634752
 1764 07e8 00B00D40 		.word	1074638848
 1765 07ec 00C00D40 		.word	1074642944
 1766              		.cfi_endproc
 1767              	.LFE25:
 1769              		.align	2
 1770              		.global	GPIOIntWakeupEnable
 1771              		.thumb
 1772              		.thumb_func
 1774              	GPIOIntWakeupEnable:
 1775              	.LFB26:
1303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1304:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1305:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Enable Wake Up Interrupt
1307:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1308:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Config is the source to enable wake up on interrupt.
1309:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1310:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function enables wake up on interrupt from the selected sources.
1311:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1312:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The \e ui32Config argument must be one or the logical or of several of
1313:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! the following values:
1314:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1315:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \b GPIO_IWE_PORT_A, \b GPIO_IWE_PORT_B, \b GPIO_IWE_PORT_C,
1316:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \b GPIO_IWE_PORT_D, \b GPIO_IWE_USB,
1317:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \b GPIO_IWE_SM_TIMER.
1318:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1319:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
1320:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1321:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1322:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
1323:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOIntWakeupEnable(uint32_t ui32Config)
1324:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1776              		.loc 1 1324 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 8
 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780              		@ link register save eliminated.
 1781 07f0 80B4     		push	{r7}
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 7, -4
 1784 07f2 83B0     		sub	sp, sp, #12
 1785              		.cfi_def_cfa_offset 16
 1786 07f4 00AF     		add	r7, sp, #0
 1787              		.cfi_def_cfa_register 7
 1788 07f6 7860     		str	r0, [r7, #4]
1325:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT((ui32Config &
1326:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****             (GPIO_IWE_PORT_A |
1327:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_PORT_B |
1328:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_PORT_C |
1329:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_PORT_D |
1330:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_USB |
1331:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_SM_TIMER)) != 0);
1332:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1333:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1334:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Enable Wakeup from selected Interrupt sources
1335:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1336:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(SYS_CTRL_IWE) |= ui32Config;
 1789              		.loc 1 1336 0
 1790 07f8 0549     		ldr	r1, .L101
 1791 07fa 054B     		ldr	r3, .L101
 1792 07fc 1A68     		ldr	r2, [r3]
 1793 07fe 7B68     		ldr	r3, [r7, #4]
 1794 0800 1343     		orrs	r3, r3, r2
 1795 0802 0B60     		str	r3, [r1]
1337:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1796              		.loc 1 1337 0
 1797 0804 0C37     		adds	r7, r7, #12
 1798              		.cfi_def_cfa_offset 4
 1799 0806 BD46     		mov	sp, r7
 1800              		.cfi_def_cfa_register 13
 1801              		@ sp needed
 1802 0808 5DF8047B 		ldr	r7, [sp], #4
 1803              		.cfi_restore 7
 1804              		.cfi_def_cfa_offset 0
 1805 080c 7047     		bx	lr
 1806              	.L102:
 1807 080e 00BF     		.align	2
 1808              	.L101:
 1809 0810 94200D40 		.word	1074602132
 1810              		.cfi_endproc
 1811              	.LFE26:
 1813              		.align	2
 1814              		.global	GPIOIntWakeupDisable
 1815              		.thumb
 1816              		.thumb_func
 1818              	GPIOIntWakeupDisable:
 1819              	.LFB27:
1338:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1339:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1340:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1341:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! Disable Wake Up Interrupt
1342:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1343:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \param ui32Config is the source to disable wake on interrupt from.
1344:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1345:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! This function disables Wake up on interrupt from the selected sources.
1346:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1347:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! The \e ui32Config argument must be one or the logical or of several of
1348:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! the following values:
1349:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1350:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \b GPIO_IWE_PORT_A, \b GPIO_IWE_PORT_B, \b GPIO_IWE_PORT_C,
1351:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \b GPIO_IWE_PORT_D, \b GPIO_IWE_USB,
1352:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \b GPIO_IWE_SM_TIMER,
1353:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //!
1354:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //! \return None
1355:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //
1356:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** //*****************************************************************************
1357:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** void
1358:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** GPIOIntWakeupDisable(uint32_t ui32Config)
1359:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** {
 1820              		.loc 1 1359 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 8
 1823              		@ frame_needed = 1, uses_anonymous_args = 0
 1824              		@ link register save eliminated.
 1825 0814 80B4     		push	{r7}
 1826              		.cfi_def_cfa_offset 4
 1827              		.cfi_offset 7, -4
 1828 0816 83B0     		sub	sp, sp, #12
 1829              		.cfi_def_cfa_offset 16
 1830 0818 00AF     		add	r7, sp, #0
 1831              		.cfi_def_cfa_register 7
 1832 081a 7860     		str	r0, [r7, #4]
1360:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     ASSERT((ui32Config &
1361:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****             (GPIO_IWE_PORT_A |
1362:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_PORT_B |
1363:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_PORT_C |
1364:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_PORT_D |
1365:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_USB |
1366:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****              GPIO_IWE_SM_TIMER)) != 0);
1367:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** 
1368:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1369:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     // Disable Wakeup from selected Interrupt sources
1370:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     //
1371:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c ****     HWREG(SYS_CTRL_IWE) &= ~ui32Config;
 1833              		.loc 1 1371 0
 1834 081c 0549     		ldr	r1, .L104
 1835 081e 054B     		ldr	r3, .L104
 1836 0820 1A68     		ldr	r2, [r3]
 1837 0822 7B68     		ldr	r3, [r7, #4]
 1838 0824 DB43     		mvns	r3, r3
 1839 0826 1340     		ands	r3, r3, r2
 1840 0828 0B60     		str	r3, [r1]
1372:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/gpio.c **** }
 1841              		.loc 1 1372 0
 1842 082a 0C37     		adds	r7, r7, #12
 1843              		.cfi_def_cfa_offset 4
 1844 082c BD46     		mov	sp, r7
 1845              		.cfi_def_cfa_register 13
 1846              		@ sp needed
 1847 082e 5DF8047B 		ldr	r7, [sp], #4
 1848              		.cfi_restore 7
 1849              		.cfi_def_cfa_offset 0
 1850 0832 7047     		bx	lr
 1851              	.L105:
 1852              		.align	2
 1853              	.L104:
 1854 0834 94200D40 		.word	1074602132
 1855              		.cfi_endproc
 1856              	.LFE27:
 1858              	.Letext0:
 1859              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1860              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 gpio.c
     /tmp/ccUxgfkJ.s:18     .text:0000000000000000 $t
     /tmp/ccUxgfkJ.s:23     .text:0000000000000000 GPIOGetIntNumber
     /tmp/ccUxgfkJ.s:105    .text:0000000000000058 $d
     /tmp/ccUxgfkJ.s:112    .text:0000000000000068 $t
     /tmp/ccUxgfkJ.s:117    .text:0000000000000068 GPIODirModeSet
     /tmp/ccUxgfkJ.s:209    .text:00000000000000e0 GPIODirModeGet
     /tmp/ccUxgfkJ.s:285    .text:000000000000013c GPIOIntTypeSet
     /tmp/ccUxgfkJ.s:405    .text:00000000000001e4 GPIOIntTypeGet
     /tmp/ccUxgfkJ.s:500    .text:000000000000025c GPIOPinIntEnable
     /tmp/ccUxgfkJ.s:545    .text:0000000000000288 GPIOPinIntDisable
     /tmp/ccUxgfkJ.s:591    .text:00000000000002b8 GPIOPinIntStatus
     /tmp/ccUxgfkJ.s:642    .text:00000000000002e8 GPIOPinIntClear
     /tmp/ccUxgfkJ.s:683    .text:000000000000030c GPIOPortIntRegister
     /tmp/ccUxgfkJ.s:725    .text:0000000000000334 GPIOPortIntUnregister
     /tmp/ccUxgfkJ.s:765    .text:0000000000000358 GPIOPinRead
     /tmp/ccUxgfkJ.s:808    .text:000000000000037c GPIOPinWrite
     /tmp/ccUxgfkJ.s:854    .text:00000000000003a8 GPIOPinTypeGPIOInput
     /tmp/ccUxgfkJ.s:898    .text:00000000000003d4 GPIOPinTypeGPIOOutput
     /tmp/ccUxgfkJ.s:942    .text:0000000000000400 GPIOPinTypeI2C
     /tmp/ccUxgfkJ.s:986    .text:000000000000042c GPIOPinTypeSSI
     /tmp/ccUxgfkJ.s:1030   .text:0000000000000458 GPIOPinTypeTimer
     /tmp/ccUxgfkJ.s:1074   .text:0000000000000484 GPIOPinTypeUARTInput
     /tmp/ccUxgfkJ.s:1118   .text:00000000000004b0 GPIOPinTypeUARTOutput
     /tmp/ccUxgfkJ.s:1162   .text:00000000000004dc GPIOPowIntTypeSet
     /tmp/ccUxgfkJ.s:1265   .text:0000000000000568 $d
     /tmp/ccUxgfkJ.s:1272   .text:0000000000000578 $t
     /tmp/ccUxgfkJ.s:1277   .text:0000000000000578 GPIOPowIntTypeGet
     /tmp/ccUxgfkJ.s:1370   .text:00000000000005e8 $d
     /tmp/ccUxgfkJ.s:1377   .text:00000000000005f8 $t
     /tmp/ccUxgfkJ.s:1382   .text:00000000000005f8 GPIOPowIntEnable
     /tmp/ccUxgfkJ.s:1466   .text:0000000000000664 $d
     /tmp/ccUxgfkJ.s:1473   .text:0000000000000674 $t
     /tmp/ccUxgfkJ.s:1478   .text:0000000000000674 GPIOPowIntDisable
     /tmp/ccUxgfkJ.s:1563   .text:00000000000006e0 $d
     /tmp/ccUxgfkJ.s:1570   .text:00000000000006f0 $t
     /tmp/ccUxgfkJ.s:1575   .text:00000000000006f0 GPIOPowIntStatus
     /tmp/ccUxgfkJ.s:1666   .text:0000000000000764 $d
     /tmp/ccUxgfkJ.s:1673   .text:0000000000000774 $t
     /tmp/ccUxgfkJ.s:1678   .text:0000000000000774 GPIOPowIntClear
     /tmp/ccUxgfkJ.s:1762   .text:00000000000007e0 $d
     /tmp/ccUxgfkJ.s:1769   .text:00000000000007f0 $t
     /tmp/ccUxgfkJ.s:1774   .text:00000000000007f0 GPIOIntWakeupEnable
     /tmp/ccUxgfkJ.s:1809   .text:0000000000000810 $d
     /tmp/ccUxgfkJ.s:1813   .text:0000000000000814 $t
     /tmp/ccUxgfkJ.s:1818   .text:0000000000000814 GPIOIntWakeupDisable
     /tmp/ccUxgfkJ.s:1854   .text:0000000000000834 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.59116071098782a37a9183a8102fe91b
                           .group:0000000000000000 wm4.hw_gpio.h.39.abbe53cff9a4c1fb5f1c34960fe1e7aa
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.gpio.h.41.604fa3d9f70fb140a75ada50bffeaeff
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.ioc.h.41.7444fe7016a1d045dd9fea497d615b28

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
IOCPadConfigSet
