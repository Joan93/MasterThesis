   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"cpu.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CPUcpsid
  20              		.thumb
  21              		.thumb_func
  23              	CPUcpsid:
  24              	.LFB0:
  25              		.file 1 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c"
   1:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** /******************************************************************************
   2:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  Filename:       cpu.c
   3:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  Revised:        $Date: 2013-01-21 15:25:21 +0100 (Mon, 21 Jan 2013) $
   4:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  Revision:       $Revision: 9178 $
   5:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
   6:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  Description:    Instruction wrappers for special CPU instructions needed by
   7:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *                  the drivers.
   8:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
   9:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
  10:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
  11:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
  12:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  Redistribution and use in source and binary forms, with or without
  13:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  modification, are permitted provided that the following conditions
  14:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  are met:
  15:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
  16:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *    Redistributions of source code must retain the above copyright
  17:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *    notice, this list of conditions and the following disclaimer.
  18:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
  19:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *    Redistributions in binary form must reproduce the above copyright
  20:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *    notice, this list of conditions and the following disclaimer in the
  21:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *    documentation and/or other materials provided with the distribution.
  22:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
  23:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  24:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *    its contributors may be used to endorse or promote products derived
  25:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *    from this software without specific prior written permission.
  26:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
  27:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  30:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  31:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  32:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  33:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  34:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  35:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  36:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  37:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** *
  39:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** ******************************************************************************/
  40:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
  41:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
  42:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #include "cpu.h"
  43:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
  44:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
  45:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
  46:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // Wrapper function for the CPSID instruction.  Returns the state of PRIMASK
  47:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // on entry.
  48:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
  49:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
  50:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__GNUC__)
  51:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t __attribute__((naked))
  52:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUcpsid(void)
  53:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
  26              		.loc 1 53 0
  27              		.cfi_startproc
  28              		@ Naked Function: prologue and epilogue provided by programmer.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  54:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     uint32_t ui32Ret;
  55:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
  56:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  57:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and disable interrupts.
  58:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  59:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
  31              		.loc 1 59 0
  32              	@ 59 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c" 1
  33 0000 EFF31080 		    mrs     r0, PRIMASK
  34 0004 72B6     	    cpsid   i
  35 0006 7047     	    bx      lr
  36              	
  37              	@ 0 "" 2
  38              		.thumb
  39 0008 1C46     		mov	r4, r3
  60:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    cpsid   i\n"
  61:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n"
  62:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           : "=r" (ui32Ret));
  63:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
  64:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  65:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // The return is handled in the inline assembly, but the compiler will
  66:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // still complain if there is not an explicit return here (despite the fact
  67:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // that this does not result in any code being produced because of the
  68:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // naked attribute).
  69:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  70:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     return(ui32Ret);
  40              		.loc 1 70 0
  41 000a 2346     		mov	r3, r4
  71:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
  42              		.loc 1 71 0
  43 000c 1846     		mov	r0, r3
  44              		.cfi_endproc
  45              	.LFE0:
  47 000e 00BF     		.align	2
  48              		.global	CPUprimask
  49              		.thumb
  50              		.thumb_func
  52              	CPUprimask:
  53              	.LFB1:
  72:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
  73:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if (__ICCARM__)
  74:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t
  75:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUcpsid(void)
  76:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
  77:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  78:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and disable interrupts.
  79:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  80:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
  81:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    cpsid   i\n");
  82:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
  83:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  84:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // "Warning[Pe940]: missing return statement at end of non-void function"
  85:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // is suppressed here to avoid putting a "bx lr" in the inline assembly
  86:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // above and a superfluous return statement here.
  87:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  88:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #pragma diag_suppress=Pe940
  89:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
  90:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #pragma diag_default=Pe940
  91:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
  92:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
  93:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** __asm uint32_t
  94:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUcpsid(void)
  95:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
  96:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  97:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and disable interrupts.
  98:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
  99:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     mrs     r0, PRIMASK;
 100:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     cpsid   i;
 101:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     bx      lr
 102:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 103:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 104:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 105:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t
 106:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUcpsid(void)
 107:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 108:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and disable interrupts.
 110:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 111:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
 112:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    cpsid   i\n"
 113:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n");
 114:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 115:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 116:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // The following keeps the compiler happy, because it wants to see a
 117:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // return value from this function.  It will generate code to return
 118:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // a zero.  However, the real return is the "bx lr" above, so the
 119:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // return(0) is never executed and the function returns with the value
 120:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // you expect in R0.
 121:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 122:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     return(0);
 123:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 124:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 125:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 126:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 127:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 128:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // Wrapper function returning the state of PRIMASK (indicating whether
 129:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // interrupts are enabled or disabled).
 130:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 131:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 132:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__GNUC__)
 133:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t __attribute__((naked))
 134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUprimask(void)
 135:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
  54              		.loc 1 135 0
  55              		.cfi_startproc
  56              		@ Naked Function: prologue and epilogue provided by programmer.
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 1, uses_anonymous_args = 0
 136:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     uint32_t ui32Ret;
 137:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 138:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 139:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and disable interrupts.
 140:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 141:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
  59              		.loc 1 141 0
  60              	@ 141 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c" 1
  61 0010 EFF31080 		    mrs     r0, PRIMASK
  62 0014 7047     	    bx      lr
  63              	
  64              	@ 0 "" 2
  65              		.thumb
  66 0016 1C46     		mov	r4, r3
 142:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n"
 143:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           : "=r" (ui32Ret));
 144:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 145:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 146:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // The return is handled in the inline assembly, but the compiler will
 147:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // still complain if there is not an explicit return here (despite the fact
 148:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // that this does not result in any code being produced because of the
 149:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // naked attribute).
 150:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 151:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     return(ui32Ret);
  67              		.loc 1 151 0
  68 0018 2346     		mov	r3, r4
 152:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
  69              		.loc 1 152 0
  70 001a 1846     		mov	r0, r3
  71              		.cfi_endproc
  72              	.LFE1:
  74              		.align	2
  75              		.global	CPUcpsie
  76              		.thumb
  77              		.thumb_func
  79              	CPUcpsie:
  80              	.LFB2:
 153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 154:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if (__ICCARM__)
 155:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t
 156:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUprimask(void)
 157:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 158:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 159:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and disable interrupts.
 160:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 161:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n");
 162:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 163:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 164:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // "Warning[Pe940]: missing return statement at end of non-void function"
 165:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // is suppressed here to avoid putting a "bx lr" in the inline assembly
 166:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // above and a superfluous return statement here.
 167:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 168:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #pragma diag_suppress=Pe940
 169:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 170:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #pragma diag_default=Pe940
 171:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 172:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 173:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** __asm uint32_t
 174:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUprimask(void)
 175:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 176:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 177:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and disable interrupts.
 178:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 179:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     mrs     r0, PRIMASK;
 180:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     bx      lr
 181:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 182:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 183:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 184:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t
 185:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUprimask(void)
 186:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 187:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 188:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and disable interrupts.
 189:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 190:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
 191:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n");
 192:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 193:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 194:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // The following keeps the compiler happy, because it wants to see a
 195:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // return value from this function.  It will generate code to return
 196:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // a zero.  However, the real return is the "bx lr" above, so the
 197:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // return(0) is never executed and the function returns with the value
 198:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // you expect in R0.
 199:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 200:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     return(0);
 201:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 202:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 203:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 204:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 205:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 206:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // Wrapper function for the CPSIE instruction.  Returns the state of PRIMASK
 207:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // on entry.
 208:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 209:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 210:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__GNUC__)
 211:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t __attribute__((naked))
 212:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUcpsie(void)
 213:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
  81              		.loc 1 213 0
  82              		.cfi_startproc
  83              		@ Naked Function: prologue and epilogue provided by programmer.
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 1, uses_anonymous_args = 0
 214:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     uint32_t ui32Ret;
 215:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 216:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 217:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and enable interrupts.
 218:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 219:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
  86              		.loc 1 219 0
  87              	@ 219 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c" 1
  88 001c EFF31080 		    mrs     r0, PRIMASK
  89 0020 62B6     	    cpsie   i
  90 0022 7047     	    bx      lr
  91              	
  92              	@ 0 "" 2
  93              		.thumb
  94 0024 1C46     		mov	r4, r3
 220:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    cpsie   i\n"
 221:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n"
 222:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           : "=r" (ui32Ret));
 223:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 224:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 225:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // The return is handled in the inline assembly, but the compiler will
 226:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // still complain if there is not an explicit return here (despite the fact
 227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // that this does not result in any code being produced because of the
 228:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // naked attribute).
 229:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 230:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     return(ui32Ret);
  95              		.loc 1 230 0
  96 0026 2346     		mov	r3, r4
 231:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
  97              		.loc 1 231 0
  98 0028 1846     		mov	r0, r3
  99              		.cfi_endproc
 100              	.LFE2:
 102 002a 00BF     		.align	2
 103              		.global	CPUwfi
 104              		.thumb
 105              		.thumb_func
 107              	CPUwfi:
 108              	.LFB3:
 232:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 233:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if (__ICCARM__)
 234:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t
 235:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUcpsie(void)
 236:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 237:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 238:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and enable interrupts.
 239:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 240:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
 241:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    cpsie   i\n");
 242:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 243:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 244:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // "Warning[Pe940]: missing return statement at end of non-void function"
 245:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // is suppressed here to avoid putting a "bx lr" in the inline assembly
 246:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // above and a superfluous return statement here.
 247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 248:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #pragma diag_suppress=Pe940
 249:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 250:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #pragma diag_default=Pe940
 251:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 252:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 253:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** __asm uint32_t
 254:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUcpsie(void)
 255:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 256:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 257:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and enable interrupts.
 258:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 259:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     mrs     r0, PRIMASK;
 260:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     cpsie   i;
 261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     bx      lr
 262:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 263:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 264:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 265:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t
 266:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUcpsie(void)
 267:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 268:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 269:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read PRIMASK and enable interrupts.
 270:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 271:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
 272:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    cpsie   i\n"
 273:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n");
 274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 275:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 276:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // The following keeps the compiler happy, because it wants to see a
 277:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // return value from this function.  It will generate code to return
 278:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // a zero.  However, the real return is the "bx lr" above, so the
 279:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // return(0) is never executed and the function returns with the value
 280:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // you expect in R0.
 281:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 282:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     return(0);
 283:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 285:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 286:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 287:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 288:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // Wrapper function for the WFI instruction.
 289:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 290:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 291:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__GNUC__)
 292:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void __attribute__((naked))
 293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUwfi(void)
 294:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 109              		.loc 1 294 0
 110              		.cfi_startproc
 111              		@ Naked Function: prologue and epilogue provided by programmer.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 295:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 296:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Wait for the next interrupt.
 297:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 298:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    wfi\n"
 114              		.loc 1 298 0
 115              	@ 298 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c" 1
 116 002c 30BF     		    wfi
 117 002e 7047     	    bx      lr
 118              	
 119              	@ 0 "" 2
 299:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n");
 300:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 120              		.loc 1 300 0
 121              		.thumb
 122              		.cfi_endproc
 123              	.LFE3:
 125              		.align	2
 126              		.global	CPUwfe
 127              		.thumb
 128              		.thumb_func
 130              	CPUwfe:
 131              	.LFB4:
 301:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 302:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if (__ICCARM__)
 303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void
 304:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUwfi(void)
 305:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 307:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Wait for the next interrupt.
 308:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 309:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    wfi\n");
 310:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 311:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 312:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 313:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** __asm void
 314:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUwfi(void)
 315:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 316:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 317:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Wait for the next interrupt.
 318:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 319:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     wfi;
 320:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     bx      lr
 321:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 322:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 323:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 324:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void
 325:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUwfi(void)
 326:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 327:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 328:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Wait for the next interrupt.
 329:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 330:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    wfi\n");
 331:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 332:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 333:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 334:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 335:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 336:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // Wrapper function for the WFE instruction.
 337:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 338:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 339:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__GNUC__)
 340:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void __attribute__((naked))
 341:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUwfe(void)
 342:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 132              		.loc 1 342 0
 133              		.cfi_startproc
 134              		@ Naked Function: prologue and epilogue provided by programmer.
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 343:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 344:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Wait for the next event
 345:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 346:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    wfe\n"
 137              		.loc 1 346 0
 138              	@ 346 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c" 1
 139 0030 20BF     		    wfe
 140 0032 7047     	    bx      lr
 141              	
 142              	@ 0 "" 2
 347:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n");
 348:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 143              		.loc 1 348 0
 144              		.thumb
 145              		.cfi_endproc
 146              	.LFE4:
 148              		.align	2
 149              		.global	CPUsev
 150              		.thumb
 151              		.thumb_func
 153              	CPUsev:
 154              	.LFB5:
 349:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 350:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if (__ICCARM__)
 351:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void
 352:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUwfe(void)
 353:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 354:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 355:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Wait for the next event
 356:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 357:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    wfe\n");
 358:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 359:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 360:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 361:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** __asm void
 362:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUwfe(void)
 363:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 364:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 365:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Wait for the next event
 366:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 367:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     wfe;
 368:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     bx      lr
 369:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 370:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 371:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 372:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void
 373:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUwfe(void)
 374:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 375:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 376:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Wait for the next event
 377:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 378:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    wfe\n");
 379:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 380:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 381:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 382:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 383:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 384:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // Wrapper function for the SEV instruction (Send event).
 385:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 386:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 387:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__GNUC__)
 388:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void __attribute__((naked))
 389:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUsev(void)
 390:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 155              		.loc 1 390 0
 156              		.cfi_startproc
 157              		@ Naked Function: prologue and epilogue provided by programmer.
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 391:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 392:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Send event
 393:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 394:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    sev\n"
 160              		.loc 1 394 0
 161              	@ 394 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c" 1
 162 0034 40BF     		    sev
 163 0036 7047     	    bx      lr
 164              	
 165              	@ 0 "" 2
 395:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n");
 396:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 166              		.loc 1 396 0
 167              		.thumb
 168              		.cfi_endproc
 169              	.LFE5:
 171              		.align	2
 172              		.global	CPUbasepriSet
 173              		.thumb
 174              		.thumb_func
 176              	CPUbasepriSet:
 177              	.LFB6:
 397:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 398:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if (__ICCARM__)
 399:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void
 400:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUsev(void)
 401:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 402:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 403:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Send event
 404:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 405:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    sev\n");
 406:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 407:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 408:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 409:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** __asm void
 410:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUsev(void)
 411:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 412:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 413:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Send event
 414:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 415:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     sev;
 416:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     bx      lr
 417:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 418:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 419:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 420:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void
 421:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUsev(void)
 422:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 423:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 424:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Send event
 425:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 426:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    sev\n");
 427:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 428:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 429:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 430:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 431:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 432:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // Wrapper function for writing the BASEPRI register.
 433:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 434:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 435:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__GNUC__)
 436:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void __attribute__((naked))
 437:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUbasepriSet(uint32_t ui32NewBasepri)
 438:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 178              		.loc 1 438 0
 179              		.cfi_startproc
 180              		@ Naked Function: prologue and epilogue provided by programmer.
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 1, uses_anonymous_args = 0
 439:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 440:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 441:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Set the BASEPRI register
 442:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 443:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    msr     BASEPRI, r0\n"
 183              		.loc 1 443 0
 184              	@ 443 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c" 1
 185 0038 80F31188 		    msr     BASEPRI, r0
 186 003c 7047     	    bx      lr
 187              	
 188              	@ 0 "" 2
 444:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n");
 445:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 189              		.loc 1 445 0
 190              		.thumb
 191              		.cfi_endproc
 192              	.LFE6:
 194 003e 00BF     		.align	2
 195              		.global	CPUbasepriGet
 196              		.thumb
 197              		.thumb_func
 199              	CPUbasepriGet:
 200              	.LFB7:
 446:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 447:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if (__ICCARM__)
 448:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void
 449:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUbasepriSet(uint32_t ui32NewBasepri)
 450:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 451:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 452:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Set the BASEPRI register
 453:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 454:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    msr     BASEPRI, r0\n");
 455:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 456:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 457:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 458:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** __asm void
 459:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUbasepriSet(uint32_t ui32NewBasepri)
 460:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 461:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 462:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Set the BASEPRI register
 463:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 464:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     msr     BASEPRI, r0;
 465:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     bx      lr
 466:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 467:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 468:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 469:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** void
 470:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUbasepriSet(uint32_t ui32NewBasepri)
 471:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 472:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 473:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Set the BASEPRI register
 474:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 475:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    msr     BASEPRI, r0\n");
 476:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 477:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #endif
 478:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 479:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 480:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 481:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** // Wrapper function for reading the BASEPRI register.
 482:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //
 483:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** //*****************************************************************************
 484:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** #if defined(__GNUC__)
 485:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** uint32_t __attribute__((naked))
 486:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** CPUbasepriGet(void)
 487:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** {
 201              		.loc 1 487 0
 202              		.cfi_startproc
 203              		@ Naked Function: prologue and epilogue provided by programmer.
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 488:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     uint32_t ui32Ret;
 489:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 490:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 491:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // Read BASEPRI
 492:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 493:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     __asm("    mrs     r0, BASEPRI\n"
 206              		.loc 1 493 0
 207              	@ 493 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c" 1
 208 0040 EFF31180 		    mrs     r0, BASEPRI
 209 0044 7047     	    bx      lr
 210              	
 211              	@ 0 "" 2
 212              		.thumb
 213 0046 1C46     		mov	r4, r3
 494:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           "    bx      lr\n"
 495:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****           : "=r" (ui32Ret));
 496:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** 
 497:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 498:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // The return is handled in the inline assembly, but the compiler will
 499:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // still complain if there is not an explicit return here (despite the fact
 500:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // that this does not result in any code being produced because of the
 501:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     // naked attribute).
 502:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     //
 503:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c ****     return(ui32Ret);
 214              		.loc 1 503 0
 215 0048 2346     		mov	r3, r4
 504:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/cpu.c **** }
 216              		.loc 1 504 0
 217 004a 1846     		mov	r0, r3
 218              		.cfi_endproc
 219              	.LFE7:
 221              	.Letext0:
 222              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 223              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 cpu.c
     /tmp/cc5a3vw4.s:18     .text:0000000000000000 $t
     /tmp/cc5a3vw4.s:23     .text:0000000000000000 CPUcpsid
     /tmp/cc5a3vw4.s:52     .text:0000000000000010 CPUprimask
     /tmp/cc5a3vw4.s:79     .text:000000000000001c CPUcpsie
     /tmp/cc5a3vw4.s:107    .text:000000000000002c CPUwfi
     /tmp/cc5a3vw4.s:130    .text:0000000000000030 CPUwfe
     /tmp/cc5a3vw4.s:153    .text:0000000000000034 CPUsev
     /tmp/cc5a3vw4.s:176    .text:0000000000000038 CPUbasepriSet
     /tmp/cc5a3vw4.s:199    .text:0000000000000040 CPUbasepriGet
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.59116071098782a37a9183a8102fe91b
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519

NO UNDEFINED SYMBOLS
