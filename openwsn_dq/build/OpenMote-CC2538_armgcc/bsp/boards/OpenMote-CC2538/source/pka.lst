   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"pka.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	PKAEnableInt
  20              		.thumb
  21              		.thumb_func
  23              	PKAEnableInt:
  24              	.LFB0:
  25              		.file 1 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c"
   1:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** /******************************************************************************
   2:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  Filename:       pka.c
   3:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  Revised:        $Date: 2012-10-01 11:15:04 -0700 (Mon, 01 Oct 2012) $
   4:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  Revision:       $Revision: 31660 $
   5:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
   6:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  Description:    Driver for the PKA HW module.
   7:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
   8:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  Copyright (C) 2013 Texas Instruments Incorporated - http://www.ti.com/
   9:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
  10:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
  11:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  modification, are permitted provided that the following conditions
  13:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  are met:
  14:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
  15:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *    Redistributions of source code must retain the above copyright
  16:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
  18:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *    documentation and/or other materials provided with the distribution.
  21:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
  22:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *    its contributors may be used to endorse or promote products derived
  24:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *    from this software without specific prior written permission.
  25:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
  26:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** *
  38:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** ******************************************************************************/
  39:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  40:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  41:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  42:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \addtogroup pka_driver
  43:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! @{
  44:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  45:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  46:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  47:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #include <headers/hw_ints.h>
  48:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #include <headers/hw_memmap.h>
  49:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #include <headers/hw_pka.h>
  50:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #include <headers/hw_types.h>
  51:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #include "interrupt.h"
  52:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #include "pka.h"
  53:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #include "sys_ctrl.h"
  54:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #include "debug.h"
  55:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  56:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  57:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  58:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** // Macro definition for NULL
  59:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  60:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  61:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  62:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #ifndef NULL
  63:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #define NULL                    ((void*)0)
  64:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #endif
  65:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  66:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  67:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  68:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** // Define for the maximum curve size supported by the PKA module in 32 bit
  69:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** // word.
  70:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** // \note PKA hardware module can support upto 384 bit curve size due to the
  71:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //       2K of PKA RAM.
  72:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  73:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  74:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #define PKA_MAX_CURVE_SIZE_32_BIT_WORD \
  75:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                                 12
  76:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  77:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  78:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  79:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** // Define for the maximum length of the big number supported by the PKA module
  80:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** // in 32 bit word.
  81:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  82:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  83:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #define PKA_MAX_LEN_IN_32_BIT_WORD \
  84:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                                 PKA_MAX_CURVE_SIZE_32_BIT_WORD
  85:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  86:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  87:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  88:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** // Define for the PKA RAM size.
  89:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  90:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //****************************************************************************
  91:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** #define PKA_RAM_SIZE            2000
  92:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  93:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
  94:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
  95:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
  96:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Enables the PKA interrupt.
  97:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
  98:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function enables the PKA interrupt.
  99:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 100:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return None.
 101:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 102:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 103:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** void
 104:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAEnableInt(void)
 105:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
  26              		.loc 1 105 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
 106:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 107:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Enable the PKA interrupt.
 108:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     IntEnable(INT_PKA);
  36              		.loc 1 109 0
  37 0004 A020     		movs	r0, #160
  38 0006 FFF7FEFF 		bl	IntEnable
 110:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
  39              		.loc 1 110 0
  40 000a 80BD     		pop	{r7, pc}
  41              		.cfi_endproc
  42              	.LFE0:
  44              		.align	2
  45              		.global	PKADisableInt
  46              		.thumb
  47              		.thumb_func
  49              	PKADisableInt:
  50              	.LFB1:
 111:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 112:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 113:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 114:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Disables the PKA interrupt.
 115:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 116:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function disables the PKA interrupt.
 117:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 118:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return None.
 119:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 120:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 121:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** void
 122:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKADisableInt( void )
 123:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
  51              		.loc 1 123 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55 000c 80B5     		push	{r7, lr}
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 000e 00AF     		add	r7, sp, #0
  60              		.cfi_def_cfa_register 7
 124:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 125:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Disables the PKA interrupt.
 126:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 127:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     IntDisable(INT_PKA);
  61              		.loc 1 127 0
  62 0010 A020     		movs	r0, #160
  63 0012 FFF7FEFF 		bl	IntDisable
 128:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
  64              		.loc 1 128 0
  65 0016 80BD     		pop	{r7, pc}
  66              		.cfi_endproc
  67              	.LFE1:
  69              		.align	2
  70              		.global	PKAClearInt
  71              		.thumb
  72              		.thumb_func
  74              	PKAClearInt:
  75              	.LFB2:
 129:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 130:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 131:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 132:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Clears the PKA interrupt.
 133:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function unpends PKA interrupt.  This will cause any previously
 135:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! generated PKA interrupts that have not been handled yet to be discarded.
 136:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 137:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return None.
 138:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 139:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 140:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** void
 141:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAClearInt(void)
 142:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
  76              		.loc 1 142 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0018 80B5     		push	{r7, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 001a 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
 143:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 144:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // UnPends the PKA interrupt.
 145:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 146:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     IntPendClear(INT_PKA);
  86              		.loc 1 146 0
  87 001c A020     		movs	r0, #160
  88 001e FFF7FEFF 		bl	IntPendClear
 147:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
  89              		.loc 1 147 0
  90 0022 80BD     		pop	{r7, pc}
  91              		.cfi_endproc
  92              	.LFE2:
  94              		.align	2
  95              		.global	PKARegInt
  96              		.thumb
  97              		.thumb_func
  99              	PKARegInt:
 100              	.LFB3:
 148:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 149:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 150:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 151:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Registers an interrupt handler for PKA interrupt.
 152:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pfnHandler is a pointer to the function to be called when the
 154:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! PKA interrupt occurs.
 155:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 156:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function does the actual registering of the interrupt handler.  This
 157:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! will not enable the PKA interrupt in the interrupt controller, a call to
 158:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the function \sa PKAEnableInt() is needed to enable the PKA interrupt.
 159:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 160:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \sa IntRegister() for important information about registering interrupt
 161:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! handlers.
 162:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 163:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return None.
 164:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 165:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 166:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** void
 167:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKARegInt(void (*pfnHandler)(void))
 168:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 101              		.loc 1 168 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 8
 104              		@ frame_needed = 1, uses_anonymous_args = 0
 105 0024 80B5     		push	{r7, lr}
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 7, -8
 108              		.cfi_offset 14, -4
 109 0026 82B0     		sub	sp, sp, #8
 110              		.cfi_def_cfa_offset 16
 111 0028 00AF     		add	r7, sp, #0
 112              		.cfi_def_cfa_register 7
 113 002a 7860     		str	r0, [r7, #4]
 169:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 170:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Register the interrupt handler.
 171:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 172:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     IntRegister(INT_PKA, pfnHandler);
 114              		.loc 1 172 0
 115 002c A020     		movs	r0, #160
 116 002e 7968     		ldr	r1, [r7, #4]
 117 0030 FFF7FEFF 		bl	IntRegister
 173:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 118              		.loc 1 173 0
 119 0034 0837     		adds	r7, r7, #8
 120              		.cfi_def_cfa_offset 8
 121 0036 BD46     		mov	sp, r7
 122              		.cfi_def_cfa_register 13
 123              		@ sp needed
 124 0038 80BD     		pop	{r7, pc}
 125              		.cfi_endproc
 126              	.LFE3:
 128 003a 00BF     		.align	2
 129              		.global	PKAUnRegInt
 130              		.thumb
 131              		.thumb_func
 133              	PKAUnRegInt:
 134              	.LFB4:
 174:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 175:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 176:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 177:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Unregisters an interrupt handler for the PKA interrupt.
 178:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 179:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function deregisters the interrupt service routine.  This function
 180:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! will not disable the interrupt and an explicit call to \sa PKADisableInt()
 181:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! is needed.
 182:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 183:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return None.
 184:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 185:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 186:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** void
 187:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAUnRegInt(void)
 188:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 135              		.loc 1 188 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 1, uses_anonymous_args = 0
 139 003c 80B5     		push	{r7, lr}
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 7, -8
 142              		.cfi_offset 14, -4
 143 003e 00AF     		add	r7, sp, #0
 144              		.cfi_def_cfa_register 7
 189:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 190:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Unregister the interrupt handler.
 191:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 192:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     IntUnregister(INT_PKA);
 145              		.loc 1 192 0
 146 0040 A020     		movs	r0, #160
 147 0042 FFF7FEFF 		bl	IntUnregister
 193:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 148              		.loc 1 193 0
 149 0046 80BD     		pop	{r7, pc}
 150              		.cfi_endproc
 151              	.LFE4:
 153              		.align	2
 154              		.global	PKAGetOpsStatus
 155              		.thumb
 156              		.thumb_func
 158              	PKAGetOpsStatus:
 159              	.LFB5:
 194:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 195:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 196:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 197:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Provides the PKA operation status.
 198:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 199:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function provides information on whether any PKA operation is in
 200:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! progress or not. This function allows to check the PKA operation status
 201:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! before starting any new PKA operation.
 202:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 203:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns: 
 204:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_INPRG if the PKA operation is in progress.
 205:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_NOT_INPRG if the PKA operation is not in progress.
 206:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 207:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 208:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 209:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAGetOpsStatus(void)
 210:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 160              		.loc 1 210 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 1, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165 0048 80B4     		push	{r7}
 166              		.cfi_def_cfa_offset 4
 167              		.cfi_offset 7, -4
 168 004a 00AF     		add	r7, sp, #0
 169              		.cfi_def_cfa_register 7
 211:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 170              		.loc 1 211 0
 171 004c 064B     		ldr	r3, .L9
 172 004e 1B68     		ldr	r3, [r3]
 173 0050 03F40043 		and	r3, r3, #32768
 174 0054 002B     		cmp	r3, #0
 175 0056 01D0     		beq	.L7
 212:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 213:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 176              		.loc 1 213 0
 177 0058 0723     		movs	r3, #7
 178 005a 00E0     		b	.L8
 179              	.L7:
 214:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 215:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     else
 216:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 217:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_NOT_INPRG);
 180              		.loc 1 217 0
 181 005c 0823     		movs	r3, #8
 182              	.L8:
 218:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 219:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 183              		.loc 1 219 0
 184 005e 1846     		mov	r0, r3
 185 0060 BD46     		mov	sp, r7
 186              		.cfi_def_cfa_register 13
 187              		@ sp needed
 188 0062 5DF8047B 		ldr	r7, [sp], #4
 189              		.cfi_restore 7
 190              		.cfi_def_cfa_offset 0
 191 0066 7047     		bx	lr
 192              	.L10:
 193              		.align	2
 194              	.L9:
 195 0068 1C400044 		.word	1140867100
 196              		.cfi_endproc
 197              	.LFE5:
 199              		.align	2
 200              		.global	PKABigNumModStart
 201              		.thumb
 202              		.thumb_func
 204              	PKABigNumModStart:
 205              	.LFB6:
 220:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 221:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 222:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 223:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Starts the big number modulus operation.
 224:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 225:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32BNum is the pointer to the big number on which modulo operation
 226:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! needs to be carried out.
 227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8BNSize is the size of the big number \sa pui32BNum in 32-bit
 228:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! word.
 229:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32Modulus is the pointer to the divisor.
 230:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8ModSize is the size of the divisor \sa pui32Modulus.
 231:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 232:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! which will be set by this function.
 233:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 234:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function starts the modulo operation on the big num \sa pui32BNum
 235:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! using the divisor \sa pui32Modulus.  The PKA RAM location where the result
 236:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! will be available is stored in \sa pui32ResultVector.
 237:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 238:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!\return Returns: 
 239:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 240:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 241:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! some other operation.
 242:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 243:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 244:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 245:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumModStart(uint32_t* pui32BNum, uint8_t ui8BNSize,
 246:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                   uint32_t* pui32Modulus, uint8_t ui8ModSize,
 247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                   uint32_t* pui32ResultVector)
 248:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 206              		.loc 1 248 0
 207              		.cfi_startproc
 208              		@ args = 4, pretend = 0, frame = 32
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211 006c 80B4     		push	{r7}
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 7, -4
 214 006e 89B0     		sub	sp, sp, #36
 215              		.cfi_def_cfa_offset 40
 216 0070 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
 218 0072 F860     		str	r0, [r7, #12]
 219 0074 7A60     		str	r2, [r7, #4]
 220 0076 1A46     		mov	r2, r3
 221 0078 0B46     		mov	r3, r1
 222 007a FB72     		strb	r3, [r7, #11]
 223 007c 1346     		mov	r3, r2
 224 007e BB72     		strb	r3, [r7, #10]
 249:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint8_t extraBuf;
 250:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t offset;
 251:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
 252:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 253:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 254:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check the arguments.
 255:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 256:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32BNum);
 257:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32Modulus);
 258:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 259:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 260:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // make sure no operation is in progress.
 262:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 263:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 225              		.loc 1 263 0
 226 0080 3C4B     		ldr	r3, .L18
 227 0082 1B68     		ldr	r3, [r3]
 228 0084 03F40043 		and	r3, r3, #32768
 229 0088 002B     		cmp	r3, #0
 230 008a 01D0     		beq	.L12
 264:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 265:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 231              		.loc 1 265 0
 232 008c 0723     		movs	r3, #7
 233 008e 6BE0     		b	.L13
 234              	.L12:
 266:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 267:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 268:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 269:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // calculate the extra buffer requirement.
 270:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 271:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     extraBuf = 2 + ui8ModSize % 2;
 235              		.loc 1 271 0
 236 0090 BB7A     		ldrb	r3, [r7, #10]
 237 0092 03F00103 		and	r3, r3, #1
 238 0096 DBB2     		uxtb	r3, r3
 239 0098 0233     		adds	r3, r3, #2
 240 009a FB76     		strb	r3, [r7, #27]
 272:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 273:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset = 0;
 241              		.loc 1 273 0
 242 009c 0023     		movs	r3, #0
 243 009e 7B61     		str	r3, [r7, #20]
 274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 275:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 276:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 277:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the number will be stored.
 278:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 279:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >>2;
 244              		.loc 1 279 0
 245 00a0 354A     		ldr	r2, .L18+4
 246 00a2 7B69     		ldr	r3, [r7, #20]
 247 00a4 9B08     		lsrs	r3, r3, #2
 248 00a6 1360     		str	r3, [r2]
 280:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 281:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 282:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the number in PKA RAM
 283:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8BNSize; i++)
 249              		.loc 1 284 0
 250 00a8 0023     		movs	r3, #0
 251 00aa FB61     		str	r3, [r7, #28]
 252 00ac 12E0     		b	.L14
 253              	.L15:
 285:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 286:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BNum[i];
 254              		.loc 1 286 0 discriminator 3
 255 00ae FB69     		ldr	r3, [r7, #28]
 256 00b0 9B00     		lsls	r3, r3, #2
 257 00b2 1A46     		mov	r2, r3
 258 00b4 7B69     		ldr	r3, [r7, #20]
 259 00b6 1344     		add	r3, r3, r2
 260 00b8 03F18843 		add	r3, r3, #1140850688
 261 00bc 03F5C043 		add	r3, r3, #24576
 262 00c0 1946     		mov	r1, r3
 263 00c2 FB69     		ldr	r3, [r7, #28]
 264 00c4 9B00     		lsls	r3, r3, #2
 265 00c6 FA68     		ldr	r2, [r7, #12]
 266 00c8 1344     		add	r3, r3, r2
 267 00ca 1B68     		ldr	r3, [r3]
 268 00cc 0B60     		str	r3, [r1]
 284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 269              		.loc 1 284 0 discriminator 3
 270 00ce FB69     		ldr	r3, [r7, #28]
 271 00d0 0133     		adds	r3, r3, #1
 272 00d2 FB61     		str	r3, [r7, #28]
 273              	.L14:
 284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 274              		.loc 1 284 0 is_stmt 0 discriminator 1
 275 00d4 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 276 00d6 FB69     		ldr	r3, [r7, #28]
 277 00d8 9A42     		cmp	r2, r3
 278 00da E8DC     		bgt	.L15
 287:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 288:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 289:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 290:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // determine the offset for the next data input.
 291:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 292:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + ui8BNSize % 2);
 279              		.loc 1 292 0 is_stmt 1
 280 00dc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 281 00de 03F00102 		and	r2, r3, #1
 282 00e2 FB69     		ldr	r3, [r7, #28]
 283 00e4 1344     		add	r3, r3, r2
 284 00e6 9B00     		lsls	r3, r3, #2
 285 00e8 1A46     		mov	r2, r3
 286 00ea 7B69     		ldr	r3, [r7, #20]
 287 00ec 1344     		add	r3, r3, r2
 288 00ee 7B61     		str	r3, [r7, #20]
 293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 294:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 295:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 296:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the divisor will be stored.
 297:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 298:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 289              		.loc 1 298 0
 290 00f0 224A     		ldr	r2, .L18+8
 291 00f2 7B69     		ldr	r3, [r7, #20]
 292 00f4 9B08     		lsrs	r3, r3, #2
 293 00f6 1360     		str	r3, [r2]
 299:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 300:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 301:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the divisor in PKA RAM.
 302:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8ModSize;  i++)
 294              		.loc 1 303 0
 295 00f8 0023     		movs	r3, #0
 296 00fa FB61     		str	r3, [r7, #28]
 297 00fc 12E0     		b	.L16
 298              	.L17:
 304:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 305:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32Modulus[i];
 299              		.loc 1 305 0 discriminator 3
 300 00fe FB69     		ldr	r3, [r7, #28]
 301 0100 9B00     		lsls	r3, r3, #2
 302 0102 1A46     		mov	r2, r3
 303 0104 7B69     		ldr	r3, [r7, #20]
 304 0106 1344     		add	r3, r3, r2
 305 0108 03F18843 		add	r3, r3, #1140850688
 306 010c 03F5C043 		add	r3, r3, #24576
 307 0110 1946     		mov	r1, r3
 308 0112 FB69     		ldr	r3, [r7, #28]
 309 0114 9B00     		lsls	r3, r3, #2
 310 0116 7A68     		ldr	r2, [r7, #4]
 311 0118 1344     		add	r3, r3, r2
 312 011a 1B68     		ldr	r3, [r3]
 313 011c 0B60     		str	r3, [r1]
 303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 314              		.loc 1 303 0 discriminator 3
 315 011e FB69     		ldr	r3, [r7, #28]
 316 0120 0133     		adds	r3, r3, #1
 317 0122 FB61     		str	r3, [r7, #28]
 318              	.L16:
 303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 319              		.loc 1 303 0 is_stmt 0 discriminator 1
 320 0124 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 321 0126 FB69     		ldr	r3, [r7, #28]
 322 0128 9A42     		cmp	r2, r3
 323 012a E8DC     		bgt	.L17
 306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 307:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 308:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 309:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // determine the offset for the next data.
 310:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 311:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 324              		.loc 1 311 0 is_stmt 1
 325 012c FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 326 012e FB69     		ldr	r3, [r7, #28]
 327 0130 1344     		add	r3, r3, r2
 328 0132 9B00     		lsls	r3, r3, #2
 329 0134 1A46     		mov	r2, r3
 330 0136 7B69     		ldr	r3, [r7, #20]
 331 0138 1344     		add	r3, r3, r2
 332 013a 7B61     		str	r3, [r7, #20]
 312:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 313:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 314:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the result vector address location.
 315:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 316:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 333              		.loc 1 316 0
 334 013c 7B69     		ldr	r3, [r7, #20]
 335 013e 03F18843 		add	r3, r3, #1140850688
 336 0142 03F5C043 		add	r3, r3, #24576
 337 0146 BA6A     		ldr	r2, [r7, #40]
 338 0148 1360     		str	r3, [r2]
 317:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 318:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 319:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM
 320:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 321:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 339              		.loc 1 321 0
 340 014a 0D4A     		ldr	r2, .L18+12
 341 014c 7B69     		ldr	r3, [r7, #20]
 342 014e 9B08     		lsrs	r3, r3, #2
 343 0150 1360     		str	r3, [r2]
 322:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 323:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 324:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load A length registers with Big number length in 32 bit words.
 325:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 326:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BNSize;
 344              		.loc 1 326 0
 345 0152 0C4A     		ldr	r2, .L18+16
 346 0154 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 347 0156 1360     		str	r3, [r2]
 327:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 328:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 329:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load B length registers  Divisor length in 32-bit words.
 330:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 331:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8ModSize;
 348              		.loc 1 331 0
 349 0158 0B4A     		ldr	r2, .L18+20
 350 015a BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 351 015c 1360     		str	r3, [r2]
 332:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 333:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 334:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Start the PKCP modulo operation by setting the PKA Function register.
 335:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 336:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_MODULO);
 352              		.loc 1 336 0
 353 015e 054B     		ldr	r3, .L18
 354 0160 4FF40242 		mov	r2, #33280
 355 0164 1A60     		str	r2, [r3]
 337:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 338:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 356              		.loc 1 338 0
 357 0166 0023     		movs	r3, #0
 358              	.L13:
 339:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 359              		.loc 1 339 0
 360 0168 1846     		mov	r0, r3
 361 016a 2437     		adds	r7, r7, #36
 362              		.cfi_def_cfa_offset 4
 363 016c BD46     		mov	sp, r7
 364              		.cfi_def_cfa_register 13
 365              		@ sp needed
 366 016e 5DF8047B 		ldr	r7, [sp], #4
 367              		.cfi_restore 7
 368              		.cfi_def_cfa_offset 0
 369 0172 7047     		bx	lr
 370              	.L19:
 371              		.align	2
 372              	.L18:
 373 0174 1C400044 		.word	1140867100
 374 0178 00400044 		.word	1140867072
 375 017c 04400044 		.word	1140867076
 376 0180 08400044 		.word	1140867080
 377 0184 10400044 		.word	1140867088
 378 0188 14400044 		.word	1140867092
 379              		.cfi_endproc
 380              	.LFE6:
 382              		.align	2
 383              		.global	PKABigNumModGetResult
 384              		.thumb
 385              		.thumb_func
 387              	PKABigNumModGetResult:
 388              	.LFB7:
 340:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 341:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 342:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 343:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Gets the result of the big number modulus operation.
 344:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 345:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to
 346:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! be stored.
 347:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8Size is the size of the provided buffer in 32 bit size word.
 348:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 349:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! was provided by the start function \sa PKABigNumModStart().
 350:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 351:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function gets the result of the big number modulus operation which was
 352:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! previously started using the function \sa PKABigNumModStart().
 353:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 354:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns:
 355:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful.
 356:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 357:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the operation.
 358:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 359:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW, if the \e ui8Size is less than the length
 360:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! of the result.
 361:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 362:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 363:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 364:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumModGetResult(uint32_t* pui32ResultBuf,uint8_t ui8Size,
 365:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                       uint32_t ui32ResVectorLoc)
 366:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 389              		.loc 1 366 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 32
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394 018c 80B4     		push	{r7}
 395              		.cfi_def_cfa_offset 4
 396              		.cfi_offset 7, -4
 397 018e 89B0     		sub	sp, sp, #36
 398              		.cfi_def_cfa_offset 40
 399 0190 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
 401 0192 F860     		str	r0, [r7, #12]
 402 0194 0B46     		mov	r3, r1
 403 0196 7A60     		str	r2, [r7, #4]
 404 0198 FB72     		strb	r3, [r7, #11]
 367:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t regMSWVal;
 368:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t len;
 369:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
 370:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 371:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 372:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check the arguments.
 373:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 374:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 375:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 376:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 377:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 378:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 379:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // verify that the operation is complete.
 380:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 381:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 405              		.loc 1 381 0
 406 019a 204B     		ldr	r3, .L27
 407 019c 1B68     		ldr	r3, [r3]
 408 019e 03F40043 		and	r3, r3, #32768
 409 01a2 002B     		cmp	r3, #0
 410 01a4 01D0     		beq	.L21
 382:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 383:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 411              		.loc 1 383 0
 412 01a6 0723     		movs	r3, #7
 413 01a8 31E0     		b	.L22
 414              	.L21:
 384:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 385:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 386:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 387:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //  Get the MSW register value.
 388:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 389:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     regMSWVal = HWREG(PKA_DIVMSW);
 415              		.loc 1 389 0
 416 01aa 1D4B     		ldr	r3, .L27+4
 417 01ac 1B68     		ldr	r3, [r3]
 418 01ae BB61     		str	r3, [r7, #24]
 390:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 391:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 392:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 393:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 394:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(regMSWVal & PKA_DIVMSW_RESULT_IS_ZERO)
 419              		.loc 1 394 0
 420 01b0 BB69     		ldr	r3, [r7, #24]
 421 01b2 03F40043 		and	r3, r3, #32768
 422 01b6 002B     		cmp	r3, #0
 423 01b8 01D0     		beq	.L23
 395:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 396:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 424              		.loc 1 396 0
 425 01ba 0423     		movs	r3, #4
 426 01bc 27E0     		b	.L22
 427              	.L23:
 397:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 398:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 399:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 400:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Get the length of the result.
 401:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 402:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     len = ((regMSWVal & PKA_DIVMSW_MSW_ADDRESS_M) + 1) -
 428              		.loc 1 402 0
 429 01be BB69     		ldr	r3, [r7, #24]
 430 01c0 C3F30A02 		ubfx	r2, r3, #0, #11
 403:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 431              		.loc 1 403 0
 432 01c4 7B68     		ldr	r3, [r7, #4]
 433 01c6 03F13C43 		add	r3, r3, #-1140850688
 434 01ca A3F5C043 		sub	r3, r3, #24576
 435 01ce 9B08     		lsrs	r3, r3, #2
 402:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 436              		.loc 1 402 0
 437 01d0 D31A     		subs	r3, r2, r3
 438 01d2 0133     		adds	r3, r3, #1
 439 01d4 7B61     		str	r3, [r7, #20]
 404:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 405:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 406:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // If the size of the buffer provided is less than the result length than
 407:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // return error.
 408:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 409:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(ui8Size < len)
 440              		.loc 1 409 0
 441 01d6 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 442 01d8 7B69     		ldr	r3, [r7, #20]
 443 01da 9A42     		cmp	r2, r3
 444 01dc 01D2     		bcs	.L24
 410:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 411:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 445              		.loc 1 411 0
 446 01de 0323     		movs	r3, #3
 447 01e0 15E0     		b	.L22
 448              	.L24:
 412:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 413:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 414:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 415:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // copy the result from vector C into the pResult.
 416:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 417:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < len; i++)
 449              		.loc 1 417 0
 450 01e2 0023     		movs	r3, #0
 451 01e4 FB61     		str	r3, [r7, #28]
 452 01e6 0DE0     		b	.L25
 453              	.L26:
 418:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 419:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 454              		.loc 1 419 0 discriminator 3
 455 01e8 FB69     		ldr	r3, [r7, #28]
 456 01ea 9B00     		lsls	r3, r3, #2
 457 01ec FA68     		ldr	r2, [r7, #12]
 458 01ee 1344     		add	r3, r3, r2
 459 01f0 FA69     		ldr	r2, [r7, #28]
 460 01f2 9200     		lsls	r2, r2, #2
 461 01f4 1146     		mov	r1, r2
 462 01f6 7A68     		ldr	r2, [r7, #4]
 463 01f8 0A44     		add	r2, r2, r1
 464 01fa 1268     		ldr	r2, [r2]
 465 01fc 1A60     		str	r2, [r3]
 417:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 466              		.loc 1 417 0 discriminator 3
 467 01fe FB69     		ldr	r3, [r7, #28]
 468 0200 0133     		adds	r3, r3, #1
 469 0202 FB61     		str	r3, [r7, #28]
 470              	.L25:
 417:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 471              		.loc 1 417 0 is_stmt 0 discriminator 1
 472 0204 FA69     		ldr	r2, [r7, #28]
 473 0206 7B69     		ldr	r3, [r7, #20]
 474 0208 9A42     		cmp	r2, r3
 475 020a EDD3     		bcc	.L26
 420:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 421:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 422:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 476              		.loc 1 422 0 is_stmt 1
 477 020c 0023     		movs	r3, #0
 478              	.L22:
 423:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** } // PKABigNumModGetResult()
 479              		.loc 1 423 0
 480 020e 1846     		mov	r0, r3
 481 0210 2437     		adds	r7, r7, #36
 482              		.cfi_def_cfa_offset 4
 483 0212 BD46     		mov	sp, r7
 484              		.cfi_def_cfa_register 13
 485              		@ sp needed
 486 0214 5DF8047B 		ldr	r7, [sp], #4
 487              		.cfi_restore 7
 488              		.cfi_def_cfa_offset 0
 489 0218 7047     		bx	lr
 490              	.L28:
 491 021a 00BF     		.align	2
 492              	.L27:
 493 021c 1C400044 		.word	1140867100
 494 0220 28400044 		.word	1140867112
 495              		.cfi_endproc
 496              	.LFE7:
 498              		.align	2
 499              		.global	PKABigNumCmpStart
 500              		.thumb
 501              		.thumb_func
 503              	PKABigNumCmpStart:
 504              	.LFB8:
 424:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 425:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 426:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 427:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Starts the comparison of two big numbers.
 428:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 429:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32BNum1 is the pointer to the first big number.
 430:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32BNum2 is the pointer to the second big number.
 431:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8Size is the size of the big number in 32 bit size word.
 432:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 433:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function starts the comparison of two big numbers pointed by
 434:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \e pui32BNum1 and \e pui32BNum2.
 435:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Note this function expects the size of the two big numbers equal.
 436:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 437:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!\return Returns: 
 438:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 439:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 440:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! some other operation.
 441:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 442:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 443:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 444:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumCmpStart(uint32_t* pui32BNum1, uint32_t* pui32BNum2, uint8_t ui8Size)
 445:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 505              		.loc 1 445 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 24
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 510 0224 80B4     		push	{r7}
 511              		.cfi_def_cfa_offset 4
 512              		.cfi_offset 7, -4
 513 0226 87B0     		sub	sp, sp, #28
 514              		.cfi_def_cfa_offset 32
 515 0228 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 517 022a F860     		str	r0, [r7, #12]
 518 022c B960     		str	r1, [r7, #8]
 519 022e 1346     		mov	r3, r2
 520 0230 FB71     		strb	r3, [r7, #7]
 446:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t offset;
 447:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
 448:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 449:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 450:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check the arguments.
 451:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 452:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32BNum1);
 453:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32BNum2);
 454:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 455:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset = 0;
 521              		.loc 1 455 0
 522 0232 0023     		movs	r3, #0
 523 0234 3B61     		str	r3, [r7, #16]
 456:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 457:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 458:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure no operation is in progress.
 459:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 460:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 524              		.loc 1 460 0
 525 0236 2E4B     		ldr	r3, .L36
 526 0238 1B68     		ldr	r3, [r3]
 527 023a 03F40043 		and	r3, r3, #32768
 528 023e 002B     		cmp	r3, #0
 529 0240 01D0     		beq	.L30
 461:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 462:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 530              		.loc 1 462 0
 531 0242 0723     		movs	r3, #7
 532 0244 4DE0     		b	.L31
 533              	.L30:
 463:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 464:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 465:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 466:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 467:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the first big number will be stored.
 468:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 469:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 534              		.loc 1 469 0
 535 0246 2B4A     		ldr	r2, .L36+4
 536 0248 3B69     		ldr	r3, [r7, #16]
 537 024a 9B08     		lsrs	r3, r3, #2
 538 024c 1360     		str	r3, [r2]
 470:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 471:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 472:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the first big number in PKA RAM.
 473:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 474:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8Size; i++)
 539              		.loc 1 474 0
 540 024e 0023     		movs	r3, #0
 541 0250 7B61     		str	r3, [r7, #20]
 542 0252 12E0     		b	.L32
 543              	.L33:
 475:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 476:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum1[i];
 544              		.loc 1 476 0 discriminator 3
 545 0254 7B69     		ldr	r3, [r7, #20]
 546 0256 9B00     		lsls	r3, r3, #2
 547 0258 1A46     		mov	r2, r3
 548 025a 3B69     		ldr	r3, [r7, #16]
 549 025c 1344     		add	r3, r3, r2
 550 025e 03F18843 		add	r3, r3, #1140850688
 551 0262 03F5C043 		add	r3, r3, #24576
 552 0266 1946     		mov	r1, r3
 553 0268 7B69     		ldr	r3, [r7, #20]
 554 026a 9B00     		lsls	r3, r3, #2
 555 026c FA68     		ldr	r2, [r7, #12]
 556 026e 1344     		add	r3, r3, r2
 557 0270 1B68     		ldr	r3, [r3]
 558 0272 0B60     		str	r3, [r1]
 474:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 559              		.loc 1 474 0 discriminator 3
 560 0274 7B69     		ldr	r3, [r7, #20]
 561 0276 0133     		adds	r3, r3, #1
 562 0278 7B61     		str	r3, [r7, #20]
 563              	.L32:
 474:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 564              		.loc 1 474 0 is_stmt 0 discriminator 1
 565 027a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 566 027c 7B69     		ldr	r3, [r7, #20]
 567 027e 9A42     		cmp	r2, r3
 568 0280 E8DC     		bgt	.L33
 477:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 478:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 479:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 480:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next pointer.
 481:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 482:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + ui8Size % 2);
 569              		.loc 1 482 0 is_stmt 1
 570 0282 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 571 0284 03F00102 		and	r2, r3, #1
 572 0288 7B69     		ldr	r3, [r7, #20]
 573 028a 1344     		add	r3, r3, r2
 574 028c 9B00     		lsls	r3, r3, #2
 575 028e 1A46     		mov	r2, r3
 576 0290 3B69     		ldr	r3, [r7, #16]
 577 0292 1344     		add	r3, r3, r2
 578 0294 3B61     		str	r3, [r7, #16]
 483:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 484:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 485:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 486:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the second big number will be stored.
 487:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 488:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 579              		.loc 1 488 0
 580 0296 184A     		ldr	r2, .L36+8
 581 0298 3B69     		ldr	r3, [r7, #16]
 582 029a 9B08     		lsrs	r3, r3, #2
 583 029c 1360     		str	r3, [r2]
 489:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 490:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 491:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the second big number in PKA RAM.
 492:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 493:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8Size;  i++)
 584              		.loc 1 493 0
 585 029e 0023     		movs	r3, #0
 586 02a0 7B61     		str	r3, [r7, #20]
 587 02a2 12E0     		b	.L34
 588              	.L35:
 494:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 495:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum2[i];
 589              		.loc 1 495 0 discriminator 3
 590 02a4 7B69     		ldr	r3, [r7, #20]
 591 02a6 9B00     		lsls	r3, r3, #2
 592 02a8 1A46     		mov	r2, r3
 593 02aa 3B69     		ldr	r3, [r7, #16]
 594 02ac 1344     		add	r3, r3, r2
 595 02ae 03F18843 		add	r3, r3, #1140850688
 596 02b2 03F5C043 		add	r3, r3, #24576
 597 02b6 1946     		mov	r1, r3
 598 02b8 7B69     		ldr	r3, [r7, #20]
 599 02ba 9B00     		lsls	r3, r3, #2
 600 02bc BA68     		ldr	r2, [r7, #8]
 601 02be 1344     		add	r3, r3, r2
 602 02c0 1B68     		ldr	r3, [r3]
 603 02c2 0B60     		str	r3, [r1]
 493:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 604              		.loc 1 493 0 discriminator 3
 605 02c4 7B69     		ldr	r3, [r7, #20]
 606 02c6 0133     		adds	r3, r3, #1
 607 02c8 7B61     		str	r3, [r7, #20]
 608              	.L34:
 493:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 609              		.loc 1 493 0 is_stmt 0 discriminator 1
 610 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 611 02cc 7B69     		ldr	r3, [r7, #20]
 612 02ce 9A42     		cmp	r2, r3
 613 02d0 E8DC     		bgt	.L35
 496:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 497:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 498:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 499:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load length registers in 32 bit word size.
 500:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 501:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8Size;
 614              		.loc 1 501 0 is_stmt 1
 615 02d2 0A4A     		ldr	r2, .L36+12
 616 02d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 617 02d6 1360     		str	r3, [r2]
 502:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 503:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 504:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Set the PKA Function register for the Compare operation
 505:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // and start the operation.
 506:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 507:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_COMPARE);
 618              		.loc 1 507 0
 619 02d8 054B     		ldr	r3, .L36
 620 02da 4FF40442 		mov	r2, #33792
 621 02de 1A60     		str	r2, [r3]
 508:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 509:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 622              		.loc 1 509 0
 623 02e0 0023     		movs	r3, #0
 624              	.L31:
 510:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 625              		.loc 1 510 0
 626 02e2 1846     		mov	r0, r3
 627 02e4 1C37     		adds	r7, r7, #28
 628              		.cfi_def_cfa_offset 4
 629 02e6 BD46     		mov	sp, r7
 630              		.cfi_def_cfa_register 13
 631              		@ sp needed
 632 02e8 5DF8047B 		ldr	r7, [sp], #4
 633              		.cfi_restore 7
 634              		.cfi_def_cfa_offset 0
 635 02ec 7047     		bx	lr
 636              	.L37:
 637 02ee 00BF     		.align	2
 638              	.L36:
 639 02f0 1C400044 		.word	1140867100
 640 02f4 00400044 		.word	1140867072
 641 02f8 04400044 		.word	1140867076
 642 02fc 10400044 		.word	1140867088
 643              		.cfi_endproc
 644              	.LFE8:
 646              		.align	2
 647              		.global	PKABigNumCmpGetResult
 648              		.thumb
 649              		.thumb_func
 651              	PKABigNumCmpGetResult:
 652              	.LFB9:
 511:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 512:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 513:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 514:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Gets the result of the comparison operation of two big numbers.
 515:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 516:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function provides the results of the comparison of two big numbers
 517:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! which was started using the \sa PKABigNumCmpStart().
 518:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 519:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns:
 520:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG if the operation is in progress.
 521:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the two big numbers are equal.
 522:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_A_GR_B  if the first number is greater than the second.
 523:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_A_LT_B if the first number is less than the second.
 524:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 525:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 526:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 527:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumCmpGetResult(void)
 528:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 653              		.loc 1 528 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 8
 656              		@ frame_needed = 1, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658 0300 80B4     		push	{r7}
 659              		.cfi_def_cfa_offset 4
 660              		.cfi_offset 7, -4
 661 0302 83B0     		sub	sp, sp, #12
 662              		.cfi_def_cfa_offset 16
 663 0304 00AF     		add	r7, sp, #0
 664              		.cfi_def_cfa_register 7
 529:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     tPKAStatus status;
 530:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 531:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 532:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // verify that the operation is complete.
 533:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 534:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 665              		.loc 1 534 0
 666 0306 124B     		ldr	r3, .L47
 667 0308 1B68     		ldr	r3, [r3]
 668 030a 03F40043 		and	r3, r3, #32768
 669 030e 002B     		cmp	r3, #0
 670 0310 03D0     		beq	.L39
 535:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 536:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         status = PKA_STATUS_OPERATION_INPRG;
 671              		.loc 1 536 0
 672 0312 0723     		movs	r3, #7
 673 0314 FB71     		strb	r3, [r7, #7]
 537:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (status);
 674              		.loc 1 537 0
 675 0316 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 676 0318 14E0     		b	.L40
 677              	.L39:
 538:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 539:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 540:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 541:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check the COMPARE register.
 542:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 543:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     switch(HWREG(PKA_COMPARE))
 678              		.loc 1 543 0
 679 031a 0E4B     		ldr	r3, .L47+4
 680 031c 1B68     		ldr	r3, [r3]
 681 031e 022B     		cmp	r3, #2
 682 0320 09D0     		beq	.L42
 683 0322 042B     		cmp	r3, #4
 684 0324 04D0     		beq	.L43
 685 0326 012B     		cmp	r3, #1
 686 0328 08D1     		bne	.L46
 544:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 545:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         case PKA_COMPARE_A_EQUALS_B:
 546:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             status = PKA_STATUS_SUCCESS;
 687              		.loc 1 546 0
 688 032a 0023     		movs	r3, #0
 689 032c FB71     		strb	r3, [r7, #7]
 547:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             break;
 690              		.loc 1 547 0
 691 032e 08E0     		b	.L45
 692              	.L43:
 548:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 549:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         case PKA_COMPARE_A_GREATER_THAN_B:
 550:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             status = PKA_STATUS_A_GR_B;
 693              		.loc 1 550 0
 694 0330 0523     		movs	r3, #5
 695 0332 FB71     		strb	r3, [r7, #7]
 551:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             break;
 696              		.loc 1 551 0
 697 0334 05E0     		b	.L45
 698              	.L42:
 552:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 553:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         case PKA_COMPARE_A_LESS_THAN_B:
 554:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             status = PKA_STATUS_A_LT_B;
 699              		.loc 1 554 0
 700 0336 0623     		movs	r3, #6
 701 0338 FB71     		strb	r3, [r7, #7]
 555:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             break;
 702              		.loc 1 555 0
 703 033a 02E0     		b	.L45
 704              	.L46:
 556:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 557:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         default:
 558:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             status = PKA_STATUS_FAILURE;
 705              		.loc 1 558 0
 706 033c 0123     		movs	r3, #1
 707 033e FB71     		strb	r3, [r7, #7]
 559:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             break;
 708              		.loc 1 559 0
 709 0340 00BF     		nop
 710              	.L45:
 560:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 561:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 562:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (status);
 711              		.loc 1 562 0
 712 0342 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 713              	.L40:
 563:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 714              		.loc 1 563 0
 715 0344 1846     		mov	r0, r3
 716 0346 0C37     		adds	r7, r7, #12
 717              		.cfi_def_cfa_offset 4
 718 0348 BD46     		mov	sp, r7
 719              		.cfi_def_cfa_register 13
 720              		@ sp needed
 721 034a 5DF8047B 		ldr	r7, [sp], #4
 722              		.cfi_restore 7
 723              		.cfi_def_cfa_offset 0
 724 034e 7047     		bx	lr
 725              	.L48:
 726              		.align	2
 727              	.L47:
 728 0350 1C400044 		.word	1140867100
 729 0354 20400044 		.word	1140867104
 730              		.cfi_endproc
 731              	.LFE9:
 733              		.align	2
 734              		.global	PKABigNumInvModStart
 735              		.thumb
 736              		.thumb_func
 738              	PKABigNumInvModStart:
 739              	.LFB10:
 564:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 565:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 566:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 567:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Starts the big number inverse modulo operation.
 568:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 569:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32BNum is the pointer to the buffer containing the big number
 570:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! (dividend).
 571:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8BNSize is the size of the \e pui32BNum in 32 bit word.
 572:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32Modulus is the pointer to the buffer containing the divisor.
 573:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8Size is the size of the divisor in 32 bit word.
 574:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 575:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! which will be set by this function.
 576:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 577:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function starts the the inverse modulo operation on \e pui32BNum
 578:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! using the divisor \e pui32Modulus.
 579:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 580:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!\return Returns: 
 581:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 582:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 583:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! some other operation.
 584:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 585:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 586:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 587:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumInvModStart(uint32_t* pui32BNum, uint8_t ui8BNSize,
 588:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                      uint32_t* pui32Modulus, uint8_t ui8Size,
 589:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                      uint32_t* pui32ResultVector)
 590:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 740              		.loc 1 590 0
 741              		.cfi_startproc
 742              		@ args = 4, pretend = 0, frame = 24
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744              		@ link register save eliminated.
 745 0358 80B4     		push	{r7}
 746              		.cfi_def_cfa_offset 4
 747              		.cfi_offset 7, -4
 748 035a 87B0     		sub	sp, sp, #28
 749              		.cfi_def_cfa_offset 32
 750 035c 00AF     		add	r7, sp, #0
 751              		.cfi_def_cfa_register 7
 752 035e F860     		str	r0, [r7, #12]
 753 0360 7A60     		str	r2, [r7, #4]
 754 0362 1A46     		mov	r2, r3
 755 0364 0B46     		mov	r3, r1
 756 0366 FB72     		strb	r3, [r7, #11]
 757 0368 1346     		mov	r3, r2
 758 036a BB72     		strb	r3, [r7, #10]
 591:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t offset;
 592:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
 593:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 594:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 595:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check the arguments.
 596:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 597:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32BNum);
 598:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32Modulus);
 599:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 600:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 601:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset = 0;
 759              		.loc 1 601 0
 760 036c 0023     		movs	r3, #0
 761 036e 3B61     		str	r3, [r7, #16]
 602:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 603:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 604:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure no operation is in progress.
 605:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 606:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 762              		.loc 1 606 0
 763 0370 394B     		ldr	r3, .L56
 764 0372 1B68     		ldr	r3, [r3]
 765 0374 03F40043 		and	r3, r3, #32768
 766 0378 002B     		cmp	r3, #0
 767 037a 01D0     		beq	.L50
 607:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 608:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 768              		.loc 1 608 0
 769 037c 0723     		movs	r3, #7
 770 037e 65E0     		b	.L51
 771              	.L50:
 609:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 610:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 611:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 612:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 613:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the number will be stored.
 614:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 615:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >>2;
 772              		.loc 1 615 0
 773 0380 364A     		ldr	r2, .L56+4
 774 0382 3B69     		ldr	r3, [r7, #16]
 775 0384 9B08     		lsrs	r3, r3, #2
 776 0386 1360     		str	r3, [r2]
 616:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 617:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 618:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the \e pui32BNum number in PKA RAM.
 619:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 620:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8BNSize; i++)
 777              		.loc 1 620 0
 778 0388 0023     		movs	r3, #0
 779 038a 7B61     		str	r3, [r7, #20]
 780 038c 12E0     		b	.L52
 781              	.L53:
 621:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 622:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum[i];
 782              		.loc 1 622 0 discriminator 3
 783 038e 7B69     		ldr	r3, [r7, #20]
 784 0390 9B00     		lsls	r3, r3, #2
 785 0392 1A46     		mov	r2, r3
 786 0394 3B69     		ldr	r3, [r7, #16]
 787 0396 1344     		add	r3, r3, r2
 788 0398 03F18843 		add	r3, r3, #1140850688
 789 039c 03F5C043 		add	r3, r3, #24576
 790 03a0 1946     		mov	r1, r3
 791 03a2 7B69     		ldr	r3, [r7, #20]
 792 03a4 9B00     		lsls	r3, r3, #2
 793 03a6 FA68     		ldr	r2, [r7, #12]
 794 03a8 1344     		add	r3, r3, r2
 795 03aa 1B68     		ldr	r3, [r3]
 796 03ac 0B60     		str	r3, [r1]
 620:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 797              		.loc 1 620 0 discriminator 3
 798 03ae 7B69     		ldr	r3, [r7, #20]
 799 03b0 0133     		adds	r3, r3, #1
 800 03b2 7B61     		str	r3, [r7, #20]
 801              	.L52:
 620:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 802              		.loc 1 620 0 is_stmt 0 discriminator 1
 803 03b4 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 804 03b6 7B69     		ldr	r3, [r7, #20]
 805 03b8 9A42     		cmp	r2, r3
 806 03ba E8DC     		bgt	.L53
 623:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 624:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 625:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 626:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for next data.
 627:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 628:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + ui8BNSize % 2);
 807              		.loc 1 628 0 is_stmt 1
 808 03bc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 809 03be 03F00102 		and	r2, r3, #1
 810 03c2 7B69     		ldr	r3, [r7, #20]
 811 03c4 1344     		add	r3, r3, r2
 812 03c6 9B00     		lsls	r3, r3, #2
 813 03c8 1A46     		mov	r2, r3
 814 03ca 3B69     		ldr	r3, [r7, #16]
 815 03cc 1344     		add	r3, r3, r2
 816 03ce 3B61     		str	r3, [r7, #16]
 629:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 630:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 631:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 632:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the modulus will be stored.
 633:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 634:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 817              		.loc 1 634 0
 818 03d0 234A     		ldr	r2, .L56+8
 819 03d2 3B69     		ldr	r3, [r7, #16]
 820 03d4 9B08     		lsrs	r3, r3, #2
 821 03d6 1360     		str	r3, [r2]
 635:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 636:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 637:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the \e pui32Modulus divisor in PKA RAM.
 638:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 639:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8Size;  i++)
 822              		.loc 1 639 0
 823 03d8 0023     		movs	r3, #0
 824 03da 7B61     		str	r3, [r7, #20]
 825 03dc 12E0     		b	.L54
 826              	.L55:
 640:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 641:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32Modulus[i];
 827              		.loc 1 641 0 discriminator 3
 828 03de 7B69     		ldr	r3, [r7, #20]
 829 03e0 9B00     		lsls	r3, r3, #2
 830 03e2 1A46     		mov	r2, r3
 831 03e4 3B69     		ldr	r3, [r7, #16]
 832 03e6 1344     		add	r3, r3, r2
 833 03e8 03F18843 		add	r3, r3, #1140850688
 834 03ec 03F5C043 		add	r3, r3, #24576
 835 03f0 1946     		mov	r1, r3
 836 03f2 7B69     		ldr	r3, [r7, #20]
 837 03f4 9B00     		lsls	r3, r3, #2
 838 03f6 7A68     		ldr	r2, [r7, #4]
 839 03f8 1344     		add	r3, r3, r2
 840 03fa 1B68     		ldr	r3, [r3]
 841 03fc 0B60     		str	r3, [r1]
 639:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 842              		.loc 1 639 0 discriminator 3
 843 03fe 7B69     		ldr	r3, [r7, #20]
 844 0400 0133     		adds	r3, r3, #1
 845 0402 7B61     		str	r3, [r7, #20]
 846              	.L54:
 639:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 847              		.loc 1 639 0 is_stmt 0 discriminator 1
 848 0404 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 849 0406 7B69     		ldr	r3, [r7, #20]
 850 0408 9A42     		cmp	r2, r3
 851 040a E8DC     		bgt	.L55
 642:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 643:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 644:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 645:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for result data.
 646:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 647:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + ui8Size % 2);
 852              		.loc 1 647 0 is_stmt 1
 853 040c BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 854 040e 03F00102 		and	r2, r3, #1
 855 0412 7B69     		ldr	r3, [r7, #20]
 856 0414 1344     		add	r3, r3, r2
 857 0416 9B00     		lsls	r3, r3, #2
 858 0418 1A46     		mov	r2, r3
 859 041a 3B69     		ldr	r3, [r7, #16]
 860 041c 1344     		add	r3, r3, r2
 861 041e 3B61     		str	r3, [r7, #16]
 648:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 649:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 650:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the result vector address location.
 651:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 652:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 862              		.loc 1 652 0
 863 0420 3B69     		ldr	r3, [r7, #16]
 864 0422 03F18843 		add	r3, r3, #1140850688
 865 0426 03F5C043 		add	r3, r3, #24576
 866 042a 3A6A     		ldr	r2, [r7, #32]
 867 042c 1360     		str	r3, [r2]
 653:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 654:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 655:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
 656:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 657:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_DPTR) ) = offset >> 2;
 868              		.loc 1 657 0
 869 042e 0D4A     		ldr	r2, .L56+12
 870 0430 3B69     		ldr	r3, [r7, #16]
 871 0432 9B08     		lsrs	r3, r3, #2
 872 0434 1360     		str	r3, [r2]
 658:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 659:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 660:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the respective length registers.
 661:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 662:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BNSize;
 873              		.loc 1 662 0
 874 0436 0C4A     		ldr	r2, .L56+16
 875 0438 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 876 043a 1360     		str	r3, [r2]
 663:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8Size;
 877              		.loc 1 663 0
 878 043c 0B4A     		ldr	r2, .L56+20
 879 043e BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 880 0440 1360     		str	r3, [r2]
 664:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 665:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 666:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // set the PKA function to InvMod operation and the start the operation.
 667:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 668:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000F000;
 881              		.loc 1 668 0
 882 0442 054B     		ldr	r3, .L56
 883 0444 4FF47042 		mov	r2, #61440
 884 0448 1A60     		str	r2, [r3]
 669:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 670:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 885              		.loc 1 670 0
 886 044a 0023     		movs	r3, #0
 887              	.L51:
 671:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 888              		.loc 1 671 0
 889 044c 1846     		mov	r0, r3
 890 044e 1C37     		adds	r7, r7, #28
 891              		.cfi_def_cfa_offset 4
 892 0450 BD46     		mov	sp, r7
 893              		.cfi_def_cfa_register 13
 894              		@ sp needed
 895 0452 5DF8047B 		ldr	r7, [sp], #4
 896              		.cfi_restore 7
 897              		.cfi_def_cfa_offset 0
 898 0456 7047     		bx	lr
 899              	.L57:
 900              		.align	2
 901              	.L56:
 902 0458 1C400044 		.word	1140867100
 903 045c 00400044 		.word	1140867072
 904 0460 04400044 		.word	1140867076
 905 0464 0C400044 		.word	1140867084
 906 0468 10400044 		.word	1140867088
 907 046c 14400044 		.word	1140867092
 908              		.cfi_endproc
 909              	.LFE10:
 911              		.align	2
 912              		.global	PKABigNumInvModGetResult
 913              		.thumb
 914              		.thumb_func
 916              	PKABigNumInvModGetResult:
 917              	.LFB11:
 672:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 673:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 674:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 675:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Gets the result of the big number inverse modulo operation.
 676:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 677:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to be
 678:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! stored.
 679:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8Size is the size of the provided buffer in 32 bit ui8Size
 680:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! word.
 681:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 682:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! was provided by the start function \sa PKABigNumInvModStart().
 683:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 684:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function gets the result of the big number inverse modulo operation
 685:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! previously started using the function \sa PKABigNumInvModStart().
 686:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 687:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns:
 688:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
 689:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
 690:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the operation.
 691:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 692:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
 693:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! then the result. 
 694:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 695:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 696:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 697:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumInvModGetResult(uint32_t* pui32ResultBuf, uint8_t ui8Size,
 698:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                          uint32_t ui32ResVectorLoc)
 699:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 918              		.loc 1 699 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 32
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922              		@ link register save eliminated.
 923 0470 80B4     		push	{r7}
 924              		.cfi_def_cfa_offset 4
 925              		.cfi_offset 7, -4
 926 0472 89B0     		sub	sp, sp, #36
 927              		.cfi_def_cfa_offset 40
 928 0474 00AF     		add	r7, sp, #0
 929              		.cfi_def_cfa_register 7
 930 0476 F860     		str	r0, [r7, #12]
 931 0478 0B46     		mov	r3, r1
 932 047a 7A60     		str	r2, [r7, #4]
 933 047c FB72     		strb	r3, [r7, #11]
 700:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t regMSWVal;
 701:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t len;
 702:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
 703:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 704:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 705:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check the arguments.
 706:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 707:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 708:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 709:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 710:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 711:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 712:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Verify that the operation is complete.
 713:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 714:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 934              		.loc 1 714 0
 935 047e 204B     		ldr	r3, .L65
 936 0480 1B68     		ldr	r3, [r3]
 937 0482 03F40043 		and	r3, r3, #32768
 938 0486 002B     		cmp	r3, #0
 939 0488 01D0     		beq	.L59
 715:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 716:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 940              		.loc 1 716 0
 941 048a 0723     		movs	r3, #7
 942 048c 31E0     		b	.L60
 943              	.L59:
 717:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 718:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 719:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 720:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Get the MSW register value.
 721:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 722:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 944              		.loc 1 722 0
 945 048e 1D4B     		ldr	r3, .L65+4
 946 0490 1B68     		ldr	r3, [r3]
 947 0492 BB61     		str	r3, [r7, #24]
 723:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 724:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 725:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 726:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 727:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 948              		.loc 1 727 0
 949 0494 BB69     		ldr	r3, [r7, #24]
 950 0496 03F40043 		and	r3, r3, #32768
 951 049a 002B     		cmp	r3, #0
 952 049c 01D0     		beq	.L61
 728:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 729:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 953              		.loc 1 729 0
 954 049e 0423     		movs	r3, #4
 955 04a0 27E0     		b	.L60
 956              	.L61:
 730:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 731:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 732:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 733:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Get the length of the result
 734:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 735:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 957              		.loc 1 735 0
 958 04a2 BB69     		ldr	r3, [r7, #24]
 959 04a4 C3F30A02 		ubfx	r2, r3, #0, #11
 736:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 960              		.loc 1 736 0
 961 04a8 7B68     		ldr	r3, [r7, #4]
 962 04aa 03F13C43 		add	r3, r3, #-1140850688
 963 04ae A3F5C043 		sub	r3, r3, #24576
 964 04b2 9B08     		lsrs	r3, r3, #2
 735:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 965              		.loc 1 735 0
 966 04b4 D31A     		subs	r3, r2, r3
 967 04b6 0133     		adds	r3, r3, #1
 968 04b8 7B61     		str	r3, [r7, #20]
 737:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 738:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 739:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check if the provided buffer length is adequate to store the result
 740:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // data.
 741:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 742:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(ui8Size < len)
 969              		.loc 1 742 0
 970 04ba FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 971 04bc 7B69     		ldr	r3, [r7, #20]
 972 04be 9A42     		cmp	r2, r3
 973 04c0 01D2     		bcs	.L62
 743:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 744:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 974              		.loc 1 744 0
 975 04c2 0323     		movs	r3, #3
 976 04c4 15E0     		b	.L60
 977              	.L62:
 745:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 746:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 747:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 748:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the result from vector C into the \e pui32ResultBuf.
 749:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < len; i++)
 978              		.loc 1 749 0
 979 04c6 0023     		movs	r3, #0
 980 04c8 FB61     		str	r3, [r7, #28]
 981 04ca 0DE0     		b	.L63
 982              	.L64:
 750:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 751:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 983              		.loc 1 751 0 discriminator 3
 984 04cc FB69     		ldr	r3, [r7, #28]
 985 04ce 9B00     		lsls	r3, r3, #2
 986 04d0 FA68     		ldr	r2, [r7, #12]
 987 04d2 1344     		add	r3, r3, r2
 988 04d4 FA69     		ldr	r2, [r7, #28]
 989 04d6 9200     		lsls	r2, r2, #2
 990 04d8 1146     		mov	r1, r2
 991 04da 7A68     		ldr	r2, [r7, #4]
 992 04dc 0A44     		add	r2, r2, r1
 993 04de 1268     		ldr	r2, [r2]
 994 04e0 1A60     		str	r2, [r3]
 749:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 995              		.loc 1 749 0 discriminator 3
 996 04e2 FB69     		ldr	r3, [r7, #28]
 997 04e4 0133     		adds	r3, r3, #1
 998 04e6 FB61     		str	r3, [r7, #28]
 999              	.L63:
 749:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1000              		.loc 1 749 0 is_stmt 0 discriminator 1
 1001 04e8 FA69     		ldr	r2, [r7, #28]
 1002 04ea 7B69     		ldr	r3, [r7, #20]
 1003 04ec 9A42     		cmp	r2, r3
 1004 04ee EDD3     		bcc	.L64
 752:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 753:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 754:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1005              		.loc 1 754 0 is_stmt 1
 1006 04f0 0023     		movs	r3, #0
 1007              	.L60:
 755:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 1008              		.loc 1 755 0
 1009 04f2 1846     		mov	r0, r3
 1010 04f4 2437     		adds	r7, r7, #36
 1011              		.cfi_def_cfa_offset 4
 1012 04f6 BD46     		mov	sp, r7
 1013              		.cfi_def_cfa_register 13
 1014              		@ sp needed
 1015 04f8 5DF8047B 		ldr	r7, [sp], #4
 1016              		.cfi_restore 7
 1017              		.cfi_def_cfa_offset 0
 1018 04fc 7047     		bx	lr
 1019              	.L66:
 1020 04fe 00BF     		.align	2
 1021              	.L65:
 1022 0500 1C400044 		.word	1140867100
 1023 0504 24400044 		.word	1140867108
 1024              		.cfi_endproc
 1025              	.LFE11:
 1027              		.align	2
 1028              		.global	PKABigNumMultiplyStart
 1029              		.thumb
 1030              		.thumb_func
 1032              	PKABigNumMultiplyStart:
 1033              	.LFB12:
 756:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 757:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 758:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 759:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Starts the big number multiplication.
 760:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 761:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32Xplicand is the pointer to the buffer containing the big
 762:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! number multiplicand.
 763:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8XplicandSize is the size of the multiplicand in 32-bit word.
 764:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32Xplier is the pointer to the buffer containing the big
 765:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! number multiplier.
 766:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8XplierSize is the size of the multiplier in 32-bit word.
 767:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 768:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! which will be set by this function.
 769:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 770:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function starts the multiplication of the two big numbers.
 771:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 772:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!\return Returns: 
 773:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 774:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 775:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! some other operation.
 776:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 777:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 778:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 779:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumMultiplyStart(uint32_t* pui32Xplicand, uint8_t ui8XplicandSize,
 780:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                        uint32_t* pui32Xplier, uint8_t ui8XplierSize,
 781:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                        uint32_t* pui32ResultVector)
 782:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 1034              		.loc 1 782 0
 1035              		.cfi_startproc
 1036              		@ args = 4, pretend = 0, frame = 24
 1037              		@ frame_needed = 1, uses_anonymous_args = 0
 1038              		@ link register save eliminated.
 1039 0508 80B4     		push	{r7}
 1040              		.cfi_def_cfa_offset 4
 1041              		.cfi_offset 7, -4
 1042 050a 87B0     		sub	sp, sp, #28
 1043              		.cfi_def_cfa_offset 32
 1044 050c 00AF     		add	r7, sp, #0
 1045              		.cfi_def_cfa_register 7
 1046 050e F860     		str	r0, [r7, #12]
 1047 0510 7A60     		str	r2, [r7, #4]
 1048 0512 1A46     		mov	r2, r3
 1049 0514 0B46     		mov	r3, r1
 1050 0516 FB72     		strb	r3, [r7, #11]
 1051 0518 1346     		mov	r3, r2
 1052 051a BB72     		strb	r3, [r7, #10]
 783:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t offset;
 784:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
 785:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 786:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 787:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for the arguments.
 788:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 789:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32Xplicand);
 790:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32Xplier);
 791:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 792:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 793:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset = 0;
 1053              		.loc 1 793 0
 1054 051c 0023     		movs	r3, #0
 1055 051e 3B61     		str	r3, [r7, #16]
 794:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 795:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 796:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure no operation is in progress.
 797:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 798:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1056              		.loc 1 798 0
 1057 0520 394B     		ldr	r3, .L74
 1058 0522 1B68     		ldr	r3, [r3]
 1059 0524 03F40043 		and	r3, r3, #32768
 1060 0528 002B     		cmp	r3, #0
 1061 052a 01D0     		beq	.L68
 799:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 800:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1062              		.loc 1 800 0
 1063 052c 0723     		movs	r3, #7
 1064 052e 65E0     		b	.L69
 1065              	.L68:
 801:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 802:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 803:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 804:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 805:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the multiplicand will be stored.
 806:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 807:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 1066              		.loc 1 807 0
 1067 0530 364A     		ldr	r2, .L74+4
 1068 0532 3B69     		ldr	r3, [r7, #16]
 1069 0534 9B08     		lsrs	r3, r3, #2
 1070 0536 1360     		str	r3, [r2]
 808:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 809:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 810:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the multiplicand in PKA RAM.
 811:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 812:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8XplicandSize; i++)
 1071              		.loc 1 812 0
 1072 0538 0023     		movs	r3, #0
 1073 053a 7B61     		str	r3, [r7, #20]
 1074 053c 12E0     		b	.L70
 1075              	.L71:
 813:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 814:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Xplicand;
 1076              		.loc 1 814 0 discriminator 3
 1077 053e 7B69     		ldr	r3, [r7, #20]
 1078 0540 9B00     		lsls	r3, r3, #2
 1079 0542 1A46     		mov	r2, r3
 1080 0544 3B69     		ldr	r3, [r7, #16]
 1081 0546 1344     		add	r3, r3, r2
 1082 0548 03F18843 		add	r3, r3, #1140850688
 1083 054c 03F5C043 		add	r3, r3, #24576
 1084 0550 1A46     		mov	r2, r3
 1085 0552 FB68     		ldr	r3, [r7, #12]
 1086 0554 1B68     		ldr	r3, [r3]
 1087 0556 1360     		str	r3, [r2]
 815:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         pui32Xplicand++;
 1088              		.loc 1 815 0 discriminator 3
 1089 0558 FB68     		ldr	r3, [r7, #12]
 1090 055a 0433     		adds	r3, r3, #4
 1091 055c FB60     		str	r3, [r7, #12]
 812:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1092              		.loc 1 812 0 discriminator 3
 1093 055e 7B69     		ldr	r3, [r7, #20]
 1094 0560 0133     		adds	r3, r3, #1
 1095 0562 7B61     		str	r3, [r7, #20]
 1096              	.L70:
 812:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1097              		.loc 1 812 0 is_stmt 0 discriminator 1
 1098 0564 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1099 0566 7B69     		ldr	r3, [r7, #20]
 1100 0568 9A42     		cmp	r2, r3
 1101 056a E8DC     		bgt	.L71
 816:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 817:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 818:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 819:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for the next data.
 820:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 821:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + (ui8XplicandSize % 2));
 1102              		.loc 1 821 0 is_stmt 1
 1103 056c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1104 056e 03F00102 		and	r2, r3, #1
 1105 0572 7B69     		ldr	r3, [r7, #20]
 1106 0574 1344     		add	r3, r3, r2
 1107 0576 9B00     		lsls	r3, r3, #2
 1108 0578 1A46     		mov	r2, r3
 1109 057a 3B69     		ldr	r3, [r7, #16]
 1110 057c 1344     		add	r3, r3, r2
 1111 057e 3B61     		str	r3, [r7, #16]
 822:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 823:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 824:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 825:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the multiplier will be stored.
 826:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 827:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 1112              		.loc 1 827 0
 1113 0580 234A     		ldr	r2, .L74+8
 1114 0582 3B69     		ldr	r3, [r7, #16]
 1115 0584 9B08     		lsrs	r3, r3, #2
 1116 0586 1360     		str	r3, [r2]
 828:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 829:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 830:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the multiplier in PKA RAM.
 831:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 832:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8XplierSize; i++)
 1117              		.loc 1 832 0
 1118 0588 0023     		movs	r3, #0
 1119 058a 7B61     		str	r3, [r7, #20]
 1120 058c 12E0     		b	.L72
 1121              	.L73:
 833:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 834:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = *pui32Xplier;
 1122              		.loc 1 834 0 discriminator 3
 1123 058e 7B69     		ldr	r3, [r7, #20]
 1124 0590 9B00     		lsls	r3, r3, #2
 1125 0592 1A46     		mov	r2, r3
 1126 0594 3B69     		ldr	r3, [r7, #16]
 1127 0596 1344     		add	r3, r3, r2
 1128 0598 03F18843 		add	r3, r3, #1140850688
 1129 059c 03F5C043 		add	r3, r3, #24576
 1130 05a0 1A46     		mov	r2, r3
 1131 05a2 7B68     		ldr	r3, [r7, #4]
 1132 05a4 1B68     		ldr	r3, [r3]
 1133 05a6 1360     		str	r3, [r2]
 835:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         pui32Xplier++;
 1134              		.loc 1 835 0 discriminator 3
 1135 05a8 7B68     		ldr	r3, [r7, #4]
 1136 05aa 0433     		adds	r3, r3, #4
 1137 05ac 7B60     		str	r3, [r7, #4]
 832:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1138              		.loc 1 832 0 discriminator 3
 1139 05ae 7B69     		ldr	r3, [r7, #20]
 1140 05b0 0133     		adds	r3, r3, #1
 1141 05b2 7B61     		str	r3, [r7, #20]
 1142              	.L72:
 832:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1143              		.loc 1 832 0 is_stmt 0 discriminator 1
 1144 05b4 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1145 05b6 7B69     		ldr	r3, [r7, #20]
 1146 05b8 9A42     		cmp	r2, r3
 1147 05ba E8DC     		bgt	.L73
 836:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 837:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 838:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 839:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for the next data.
 840:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 841:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + (ui8XplierSize % 2));
 1148              		.loc 1 841 0 is_stmt 1
 1149 05bc BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1150 05be 03F00102 		and	r2, r3, #1
 1151 05c2 7B69     		ldr	r3, [r7, #20]
 1152 05c4 1344     		add	r3, r3, r2
 1153 05c6 9B00     		lsls	r3, r3, #2
 1154 05c8 1A46     		mov	r2, r3
 1155 05ca 3B69     		ldr	r3, [r7, #16]
 1156 05cc 1344     		add	r3, r3, r2
 1157 05ce 3B61     		str	r3, [r7, #16]
 842:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 843:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 844:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the result vector address location.
 845:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 846:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 1158              		.loc 1 846 0
 1159 05d0 3B69     		ldr	r3, [r7, #16]
 1160 05d2 03F18843 		add	r3, r3, #1140850688
 1161 05d6 03F5C043 		add	r3, r3, #24576
 1162 05da 3A6A     		ldr	r2, [r7, #32]
 1163 05dc 1360     		str	r3, [r2]
 847:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 848:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 849:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM.
 850:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 851:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 1164              		.loc 1 851 0
 1165 05de 0D4A     		ldr	r2, .L74+12
 1166 05e0 3B69     		ldr	r3, [r7, #16]
 1167 05e2 9B08     		lsrs	r3, r3, #2
 1168 05e4 1360     		str	r3, [r2]
 852:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 853:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 854:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the respective length registers.
 855:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 856:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8XplicandSize;
 1169              		.loc 1 856 0
 1170 05e6 0C4A     		ldr	r2, .L74+16
 1171 05e8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1172 05ea 1360     		str	r3, [r2]
 857:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8XplierSize;
 1173              		.loc 1 857 0
 1174 05ec 0B4A     		ldr	r2, .L74+20
 1175 05ee BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1176 05f0 1360     		str	r3, [r2]
 858:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 859:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 860:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Set the PKA function to the multiplication and start it.
 861:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 862:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_MULTIPLY);
 1177              		.loc 1 862 0
 1178 05f2 054B     		ldr	r3, .L74
 1179 05f4 48F20102 		movw	r2, #32769
 1180 05f8 1A60     		str	r2, [r3]
 863:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 864:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1181              		.loc 1 864 0
 1182 05fa 0023     		movs	r3, #0
 1183              	.L69:
 865:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 1184              		.loc 1 865 0
 1185 05fc 1846     		mov	r0, r3
 1186 05fe 1C37     		adds	r7, r7, #28
 1187              		.cfi_def_cfa_offset 4
 1188 0600 BD46     		mov	sp, r7
 1189              		.cfi_def_cfa_register 13
 1190              		@ sp needed
 1191 0602 5DF8047B 		ldr	r7, [sp], #4
 1192              		.cfi_restore 7
 1193              		.cfi_def_cfa_offset 0
 1194 0606 7047     		bx	lr
 1195              	.L75:
 1196              		.align	2
 1197              	.L74:
 1198 0608 1C400044 		.word	1140867100
 1199 060c 00400044 		.word	1140867072
 1200 0610 04400044 		.word	1140867076
 1201 0614 08400044 		.word	1140867080
 1202 0618 10400044 		.word	1140867088
 1203 061c 14400044 		.word	1140867092
 1204              		.cfi_endproc
 1205              	.LFE12:
 1207              		.align	2
 1208              		.global	PKABigNumMultGetResult
 1209              		.thumb
 1210              		.thumb_func
 1212              	PKABigNumMultGetResult:
 1213              	.LFB13:
 866:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 867:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 868:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 869:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Gets the results of the big number multiplication.
 870:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 871:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to be
 872:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! stored.
 873:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32Len is the address of the variable containing the length of the
 874:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! buffer.  After the operation, the actual length of the resultant is stored
 875:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! at this address.
 876:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 877:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! was provided by the start function \sa PKABigNumMultiplyStart().
 878:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 879:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function gets the result of the multiplication of two big numbers
 880:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! operation previously started using the function \sa
 881:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! PKABigNumMultiplyStart().
 882:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 883:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns:
 884:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
 885:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
 886:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the operation.
 887:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 888:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
 889:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
 890:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! then the length of the result. 
 891:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 892:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 893:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 894:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumMultGetResult(uint32_t* pui32ResultBuf, uint32_t* pui32Len,
 895:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                        uint32_t ui32ResVectorLoc)
 896:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 1214              		.loc 1 896 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 32
 1217              		@ frame_needed = 1, uses_anonymous_args = 0
 1218              		@ link register save eliminated.
 1219 0620 80B4     		push	{r7}
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 7, -4
 1222 0622 89B0     		sub	sp, sp, #36
 1223              		.cfi_def_cfa_offset 40
 1224 0624 00AF     		add	r7, sp, #0
 1225              		.cfi_def_cfa_register 7
 1226 0626 F860     		str	r0, [r7, #12]
 1227 0628 B960     		str	r1, [r7, #8]
 1228 062a 7A60     		str	r2, [r7, #4]
 897:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t regMSWVal;
 898:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t len;
 899:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
 900:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 901:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 902:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for arguments.
 903:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 904:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 905:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32Len);
 906:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 907:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 908:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 909:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 910:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Verify that the operation is complete.
 911:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 912:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1229              		.loc 1 912 0
 1230 062c 224B     		ldr	r3, .L83
 1231 062e 1B68     		ldr	r3, [r3]
 1232 0630 03F40043 		and	r3, r3, #32768
 1233 0634 002B     		cmp	r3, #0
 1234 0636 01D0     		beq	.L77
 913:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 914:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1235              		.loc 1 914 0
 1236 0638 0723     		movs	r3, #7
 1237 063a 36E0     		b	.L78
 1238              	.L77:
 915:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 916:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 917:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 918:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Get the MSW register value.
 919:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 920:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 1239              		.loc 1 920 0
 1240 063c 1F4B     		ldr	r3, .L83+4
 1241 063e 1B68     		ldr	r3, [r3]
 1242 0640 BB61     		str	r3, [r7, #24]
 921:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 922:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 923:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 924:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 925:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1243              		.loc 1 925 0
 1244 0642 BB69     		ldr	r3, [r7, #24]
 1245 0644 03F40043 		and	r3, r3, #32768
 1246 0648 002B     		cmp	r3, #0
 1247 064a 01D0     		beq	.L79
 926:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 927:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 1248              		.loc 1 927 0
 1249 064c 0423     		movs	r3, #4
 1250 064e 2CE0     		b	.L78
 1251              	.L79:
 928:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 929:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 930:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 931:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Get the length of the result.
 932:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 933:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1252              		.loc 1 933 0
 1253 0650 BB69     		ldr	r3, [r7, #24]
 1254 0652 C3F30A02 		ubfx	r2, r3, #0, #11
 934:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1255              		.loc 1 934 0
 1256 0656 7B68     		ldr	r3, [r7, #4]
 1257 0658 03F13C43 		add	r3, r3, #-1140850688
 1258 065c A3F5C043 		sub	r3, r3, #24576
 1259 0660 9B08     		lsrs	r3, r3, #2
 933:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1260              		.loc 1 933 0
 1261 0662 D31A     		subs	r3, r2, r3
 1262 0664 0133     		adds	r3, r3, #1
 1263 0666 7B61     		str	r3, [r7, #20]
 935:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 936:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 937:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure that the length of the supplied result buffer is adequate
 938:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // to store the resultant.
 939:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 940:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(*pui32Len < len)
 1264              		.loc 1 940 0
 1265 0668 BB68     		ldr	r3, [r7, #8]
 1266 066a 1A68     		ldr	r2, [r3]
 1267 066c 7B69     		ldr	r3, [r7, #20]
 1268 066e 9A42     		cmp	r2, r3
 1269 0670 01D2     		bcs	.L80
 941:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 942:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1270              		.loc 1 942 0
 1271 0672 0323     		movs	r3, #3
 1272 0674 19E0     		b	.L78
 1273              	.L80:
 943:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 944:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 945:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 946:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the resultant length.
 947:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 948:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32Len = len;
 1274              		.loc 1 948 0
 1275 0676 BB68     		ldr	r3, [r7, #8]
 1276 0678 7A69     		ldr	r2, [r7, #20]
 1277 067a 1A60     		str	r2, [r3]
 949:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 950:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 951:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the result from vector C into the pResult.
 952:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 953:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < *pui32Len; i++)
 1278              		.loc 1 953 0
 1279 067c 0023     		movs	r3, #0
 1280 067e FB61     		str	r3, [r7, #28]
 1281 0680 0DE0     		b	.L81
 1282              	.L82:
 954:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 955:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 1283              		.loc 1 955 0 discriminator 3
 1284 0682 FB69     		ldr	r3, [r7, #28]
 1285 0684 9B00     		lsls	r3, r3, #2
 1286 0686 FA68     		ldr	r2, [r7, #12]
 1287 0688 1344     		add	r3, r3, r2
 1288 068a FA69     		ldr	r2, [r7, #28]
 1289 068c 9200     		lsls	r2, r2, #2
 1290 068e 1146     		mov	r1, r2
 1291 0690 7A68     		ldr	r2, [r7, #4]
 1292 0692 0A44     		add	r2, r2, r1
 1293 0694 1268     		ldr	r2, [r2]
 1294 0696 1A60     		str	r2, [r3]
 953:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1295              		.loc 1 953 0 discriminator 3
 1296 0698 FB69     		ldr	r3, [r7, #28]
 1297 069a 0133     		adds	r3, r3, #1
 1298 069c FB61     		str	r3, [r7, #28]
 1299              	.L81:
 953:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1300              		.loc 1 953 0 is_stmt 0 discriminator 1
 1301 069e FA69     		ldr	r2, [r7, #28]
 1302 06a0 BB68     		ldr	r3, [r7, #8]
 1303 06a2 1B68     		ldr	r3, [r3]
 1304 06a4 9A42     		cmp	r2, r3
 1305 06a6 ECD3     		bcc	.L82
 956:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
 957:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 958:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1306              		.loc 1 958 0 is_stmt 1
 1307 06a8 0023     		movs	r3, #0
 1308              	.L78:
 959:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 1309              		.loc 1 959 0
 1310 06aa 1846     		mov	r0, r3
 1311 06ac 2437     		adds	r7, r7, #36
 1312              		.cfi_def_cfa_offset 4
 1313 06ae BD46     		mov	sp, r7
 1314              		.cfi_def_cfa_register 13
 1315              		@ sp needed
 1316 06b0 5DF8047B 		ldr	r7, [sp], #4
 1317              		.cfi_restore 7
 1318              		.cfi_def_cfa_offset 0
 1319 06b4 7047     		bx	lr
 1320              	.L84:
 1321 06b6 00BF     		.align	2
 1322              	.L83:
 1323 06b8 1C400044 		.word	1140867100
 1324 06bc 24400044 		.word	1140867108
 1325              		.cfi_endproc
 1326              	.LFE13:
 1328              		.align	2
 1329              		.global	PKABigNumAddStart
 1330              		.thumb
 1331              		.thumb_func
 1333              	PKABigNumAddStart:
 1334              	.LFB14:
 960:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 961:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 962:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 963:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Starts the addition of two big number.
 964:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 965:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32BN1 is the pointer to the buffer containing the first
 966:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! big mumber.
 967:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8BN1Size is the size of the first big number in 32-bit word.
 968:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32BN2 is the pointer to the buffer containing the second
 969:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! big number.
 970:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui8BN2Size is the size of the second big number in 32-bit word.
 971:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 972:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! which will be set by this function.
 973:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 974:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function starts the addition of the two big numbers.
 975:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
 976:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!\return Returns: 
 977:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 978:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 979:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! some other operation.
 980:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
 981:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
 982:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
 983:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumAddStart(uint32_t* pui32BN1, uint8_t ui8BN1Size,
 984:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                   uint32_t* pui32BN2, uint8_t ui8BN2Size,
 985:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                   uint32_t* pui32ResultVector)
 986:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 1335              		.loc 1 986 0
 1336              		.cfi_startproc
 1337              		@ args = 4, pretend = 0, frame = 24
 1338              		@ frame_needed = 1, uses_anonymous_args = 0
 1339              		@ link register save eliminated.
 1340 06c0 80B4     		push	{r7}
 1341              		.cfi_def_cfa_offset 4
 1342              		.cfi_offset 7, -4
 1343 06c2 87B0     		sub	sp, sp, #28
 1344              		.cfi_def_cfa_offset 32
 1345 06c4 00AF     		add	r7, sp, #0
 1346              		.cfi_def_cfa_register 7
 1347 06c6 F860     		str	r0, [r7, #12]
 1348 06c8 7A60     		str	r2, [r7, #4]
 1349 06ca 1A46     		mov	r2, r3
 1350 06cc 0B46     		mov	r3, r1
 1351 06ce FB72     		strb	r3, [r7, #11]
 1352 06d0 1346     		mov	r3, r2
 1353 06d2 BB72     		strb	r3, [r7, #10]
 987:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t offset;
 988:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
 989:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 990:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 991:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for arguments.
 992:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
 993:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32BN1);
 994:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32BN2);
 995:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 996:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 997:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset = 0;
 1354              		.loc 1 997 0
 1355 06d4 0023     		movs	r3, #0
 1356 06d6 3B61     		str	r3, [r7, #16]
 998:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
 999:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1000:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure no operation is in progress.
1001:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1002:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1357              		.loc 1 1002 0
 1358 06d8 394B     		ldr	r3, .L92
 1359 06da 1B68     		ldr	r3, [r3]
 1360 06dc 03F40043 		and	r3, r3, #32768
 1361 06e0 002B     		cmp	r3, #0
 1362 06e2 01D0     		beq	.L86
1003:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1004:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1363              		.loc 1 1004 0
 1364 06e4 0723     		movs	r3, #7
 1365 06e6 65E0     		b	.L87
 1366              	.L86:
1005:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1006:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1007:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1008:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1009:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the big number 1 will be stored.
1010:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1011:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 1367              		.loc 1 1011 0
 1368 06e8 364A     		ldr	r2, .L92+4
 1369 06ea 3B69     		ldr	r3, [r7, #16]
 1370 06ec 9B08     		lsrs	r3, r3, #2
 1371 06ee 1360     		str	r3, [r2]
1012:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1013:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1014:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the big number 1 in PKA RAM.
1015:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1016:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8BN1Size; i++)
 1372              		.loc 1 1016 0
 1373 06f0 0023     		movs	r3, #0
 1374 06f2 7B61     		str	r3, [r7, #20]
 1375 06f4 12E0     		b	.L88
 1376              	.L89:
1017:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1018:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BN1[i];
 1377              		.loc 1 1018 0 discriminator 3
 1378 06f6 7B69     		ldr	r3, [r7, #20]
 1379 06f8 9B00     		lsls	r3, r3, #2
 1380 06fa 1A46     		mov	r2, r3
 1381 06fc 3B69     		ldr	r3, [r7, #16]
 1382 06fe 1344     		add	r3, r3, r2
 1383 0700 03F18843 		add	r3, r3, #1140850688
 1384 0704 03F5C043 		add	r3, r3, #24576
 1385 0708 1946     		mov	r1, r3
 1386 070a 7B69     		ldr	r3, [r7, #20]
 1387 070c 9B00     		lsls	r3, r3, #2
 1388 070e FA68     		ldr	r2, [r7, #12]
 1389 0710 1344     		add	r3, r3, r2
 1390 0712 1B68     		ldr	r3, [r3]
 1391 0714 0B60     		str	r3, [r1]
1016:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1392              		.loc 1 1016 0 discriminator 3
 1393 0716 7B69     		ldr	r3, [r7, #20]
 1394 0718 0133     		adds	r3, r3, #1
 1395 071a 7B61     		str	r3, [r7, #20]
 1396              	.L88:
1016:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1397              		.loc 1 1016 0 is_stmt 0 discriminator 1
 1398 071c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1399 071e 7B69     		ldr	r3, [r7, #20]
 1400 0720 9A42     		cmp	r2, r3
 1401 0722 E8DC     		bgt	.L89
1019:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1020:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1021:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1022:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1023:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1024:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + (ui8BN1Size % 2));
 1402              		.loc 1 1024 0 is_stmt 1
 1403 0724 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1404 0726 03F00102 		and	r2, r3, #1
 1405 072a 7B69     		ldr	r3, [r7, #20]
 1406 072c 1344     		add	r3, r3, r2
 1407 072e 9B00     		lsls	r3, r3, #2
 1408 0730 1A46     		mov	r2, r3
 1409 0732 3B69     		ldr	r3, [r7, #16]
 1410 0734 1344     		add	r3, r3, r2
 1411 0736 3B61     		str	r3, [r7, #16]
1025:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1026:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1027:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1028:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the big number 2 will be stored.
1029:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1030:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 1412              		.loc 1 1030 0
 1413 0738 234A     		ldr	r2, .L92+8
 1414 073a 3B69     		ldr	r3, [r7, #16]
 1415 073c 9B08     		lsrs	r3, r3, #2
 1416 073e 1360     		str	r3, [r2]
1031:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1032:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1033:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the big number 2 in PKA RAM.
1034:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1035:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ui8BN2Size; i++)
 1417              		.loc 1 1035 0
 1418 0740 0023     		movs	r3, #0
 1419 0742 7B61     		str	r3, [r7, #20]
 1420 0744 12E0     		b	.L90
 1421              	.L91:
1036:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1037:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BN2[i];
 1422              		.loc 1 1037 0 discriminator 3
 1423 0746 7B69     		ldr	r3, [r7, #20]
 1424 0748 9B00     		lsls	r3, r3, #2
 1425 074a 1A46     		mov	r2, r3
 1426 074c 3B69     		ldr	r3, [r7, #16]
 1427 074e 1344     		add	r3, r3, r2
 1428 0750 03F18843 		add	r3, r3, #1140850688
 1429 0754 03F5C043 		add	r3, r3, #24576
 1430 0758 1946     		mov	r1, r3
 1431 075a 7B69     		ldr	r3, [r7, #20]
 1432 075c 9B00     		lsls	r3, r3, #2
 1433 075e 7A68     		ldr	r2, [r7, #4]
 1434 0760 1344     		add	r3, r3, r2
 1435 0762 1B68     		ldr	r3, [r3]
 1436 0764 0B60     		str	r3, [r1]
1035:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1437              		.loc 1 1035 0 discriminator 3
 1438 0766 7B69     		ldr	r3, [r7, #20]
 1439 0768 0133     		adds	r3, r3, #1
 1440 076a 7B61     		str	r3, [r7, #20]
 1441              	.L90:
1035:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1442              		.loc 1 1035 0 is_stmt 0 discriminator 1
 1443 076c BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1444 076e 7B69     		ldr	r3, [r7, #20]
 1445 0770 9A42     		cmp	r2, r3
 1446 0772 E8DC     		bgt	.L91
1038:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1039:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1040:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1041:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1042:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1043:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + (ui8BN2Size % 2));
 1447              		.loc 1 1043 0 is_stmt 1
 1448 0774 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1449 0776 03F00102 		and	r2, r3, #1
 1450 077a 7B69     		ldr	r3, [r7, #20]
 1451 077c 1344     		add	r3, r3, r2
 1452 077e 9B00     		lsls	r3, r3, #2
 1453 0780 1A46     		mov	r2, r3
 1454 0782 3B69     		ldr	r3, [r7, #16]
 1455 0784 1344     		add	r3, r3, r2
 1456 0786 3B61     		str	r3, [r7, #16]
1044:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1045:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1046:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the result vector address location.
1047:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1048:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 1457              		.loc 1 1048 0
 1458 0788 3B69     		ldr	r3, [r7, #16]
 1459 078a 03F18843 		add	r3, r3, #1140850688
 1460 078e 03F5C043 		add	r3, r3, #24576
 1461 0792 3A6A     		ldr	r2, [r7, #32]
 1462 0794 1360     		str	r3, [r2]
1049:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1050:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1051:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM.
1052:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1053:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 1463              		.loc 1 1053 0
 1464 0796 0D4A     		ldr	r2, .L92+12
 1465 0798 3B69     		ldr	r3, [r7, #16]
 1466 079a 9B08     		lsrs	r3, r3, #2
 1467 079c 1360     		str	r3, [r2]
1054:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1055:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1056:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load respective length registers.
1057:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1058:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BN1Size;
 1468              		.loc 1 1058 0
 1469 079e 0C4A     		ldr	r2, .L92+16
 1470 07a0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1471 07a2 1360     		str	r3, [r2]
1059:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8BN2Size;
 1472              		.loc 1 1059 0
 1473 07a4 0B4A     		ldr	r2, .L92+20
 1474 07a6 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1475 07a8 1360     		str	r3, [r2]
1060:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1061:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1062:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Set the function for the add operation and start the operation.
1063:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1064:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_ADD);
 1476              		.loc 1 1064 0
 1477 07aa 054B     		ldr	r3, .L92
 1478 07ac 48F21002 		movw	r2, #32784
 1479 07b0 1A60     		str	r2, [r3]
1065:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1066:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1480              		.loc 1 1066 0
 1481 07b2 0023     		movs	r3, #0
 1482              	.L87:
1067:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 1483              		.loc 1 1067 0
 1484 07b4 1846     		mov	r0, r3
 1485 07b6 1C37     		adds	r7, r7, #28
 1486              		.cfi_def_cfa_offset 4
 1487 07b8 BD46     		mov	sp, r7
 1488              		.cfi_def_cfa_register 13
 1489              		@ sp needed
 1490 07ba 5DF8047B 		ldr	r7, [sp], #4
 1491              		.cfi_restore 7
 1492              		.cfi_def_cfa_offset 0
 1493 07be 7047     		bx	lr
 1494              	.L93:
 1495              		.align	2
 1496              	.L92:
 1497 07c0 1C400044 		.word	1140867100
 1498 07c4 00400044 		.word	1140867072
 1499 07c8 04400044 		.word	1140867076
 1500 07cc 08400044 		.word	1140867080
 1501 07d0 10400044 		.word	1140867088
 1502 07d4 14400044 		.word	1140867092
 1503              		.cfi_endproc
 1504              	.LFE14:
 1506              		.align	2
 1507              		.global	PKABigNumAddGetResult
 1508              		.thumb
 1509              		.thumb_func
 1511              	PKABigNumAddGetResult:
 1512              	.LFB15:
1068:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1069:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1070:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1071:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Gets the result of the addition operation on two big number.
1072:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1073:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result
1074:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! needs to be stored.
1075:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32Len is the address of the variable containing the length of
1076:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the buffer.  After the operation the actual length of the resultant is
1077:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! stored at this address.
1078:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1079:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! was provided by the start function \sa PKABigNumAddStart().
1080:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1081:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function gets the result of the addition operation on two big numbers,
1082:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! previously started using the function \sa PKABigNumAddStart().
1083:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1084:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns:
1085:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1086:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1087:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the operation.
1088:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1089:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1090:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
1091:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! then the length of the result. 
1092:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1093:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1094:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
1095:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKABigNumAddGetResult(uint32_t* pui32ResultBuf, uint32_t* pui32Len,
1096:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                       uint32_t ui32ResVectorLoc)
1097:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 1513              		.loc 1 1097 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 32
 1516              		@ frame_needed = 1, uses_anonymous_args = 0
 1517              		@ link register save eliminated.
 1518 07d8 80B4     		push	{r7}
 1519              		.cfi_def_cfa_offset 4
 1520              		.cfi_offset 7, -4
 1521 07da 89B0     		sub	sp, sp, #36
 1522              		.cfi_def_cfa_offset 40
 1523 07dc 00AF     		add	r7, sp, #0
 1524              		.cfi_def_cfa_register 7
 1525 07de F860     		str	r0, [r7, #12]
 1526 07e0 B960     		str	r1, [r7, #8]
 1527 07e2 7A60     		str	r2, [r7, #4]
1098:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t regMSWVal;
1099:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t len;
1100:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
1101:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1102:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1103:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for the arguments.
1104:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1105:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
1106:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32Len);
1107:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1108:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1110:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1111:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Verify that the operation is complete.
1112:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1113:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1528              		.loc 1 1113 0
 1529 07e4 224B     		ldr	r3, .L101
 1530 07e6 1B68     		ldr	r3, [r3]
 1531 07e8 03F40043 		and	r3, r3, #32768
 1532 07ec 002B     		cmp	r3, #0
 1533 07ee 01D0     		beq	.L95
1114:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1115:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1534              		.loc 1 1115 0
 1535 07f0 0723     		movs	r3, #7
 1536 07f2 36E0     		b	.L96
 1537              	.L95:
1116:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1117:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1118:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1119:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Get the MSW register value.
1120:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1121:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 1538              		.loc 1 1121 0
 1539 07f4 1F4B     		ldr	r3, .L101+4
 1540 07f6 1B68     		ldr	r3, [r3]
 1541 07f8 BB61     		str	r3, [r7, #24]
1122:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1123:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1124:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
1125:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1126:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1542              		.loc 1 1126 0
 1543 07fa BB69     		ldr	r3, [r7, #24]
 1544 07fc 03F40043 		and	r3, r3, #32768
 1545 0800 002B     		cmp	r3, #0
 1546 0802 01D0     		beq	.L97
1127:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1128:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 1547              		.loc 1 1128 0
 1548 0804 0423     		movs	r3, #4
 1549 0806 2CE0     		b	.L96
 1550              	.L97:
1129:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1130:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1131:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1132:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Get the length of the result.
1133:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1551              		.loc 1 1134 0
 1552 0808 BB69     		ldr	r3, [r7, #24]
 1553 080a C3F30A02 		ubfx	r2, r3, #0, #11
1135:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1554              		.loc 1 1135 0
 1555 080e 7B68     		ldr	r3, [r7, #4]
 1556 0810 03F13C43 		add	r3, r3, #-1140850688
 1557 0814 A3F5C043 		sub	r3, r3, #24576
 1558 0818 9B08     		lsrs	r3, r3, #2
1134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1559              		.loc 1 1134 0
 1560 081a D31A     		subs	r3, r2, r3
 1561 081c 0133     		adds	r3, r3, #1
 1562 081e 7B61     		str	r3, [r7, #20]
1136:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1137:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1138:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure that the supplied result buffer is adequate to store the
1139:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // resultant data.
1140:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1141:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(*pui32Len < len)
 1563              		.loc 1 1141 0
 1564 0820 BB68     		ldr	r3, [r7, #8]
 1565 0822 1A68     		ldr	r2, [r3]
 1566 0824 7B69     		ldr	r3, [r7, #20]
 1567 0826 9A42     		cmp	r2, r3
 1568 0828 01D2     		bcs	.L98
1142:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1143:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1569              		.loc 1 1143 0
 1570 082a 0323     		movs	r3, #3
 1571 082c 19E0     		b	.L96
 1572              	.L98:
1144:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1145:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1146:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1147:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the length.
1148:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1149:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32Len = len;
 1573              		.loc 1 1149 0
 1574 082e BB68     		ldr	r3, [r7, #8]
 1575 0830 7A69     		ldr	r2, [r7, #20]
 1576 0832 1A60     		str	r2, [r3]
1150:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1151:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1152:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the result from vector C into the provided buffer.
1153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < *pui32Len; i++)
 1577              		.loc 1 1153 0
 1578 0834 0023     		movs	r3, #0
 1579 0836 FB61     		str	r3, [r7, #28]
 1580 0838 0DE0     		b	.L99
 1581              	.L100:
1154:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1155:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         pui32ResultBuf[i] = HWREG( (ui32ResVectorLoc +  4*i) );
 1582              		.loc 1 1155 0 discriminator 3
 1583 083a FB69     		ldr	r3, [r7, #28]
 1584 083c 9B00     		lsls	r3, r3, #2
 1585 083e FA68     		ldr	r2, [r7, #12]
 1586 0840 1344     		add	r3, r3, r2
 1587 0842 FA69     		ldr	r2, [r7, #28]
 1588 0844 9200     		lsls	r2, r2, #2
 1589 0846 1146     		mov	r1, r2
 1590 0848 7A68     		ldr	r2, [r7, #4]
 1591 084a 0A44     		add	r2, r2, r1
 1592 084c 1268     		ldr	r2, [r2]
 1593 084e 1A60     		str	r2, [r3]
1153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1594              		.loc 1 1153 0 discriminator 3
 1595 0850 FB69     		ldr	r3, [r7, #28]
 1596 0852 0133     		adds	r3, r3, #1
 1597 0854 FB61     		str	r3, [r7, #28]
 1598              	.L99:
1153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1599              		.loc 1 1153 0 is_stmt 0 discriminator 1
 1600 0856 FA69     		ldr	r2, [r7, #28]
 1601 0858 BB68     		ldr	r3, [r7, #8]
 1602 085a 1B68     		ldr	r3, [r3]
 1603 085c 9A42     		cmp	r2, r3
 1604 085e ECD3     		bcc	.L100
1156:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1157:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1158:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1605              		.loc 1 1158 0 is_stmt 1
 1606 0860 0023     		movs	r3, #0
 1607              	.L96:
1159:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 1608              		.loc 1 1159 0
 1609 0862 1846     		mov	r0, r3
 1610 0864 2437     		adds	r7, r7, #36
 1611              		.cfi_def_cfa_offset 4
 1612 0866 BD46     		mov	sp, r7
 1613              		.cfi_def_cfa_register 13
 1614              		@ sp needed
 1615 0868 5DF8047B 		ldr	r7, [sp], #4
 1616              		.cfi_restore 7
 1617              		.cfi_def_cfa_offset 0
 1618 086c 7047     		bx	lr
 1619              	.L102:
 1620 086e 00BF     		.align	2
 1621              	.L101:
 1622 0870 1C400044 		.word	1140867100
 1623 0874 24400044 		.word	1140867108
 1624              		.cfi_endproc
 1625              	.LFE15:
 1627              		.align	2
 1628              		.global	PKAECCMultiplyStart
 1629              		.thumb
 1630              		.thumb_func
 1632              	PKAECCMultiplyStart:
 1633              	.LFB16:
1160:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1161:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1162:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1163:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Starts ECC Multiplication.
1164:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1165:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32Scalar is pointer to the buffer containing the scalar
1166:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! value to be multiplied.
1167:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptEcPt is the pointer to the structure containing the
1168:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! elliptic curve point to be multiplied.  The point should be on the given
1169:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! curve.
1170:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1171:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! info.
1172:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1173:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! which will be set by this function.
1174:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1175:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function starts the Elliptical curve cryptography (ECC) point
1176:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! multiplication operation on the EC point and the scalar value.
1177:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1178:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!\return Returns: 
1179:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1180:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1181:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! some other operation.
1182:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1183:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1184:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
1185:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAECCMultiplyStart(uint32_t* pui32Scalar, tECPt* ptEcPt,
1186:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                     tECCCurveInfo* ptCurve, uint32_t* pui32ResultVector)
1187:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 1634              		.loc 1 1187 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 32
 1637              		@ frame_needed = 1, uses_anonymous_args = 0
 1638              		@ link register save eliminated.
 1639 0878 80B4     		push	{r7}
 1640              		.cfi_def_cfa_offset 4
 1641              		.cfi_offset 7, -4
 1642 087a 89B0     		sub	sp, sp, #36
 1643              		.cfi_def_cfa_offset 40
 1644 087c 00AF     		add	r7, sp, #0
 1645              		.cfi_def_cfa_register 7
 1646 087e F860     		str	r0, [r7, #12]
 1647 0880 B960     		str	r1, [r7, #8]
 1648 0882 7A60     		str	r2, [r7, #4]
 1649 0884 3B60     		str	r3, [r7]
1188:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint8_t extraBuf;
1189:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t offset;
1190:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
1191:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1192:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1193:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for the arguments.
1194:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1195:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32Scalar);
1196:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt);
1197:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt->pui32X);
1198:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt->pui32Y);
1199:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1200:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(ptCurve->ui8Size <= PKA_MAX_CURVE_SIZE_32_BIT_WORD);
1201:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1202:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1203:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset = 0;
 1650              		.loc 1 1203 0
 1651 0886 0023     		movs	r3, #0
 1652 0888 BB61     		str	r3, [r7, #24]
1204:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1205:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1206:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure no PKA operation is in progress.
1207:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1208:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1653              		.loc 1 1208 0
 1654 088a 8C4B     		ldr	r3, .L118
 1655 088c 1B68     		ldr	r3, [r3]
 1656 088e 03F40043 		and	r3, r3, #32768
 1657 0892 002B     		cmp	r3, #0
 1658 0894 01D0     		beq	.L104
1209:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1210:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1659              		.loc 1 1210 0
 1660 0896 0723     		movs	r3, #7
 1661 0898 09E1     		b	.L105
 1662              	.L104:
1211:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1212:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1213:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1214:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Calculate the extra buffer requirement.
1215:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1216:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 1663              		.loc 1 1216 0
 1664 089a 7B68     		ldr	r3, [r7, #4]
 1665 089c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1666 089e 03F00103 		and	r3, r3, #1
 1667 08a2 DBB2     		uxtb	r3, r3
 1668 08a4 0233     		adds	r3, r3, #2
 1669 08a6 FB75     		strb	r3, [r7, #23]
1217:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1218:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1219:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1220:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the scalar will be stored.
1221:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1222:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG((PKA_APTR)) = offset >> 2;
 1670              		.loc 1 1222 0
 1671 08a8 854A     		ldr	r2, .L118+4
 1672 08aa BB69     		ldr	r3, [r7, #24]
 1673 08ac 9B08     		lsrs	r3, r3, #2
 1674 08ae 1360     		str	r3, [r2]
1223:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1224:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1225:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the scalar in PKA RAM.
1226:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1675              		.loc 1 1227 0
 1676 08b0 0023     		movs	r3, #0
 1677 08b2 FB61     		str	r3, [r7, #28]
 1678 08b4 11E0     		b	.L106
 1679              	.L107:
1228:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1229:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Scalar++;
 1680              		.loc 1 1229 0 discriminator 3
 1681 08b6 FB69     		ldr	r3, [r7, #28]
 1682 08b8 9B00     		lsls	r3, r3, #2
 1683 08ba 1A46     		mov	r2, r3
 1684 08bc BB69     		ldr	r3, [r7, #24]
 1685 08be 1344     		add	r3, r3, r2
 1686 08c0 03F18843 		add	r3, r3, #1140850688
 1687 08c4 03F5C043 		add	r3, r3, #24576
 1688 08c8 1946     		mov	r1, r3
 1689 08ca FB68     		ldr	r3, [r7, #12]
 1690 08cc 1A1D     		adds	r2, r3, #4
 1691 08ce FA60     		str	r2, [r7, #12]
 1692 08d0 1B68     		ldr	r3, [r3]
 1693 08d2 0B60     		str	r3, [r1]
1227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1694              		.loc 1 1227 0 discriminator 3
 1695 08d4 FB69     		ldr	r3, [r7, #28]
 1696 08d6 0133     		adds	r3, r3, #1
 1697 08d8 FB61     		str	r3, [r7, #28]
 1698              	.L106:
1227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1699              		.loc 1 1227 0 is_stmt 0 discriminator 1
 1700 08da 7B68     		ldr	r3, [r7, #4]
 1701 08dc 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1702 08de 1A46     		mov	r2, r3
 1703 08e0 FB69     		ldr	r3, [r7, #28]
 1704 08e2 9A42     		cmp	r2, r3
 1705 08e4 E7DC     		bgt	.L107
1230:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1231:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1232:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1233:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for the next data.
1234:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1235:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + (ptCurve->ui8Size % 2));
 1706              		.loc 1 1235 0 is_stmt 1
 1707 08e6 7B68     		ldr	r3, [r7, #4]
 1708 08e8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1709 08ea 03F00102 		and	r2, r3, #1
 1710 08ee FB69     		ldr	r3, [r7, #28]
 1711 08f0 1344     		add	r3, r3, r2
 1712 08f2 9B00     		lsls	r3, r3, #2
 1713 08f4 1A46     		mov	r2, r3
 1714 08f6 BB69     		ldr	r3, [r7, #24]
 1715 08f8 1344     		add	r3, r3, r2
 1716 08fa BB61     		str	r3, [r7, #24]
1236:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1237:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1238:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1239:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the curve parameters will be stored.
1240:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1241:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG((PKA_BPTR)) = offset >> 2;
 1717              		.loc 1 1241 0
 1718 08fc 714A     		ldr	r2, .L118+8
 1719 08fe BB69     		ldr	r3, [r7, #24]
 1720 0900 9B08     		lsrs	r3, r3, #2
 1721 0902 1360     		str	r3, [r2]
1242:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1243:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1244:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B immediately
1245:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // following vector A at PKA RAM
1246:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1722              		.loc 1 1247 0
 1723 0904 0023     		movs	r3, #0
 1724 0906 FB61     		str	r3, [r7, #28]
 1725 0908 13E0     		b	.L108
 1726              	.L109:
1248:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1249:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 1727              		.loc 1 1249 0 discriminator 3
 1728 090a FB69     		ldr	r3, [r7, #28]
 1729 090c 9B00     		lsls	r3, r3, #2
 1730 090e 1A46     		mov	r2, r3
 1731 0910 BB69     		ldr	r3, [r7, #24]
 1732 0912 1344     		add	r3, r3, r2
 1733 0914 03F18843 		add	r3, r3, #1140850688
 1734 0918 03F5C043 		add	r3, r3, #24576
 1735 091c 1946     		mov	r1, r3
1250:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1736              		.loc 1 1250 0 discriminator 3
 1737 091e 7B68     		ldr	r3, [r7, #4]
 1738 0920 9A68     		ldr	r2, [r3, #8]
 1739 0922 FB69     		ldr	r3, [r7, #28]
 1740 0924 9B00     		lsls	r3, r3, #2
 1741 0926 1344     		add	r3, r3, r2
 1742 0928 1B68     		ldr	r3, [r3]
1249:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1743              		.loc 1 1249 0 discriminator 3
 1744 092a 0B60     		str	r3, [r1]
1247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1745              		.loc 1 1247 0 discriminator 3
 1746 092c FB69     		ldr	r3, [r7, #28]
 1747 092e 0133     		adds	r3, r3, #1
 1748 0930 FB61     		str	r3, [r7, #28]
 1749              	.L108:
1247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1750              		.loc 1 1247 0 is_stmt 0 discriminator 1
 1751 0932 7B68     		ldr	r3, [r7, #4]
 1752 0934 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1753 0936 1A46     		mov	r2, r3
 1754 0938 FB69     		ldr	r3, [r7, #28]
 1755 093a 9A42     		cmp	r2, r3
 1756 093c E5DC     		bgt	.L109
1251:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1252:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1253:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1254:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for the next data.
1255:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1256:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1757              		.loc 1 1256 0 is_stmt 1
 1758 093e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1759 0940 FB69     		ldr	r3, [r7, #28]
 1760 0942 1344     		add	r3, r3, r2
 1761 0944 9B00     		lsls	r3, r3, #2
 1762 0946 1A46     		mov	r2, r3
 1763 0948 BB69     		ldr	r3, [r7, #24]
 1764 094a 1344     		add	r3, r3, r2
 1765 094c BB61     		str	r3, [r7, #24]
1257:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1258:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1259:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy curve parameter 'a' in PKA RAM.
1260:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1766              		.loc 1 1261 0
 1767 094e 0023     		movs	r3, #0
 1768 0950 FB61     		str	r3, [r7, #28]
 1769 0952 13E0     		b	.L110
 1770              	.L111:
1262:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1263:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 1771              		.loc 1 1263 0 discriminator 3
 1772 0954 FB69     		ldr	r3, [r7, #28]
 1773 0956 9B00     		lsls	r3, r3, #2
 1774 0958 1A46     		mov	r2, r3
 1775 095a BB69     		ldr	r3, [r7, #24]
 1776 095c 1344     		add	r3, r3, r2
 1777 095e 03F18843 		add	r3, r3, #1140850688
 1778 0962 03F5C043 		add	r3, r3, #24576
 1779 0966 1946     		mov	r1, r3
 1780 0968 7B68     		ldr	r3, [r7, #4]
 1781 096a 1A69     		ldr	r2, [r3, #16]
 1782 096c FB69     		ldr	r3, [r7, #28]
 1783 096e 9B00     		lsls	r3, r3, #2
 1784 0970 1344     		add	r3, r3, r2
 1785 0972 1B68     		ldr	r3, [r3]
 1786 0974 0B60     		str	r3, [r1]
1261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1787              		.loc 1 1261 0 discriminator 3
 1788 0976 FB69     		ldr	r3, [r7, #28]
 1789 0978 0133     		adds	r3, r3, #1
 1790 097a FB61     		str	r3, [r7, #28]
 1791              	.L110:
1261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1792              		.loc 1 1261 0 is_stmt 0 discriminator 1
 1793 097c 7B68     		ldr	r3, [r7, #4]
 1794 097e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1795 0980 1A46     		mov	r2, r3
 1796 0982 FB69     		ldr	r3, [r7, #28]
 1797 0984 9A42     		cmp	r2, r3
 1798 0986 E5DC     		bgt	.L111
1264:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1265:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1266:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1267:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for the next data.
1268:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1269:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1799              		.loc 1 1269 0 is_stmt 1
 1800 0988 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1801 098a FB69     		ldr	r3, [r7, #28]
 1802 098c 1344     		add	r3, r3, r2
 1803 098e 9B00     		lsls	r3, r3, #2
 1804 0990 1A46     		mov	r2, r3
 1805 0992 BB69     		ldr	r3, [r7, #24]
 1806 0994 1344     		add	r3, r3, r2
 1807 0996 BB61     		str	r3, [r7, #24]
1270:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1271:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1272:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy curve parameter 'b' in PKA RAM.
1273:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1808              		.loc 1 1274 0
 1809 0998 0023     		movs	r3, #0
 1810 099a FB61     		str	r3, [r7, #28]
 1811 099c 13E0     		b	.L112
 1812              	.L113:
1275:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1276:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32B[i];
 1813              		.loc 1 1276 0 discriminator 3
 1814 099e FB69     		ldr	r3, [r7, #28]
 1815 09a0 9B00     		lsls	r3, r3, #2
 1816 09a2 1A46     		mov	r2, r3
 1817 09a4 BB69     		ldr	r3, [r7, #24]
 1818 09a6 1344     		add	r3, r3, r2
 1819 09a8 03F18843 		add	r3, r3, #1140850688
 1820 09ac 03F5C043 		add	r3, r3, #24576
 1821 09b0 1946     		mov	r1, r3
 1822 09b2 7B68     		ldr	r3, [r7, #4]
 1823 09b4 5A69     		ldr	r2, [r3, #20]
 1824 09b6 FB69     		ldr	r3, [r7, #28]
 1825 09b8 9B00     		lsls	r3, r3, #2
 1826 09ba 1344     		add	r3, r3, r2
 1827 09bc 1B68     		ldr	r3, [r3]
 1828 09be 0B60     		str	r3, [r1]
1274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1829              		.loc 1 1274 0 discriminator 3
 1830 09c0 FB69     		ldr	r3, [r7, #28]
 1831 09c2 0133     		adds	r3, r3, #1
 1832 09c4 FB61     		str	r3, [r7, #28]
 1833              	.L112:
1274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1834              		.loc 1 1274 0 is_stmt 0 discriminator 1
 1835 09c6 7B68     		ldr	r3, [r7, #4]
 1836 09c8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1837 09ca 1A46     		mov	r2, r3
 1838 09cc FB69     		ldr	r3, [r7, #28]
 1839 09ce 9A42     		cmp	r2, r3
 1840 09d0 E5DC     		bgt	.L113
1277:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1278:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1279:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1280:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for the next data.
1281:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1282:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1841              		.loc 1 1282 0 is_stmt 1
 1842 09d2 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1843 09d4 FB69     		ldr	r3, [r7, #28]
 1844 09d6 1344     		add	r3, r3, r2
 1845 09d8 9B00     		lsls	r3, r3, #2
 1846 09da 1A46     		mov	r2, r3
 1847 09dc BB69     		ldr	r3, [r7, #24]
 1848 09de 1344     		add	r3, r3, r2
 1849 09e0 BB61     		str	r3, [r7, #24]
1283:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1285:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1286:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the Gx, Gy will be stored.
1287:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1288:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG((PKA_CPTR)) = offset >> 2;
 1850              		.loc 1 1288 0
 1851 09e2 394A     		ldr	r2, .L118+12
 1852 09e4 BB69     		ldr	r3, [r7, #24]
 1853 09e6 9B08     		lsrs	r3, r3, #2
 1854 09e8 1360     		str	r3, [r2]
1289:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1290:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1291:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write elliptic curve point x co-ordinate value.
1292:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1855              		.loc 1 1293 0
 1856 09ea 0023     		movs	r3, #0
 1857 09ec FB61     		str	r3, [r7, #28]
 1858 09ee 13E0     		b	.L114
 1859              	.L115:
1294:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1295:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt->pui32X[i];
 1860              		.loc 1 1295 0 discriminator 3
 1861 09f0 FB69     		ldr	r3, [r7, #28]
 1862 09f2 9B00     		lsls	r3, r3, #2
 1863 09f4 1A46     		mov	r2, r3
 1864 09f6 BB69     		ldr	r3, [r7, #24]
 1865 09f8 1344     		add	r3, r3, r2
 1866 09fa 03F18843 		add	r3, r3, #1140850688
 1867 09fe 03F5C043 		add	r3, r3, #24576
 1868 0a02 1946     		mov	r1, r3
 1869 0a04 BB68     		ldr	r3, [r7, #8]
 1870 0a06 1A68     		ldr	r2, [r3]
 1871 0a08 FB69     		ldr	r3, [r7, #28]
 1872 0a0a 9B00     		lsls	r3, r3, #2
 1873 0a0c 1344     		add	r3, r3, r2
 1874 0a0e 1B68     		ldr	r3, [r3]
 1875 0a10 0B60     		str	r3, [r1]
1293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1876              		.loc 1 1293 0 discriminator 3
 1877 0a12 FB69     		ldr	r3, [r7, #28]
 1878 0a14 0133     		adds	r3, r3, #1
 1879 0a16 FB61     		str	r3, [r7, #28]
 1880              	.L114:
1293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1881              		.loc 1 1293 0 is_stmt 0 discriminator 1
 1882 0a18 7B68     		ldr	r3, [r7, #4]
 1883 0a1a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1884 0a1c 1A46     		mov	r2, r3
 1885 0a1e FB69     		ldr	r3, [r7, #28]
 1886 0a20 9A42     		cmp	r2, r3
 1887 0a22 E5DC     		bgt	.L115
1296:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1297:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1298:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1299:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for the next data.
1300:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1301:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1888              		.loc 1 1301 0 is_stmt 1
 1889 0a24 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1890 0a26 FB69     		ldr	r3, [r7, #28]
 1891 0a28 1344     		add	r3, r3, r2
 1892 0a2a 9B00     		lsls	r3, r3, #2
 1893 0a2c 1A46     		mov	r2, r3
 1894 0a2e BB69     		ldr	r3, [r7, #24]
 1895 0a30 1344     		add	r3, r3, r2
 1896 0a32 BB61     		str	r3, [r7, #24]
1302:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1304:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write elliptic curve point y co-ordinate value.
1305:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1897              		.loc 1 1306 0
 1898 0a34 0023     		movs	r3, #0
 1899 0a36 FB61     		str	r3, [r7, #28]
 1900 0a38 13E0     		b	.L116
 1901              	.L117:
1307:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1308:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt->pui32Y[i];
 1902              		.loc 1 1308 0 discriminator 3
 1903 0a3a FB69     		ldr	r3, [r7, #28]
 1904 0a3c 9B00     		lsls	r3, r3, #2
 1905 0a3e 1A46     		mov	r2, r3
 1906 0a40 BB69     		ldr	r3, [r7, #24]
 1907 0a42 1344     		add	r3, r3, r2
 1908 0a44 03F18843 		add	r3, r3, #1140850688
 1909 0a48 03F5C043 		add	r3, r3, #24576
 1910 0a4c 1946     		mov	r1, r3
 1911 0a4e BB68     		ldr	r3, [r7, #8]
 1912 0a50 5A68     		ldr	r2, [r3, #4]
 1913 0a52 FB69     		ldr	r3, [r7, #28]
 1914 0a54 9B00     		lsls	r3, r3, #2
 1915 0a56 1344     		add	r3, r3, r2
 1916 0a58 1B68     		ldr	r3, [r3]
 1917 0a5a 0B60     		str	r3, [r1]
1306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1918              		.loc 1 1306 0 discriminator 3
 1919 0a5c FB69     		ldr	r3, [r7, #28]
 1920 0a5e 0133     		adds	r3, r3, #1
 1921 0a60 FB61     		str	r3, [r7, #28]
 1922              	.L116:
1306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 1923              		.loc 1 1306 0 is_stmt 0 discriminator 1
 1924 0a62 7B68     		ldr	r3, [r7, #4]
 1925 0a64 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1926 0a66 1A46     		mov	r2, r3
 1927 0a68 FB69     		ldr	r3, [r7, #28]
 1928 0a6a 9A42     		cmp	r2, r3
 1929 0a6c E5DC     		bgt	.L117
1309:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1310:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1311:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1312:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset for the next data.
1313:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1314:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1930              		.loc 1 1314 0 is_stmt 1
 1931 0a6e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1932 0a70 FB69     		ldr	r3, [r7, #28]
 1933 0a72 1344     		add	r3, r3, r2
 1934 0a74 9B00     		lsls	r3, r3, #2
 1935 0a76 1A46     		mov	r2, r3
 1936 0a78 BB69     		ldr	r3, [r7, #24]
 1937 0a7a 1344     		add	r3, r3, r2
 1938 0a7c BB61     		str	r3, [r7, #24]
1315:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1316:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1317:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the result location.
1318:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1319:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32ResultVector =  PKA_RAM_BASE + offset;
 1939              		.loc 1 1319 0
 1940 0a7e BB69     		ldr	r3, [r7, #24]
 1941 0a80 03F18843 		add	r3, r3, #1140850688
 1942 0a84 03F5C043 		add	r3, r3, #24576
 1943 0a88 3A68     		ldr	r2, [r7]
 1944 0a8a 1360     		str	r3, [r2]
1320:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1321:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1322:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1323:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1324:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 1945              		.loc 1 1324 0
 1946 0a8c 0F4A     		ldr	r2, .L118+16
 1947 0a8e BB69     		ldr	r3, [r7, #24]
 1948 0a90 9B08     		lsrs	r3, r3, #2
 1949 0a92 1360     		str	r3, [r2]
1325:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1326:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1327:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load length registers.
1328:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1329:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_ALENGTH) = ptCurve->ui8Size;
 1950              		.loc 1 1329 0
 1951 0a94 0E4A     		ldr	r2, .L118+20
 1952 0a96 7B68     		ldr	r3, [r7, #4]
 1953 0a98 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1954 0a9a 1360     		str	r3, [r2]
1330:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 1955              		.loc 1 1330 0
 1956 0a9c 0D4A     		ldr	r2, .L118+24
 1957 0a9e 7B68     		ldr	r3, [r7, #4]
 1958 0aa0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1959 0aa2 1360     		str	r3, [r2]
1331:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1332:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1333:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // set the PKA function to ECC-MULT and start the operation.
1334:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1335:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_FUNCTION) = 0x0000D000;
 1960              		.loc 1 1335 0
 1961 0aa4 054B     		ldr	r3, .L118
 1962 0aa6 4FF45042 		mov	r2, #53248
 1963 0aaa 1A60     		str	r2, [r3]
1336:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1337:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1964              		.loc 1 1337 0
 1965 0aac 0023     		movs	r3, #0
 1966              	.L105:
1338:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 1967              		.loc 1 1338 0
 1968 0aae 1846     		mov	r0, r3
 1969 0ab0 2437     		adds	r7, r7, #36
 1970              		.cfi_def_cfa_offset 4
 1971 0ab2 BD46     		mov	sp, r7
 1972              		.cfi_def_cfa_register 13
 1973              		@ sp needed
 1974 0ab4 5DF8047B 		ldr	r7, [sp], #4
 1975              		.cfi_restore 7
 1976              		.cfi_def_cfa_offset 0
 1977 0ab8 7047     		bx	lr
 1978              	.L119:
 1979 0aba 00BF     		.align	2
 1980              	.L118:
 1981 0abc 1C400044 		.word	1140867100
 1982 0ac0 00400044 		.word	1140867072
 1983 0ac4 04400044 		.word	1140867076
 1984 0ac8 08400044 		.word	1140867080
 1985 0acc 0C400044 		.word	1140867084
 1986 0ad0 10400044 		.word	1140867088
 1987 0ad4 14400044 		.word	1140867092
 1988              		.cfi_endproc
 1989              	.LFE16:
 1991              		.align	2
 1992              		.global	PKAECCMultiplyGetResult
 1993              		.thumb
 1994              		.thumb_func
 1996              	PKAECCMultiplyGetResult:
 1997              	.LFB17:
1339:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1340:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1341:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1342:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Gets the result of ECC Multiplication
1343:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1344:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant EC
1345:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! point will be stored.  The callee is responsible to allocate the space for
1346:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the ec point structure and the x and y co-ordinate as well.
1347:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1348:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! was provided by the start function \sa PKAECCMultiplyStart().
1349:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1350:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function gets the result of ecc point multiplication operation on the
1351:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! ec point and the scalar value, previously started using the function
1352:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \sa PKAECCMultiplyStart().
1353:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1354:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns:
1355:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1356:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1357:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the operation.
1358:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1359:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1360:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1361:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1362:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
1363:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAECCMultiplyGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1364:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 1998              		.loc 1 1364 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 24
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002              		@ link register save eliminated.
 2003 0ad8 80B4     		push	{r7}
 2004              		.cfi_def_cfa_offset 4
 2005              		.cfi_offset 7, -4
 2006 0ada 87B0     		sub	sp, sp, #28
 2007              		.cfi_def_cfa_offset 32
 2008 0adc 00AF     		add	r7, sp, #0
 2009              		.cfi_def_cfa_register 7
 2010 0ade 7860     		str	r0, [r7, #4]
 2011 0ae0 3960     		str	r1, [r7]
1365:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
1366:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t addr;
1367:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t regMSWVal;
1368:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t len;
1369:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1370:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1371:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for the arguments.
1372:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1373:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1374:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1375:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1376:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1377:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1378:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1379:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1380:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Verify that the operation is completed.
1381:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1382:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2012              		.loc 1 1382 0
 2013 0ae2 314B     		ldr	r3, .L129
 2014 0ae4 1B68     		ldr	r3, [r3]
 2015 0ae6 03F40043 		and	r3, r3, #32768
 2016 0aea 002B     		cmp	r3, #0
 2017 0aec 01D0     		beq	.L121
1383:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1384:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2018              		.loc 1 1384 0
 2019 0aee 0723     		movs	r3, #7
 2020 0af0 54E0     		b	.L122
 2021              	.L121:
1385:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1386:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1387:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 2022              		.loc 1 1387 0
 2023 0af2 2E4B     		ldr	r3, .L129+4
 2024 0af4 1B68     		ldr	r3, [r3]
 2025 0af6 002B     		cmp	r3, #0
 2026 0af8 4FD1     		bne	.L123
1388:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1389:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1390:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Get the MSW register value.
1391:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1392:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 2027              		.loc 1 1392 0
 2028 0afa 2D4B     		ldr	r3, .L129+8
 2029 0afc 1B68     		ldr	r3, [r3]
 2030 0afe 3B61     		str	r3, [r7, #16]
1393:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1394:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1395:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1396:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1397:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 2031              		.loc 1 1397 0
 2032 0b00 3B69     		ldr	r3, [r7, #16]
 2033 0b02 03F40043 		and	r3, r3, #32768
 2034 0b06 002B     		cmp	r3, #0
 2035 0b08 01D0     		beq	.L124
1398:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1399:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 2036              		.loc 1 1399 0
 2037 0b0a 0423     		movs	r3, #4
 2038 0b0c 46E0     		b	.L122
 2039              	.L124:
1400:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1401:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1402:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1403:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Get the length of the result
1404:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1405:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 2040              		.loc 1 1405 0
 2041 0b0e 3B69     		ldr	r3, [r7, #16]
 2042 0b10 C3F30A02 		ubfx	r2, r3, #0, #11
1406:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2043              		.loc 1 1406 0
 2044 0b14 3B68     		ldr	r3, [r7]
 2045 0b16 03F13C43 		add	r3, r3, #-1140850688
 2046 0b1a A3F5C043 		sub	r3, r3, #24576
 2047 0b1e 9B08     		lsrs	r3, r3, #2
1405:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2048              		.loc 1 1405 0
 2049 0b20 D31A     		subs	r3, r2, r3
 2050 0b22 0133     		adds	r3, r3, #1
 2051 0b24 FB60     		str	r3, [r7, #12]
1407:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1408:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         addr = ui32ResVectorLoc;
 2052              		.loc 1 1408 0
 2053 0b26 3B68     		ldr	r3, [r7]
 2054 0b28 BB60     		str	r3, [r7, #8]
1409:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1410:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1411:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // copy the x co-ordinate value of the result from vector D into
1412:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // the \e ptOutEcPt.
1413:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1414:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         for(i = 0; i < len; i++)
 2055              		.loc 1 1414 0
 2056 0b2a 0023     		movs	r3, #0
 2057 0b2c 7B61     		str	r3, [r7, #20]
 2058 0b2e 0EE0     		b	.L125
 2059              	.L126:
1415:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1416:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG(addr + 4*i);
 2060              		.loc 1 1416 0 discriminator 3
 2061 0b30 7B68     		ldr	r3, [r7, #4]
 2062 0b32 1A68     		ldr	r2, [r3]
 2063 0b34 7B69     		ldr	r3, [r7, #20]
 2064 0b36 9B00     		lsls	r3, r3, #2
 2065 0b38 1344     		add	r3, r3, r2
 2066 0b3a 7A69     		ldr	r2, [r7, #20]
 2067 0b3c 9200     		lsls	r2, r2, #2
 2068 0b3e 1146     		mov	r1, r2
 2069 0b40 BA68     		ldr	r2, [r7, #8]
 2070 0b42 0A44     		add	r2, r2, r1
 2071 0b44 1268     		ldr	r2, [r2]
 2072 0b46 1A60     		str	r2, [r3]
1414:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 2073              		.loc 1 1414 0 discriminator 3
 2074 0b48 7B69     		ldr	r3, [r7, #20]
 2075 0b4a 0133     		adds	r3, r3, #1
 2076 0b4c 7B61     		str	r3, [r7, #20]
 2077              	.L125:
1414:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 2078              		.loc 1 1414 0 is_stmt 0 discriminator 1
 2079 0b4e 7A69     		ldr	r2, [r7, #20]
 2080 0b50 FB68     		ldr	r3, [r7, #12]
 2081 0b52 9A42     		cmp	r2, r3
 2082 0b54 ECD3     		bcc	.L126
1417:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1418:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1419:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 2083              		.loc 1 1419 0 is_stmt 1
 2084 0b56 FB68     		ldr	r3, [r7, #12]
 2085 0b58 03F00102 		and	r2, r3, #1
 2086 0b5c 7B69     		ldr	r3, [r7, #20]
 2087 0b5e 1344     		add	r3, r3, r2
 2088 0b60 0233     		adds	r3, r3, #2
 2089 0b62 9B00     		lsls	r3, r3, #2
 2090 0b64 BA68     		ldr	r2, [r7, #8]
 2091 0b66 1344     		add	r3, r3, r2
 2092 0b68 BB60     		str	r3, [r7, #8]
1420:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1421:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1422:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // copy the y co-ordinate value of the result from vector D into
1423:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // the \e ptOutEcPt.
1424:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1425:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         for(i = 0; i < len; i++)
 2093              		.loc 1 1425 0
 2094 0b6a 0023     		movs	r3, #0
 2095 0b6c 7B61     		str	r3, [r7, #20]
 2096 0b6e 0EE0     		b	.L127
 2097              	.L128:
1426:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1427:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG(addr + 4*i);
 2098              		.loc 1 1427 0 discriminator 3
 2099 0b70 7B68     		ldr	r3, [r7, #4]
 2100 0b72 5A68     		ldr	r2, [r3, #4]
 2101 0b74 7B69     		ldr	r3, [r7, #20]
 2102 0b76 9B00     		lsls	r3, r3, #2
 2103 0b78 1344     		add	r3, r3, r2
 2104 0b7a 7A69     		ldr	r2, [r7, #20]
 2105 0b7c 9200     		lsls	r2, r2, #2
 2106 0b7e 1146     		mov	r1, r2
 2107 0b80 BA68     		ldr	r2, [r7, #8]
 2108 0b82 0A44     		add	r2, r2, r1
 2109 0b84 1268     		ldr	r2, [r2]
 2110 0b86 1A60     		str	r2, [r3]
1425:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 2111              		.loc 1 1425 0 discriminator 3
 2112 0b88 7B69     		ldr	r3, [r7, #20]
 2113 0b8a 0133     		adds	r3, r3, #1
 2114 0b8c 7B61     		str	r3, [r7, #20]
 2115              	.L127:
1425:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 2116              		.loc 1 1425 0 is_stmt 0 discriminator 1
 2117 0b8e 7A69     		ldr	r2, [r7, #20]
 2118 0b90 FB68     		ldr	r3, [r7, #12]
 2119 0b92 9A42     		cmp	r2, r3
 2120 0b94 ECD3     		bcc	.L128
1428:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1429:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1430:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2121              		.loc 1 1430 0 is_stmt 1
 2122 0b96 0023     		movs	r3, #0
 2123 0b98 00E0     		b	.L122
 2124              	.L123:
1431:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1432:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     else
1433:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1434:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 2125              		.loc 1 1434 0
 2126 0b9a 0123     		movs	r3, #1
 2127              	.L122:
1435:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1436:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 2128              		.loc 1 1436 0
 2129 0b9c 1846     		mov	r0, r3
 2130 0b9e 1C37     		adds	r7, r7, #28
 2131              		.cfi_def_cfa_offset 4
 2132 0ba0 BD46     		mov	sp, r7
 2133              		.cfi_def_cfa_register 13
 2134              		@ sp needed
 2135 0ba2 5DF8047B 		ldr	r7, [sp], #4
 2136              		.cfi_restore 7
 2137              		.cfi_def_cfa_offset 0
 2138 0ba6 7047     		bx	lr
 2139              	.L130:
 2140              		.align	2
 2141              	.L129:
 2142 0ba8 1C400044 		.word	1140867100
 2143 0bac 18400044 		.word	1140867096
 2144 0bb0 24400044 		.word	1140867108
 2145              		.cfi_endproc
 2146              	.LFE17:
 2148              		.align	2
 2149              		.global	PKAECCMultGenPtStart
 2150              		.thumb
 2151              		.thumb_func
 2153              	PKAECCMultGenPtStart:
 2154              	.LFB18:
1437:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1438:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1439:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1440:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Starts the ECC Multiplication with Generator point.
1441:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1442:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32Scalar is the to pointer to the buffer containing the scalar
1443:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! value.
1444:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1445:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! info.
1446:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1447:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! which will be set by this function.
1448:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1449:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function starts the ecc point multiplication operation of the
1450:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! scalar value with the well known generator point of the given curve.
1451:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1452:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!\return Returns: 
1453:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1454:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1455:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! some other operation.
1456:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1457:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1458:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
1459:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAECCMultGenPtStart(uint32_t* pui32Scalar, tECCCurveInfo* ptCurve,
1460:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                      uint32_t* pui32ResultVector)
1461:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 2155              		.loc 1 1461 0
 2156              		.cfi_startproc
 2157              		@ args = 0, pretend = 0, frame = 32
 2158              		@ frame_needed = 1, uses_anonymous_args = 0
 2159              		@ link register save eliminated.
 2160 0bb4 80B4     		push	{r7}
 2161              		.cfi_def_cfa_offset 4
 2162              		.cfi_offset 7, -4
 2163 0bb6 89B0     		sub	sp, sp, #36
 2164              		.cfi_def_cfa_offset 40
 2165 0bb8 00AF     		add	r7, sp, #0
 2166              		.cfi_def_cfa_register 7
 2167 0bba F860     		str	r0, [r7, #12]
 2168 0bbc B960     		str	r1, [r7, #8]
 2169 0bbe 7A60     		str	r2, [r7, #4]
1462:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint8_t extraBuf;
1463:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t offset;
1464:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
1465:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1466:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1467:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // check for the arguments.
1468:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1469:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32Scalar);
1470:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1471:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(ptCurve->ui8Size <= PKA_MAX_CURVE_SIZE_32_BIT_WORD);
1472:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1473:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1474:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset = 0;
 2170              		.loc 1 1474 0
 2171 0bc0 0023     		movs	r3, #0
 2172 0bc2 BB61     		str	r3, [r7, #24]
1475:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1476:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1477:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure no operation is in progress.
1478:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1479:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2173              		.loc 1 1479 0
 2174 0bc4 8B4B     		ldr	r3, .L146
 2175 0bc6 1B68     		ldr	r3, [r3]
 2176 0bc8 03F40043 		and	r3, r3, #32768
 2177 0bcc 002B     		cmp	r3, #0
 2178 0bce 01D0     		beq	.L132
1480:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1481:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2179              		.loc 1 1481 0
 2180 0bd0 0723     		movs	r3, #7
 2181 0bd2 09E1     		b	.L133
 2182              	.L132:
1482:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1483:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1484:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1485:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Calculate the extra buffer requirement.
1486:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1487:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 2183              		.loc 1 1487 0
 2184 0bd4 BB68     		ldr	r3, [r7, #8]
 2185 0bd6 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2186 0bd8 03F00103 		and	r3, r3, #1
 2187 0bdc DBB2     		uxtb	r3, r3
 2188 0bde 0233     		adds	r3, r3, #2
 2189 0be0 FB75     		strb	r3, [r7, #23]
1488:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1489:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1490:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1491:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the scalar will be stored.
1492:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1493:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_APTR) = offset >> 2;
 2190              		.loc 1 1493 0
 2191 0be2 854A     		ldr	r2, .L146+4
 2192 0be4 BB69     		ldr	r3, [r7, #24]
 2193 0be6 9B08     		lsrs	r3, r3, #2
 2194 0be8 1360     		str	r3, [r2]
1494:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1495:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1496:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the scalar in PKA RAM.
1497:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1498:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2195              		.loc 1 1498 0
 2196 0bea 0023     		movs	r3, #0
 2197 0bec FB61     		str	r3, [r7, #28]
 2198 0bee 11E0     		b	.L134
 2199              	.L135:
1499:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1500:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Scalar++;
 2200              		.loc 1 1500 0 discriminator 3
 2201 0bf0 FB69     		ldr	r3, [r7, #28]
 2202 0bf2 9B00     		lsls	r3, r3, #2
 2203 0bf4 1A46     		mov	r2, r3
 2204 0bf6 BB69     		ldr	r3, [r7, #24]
 2205 0bf8 1344     		add	r3, r3, r2
 2206 0bfa 03F18843 		add	r3, r3, #1140850688
 2207 0bfe 03F5C043 		add	r3, r3, #24576
 2208 0c02 1946     		mov	r1, r3
 2209 0c04 FB68     		ldr	r3, [r7, #12]
 2210 0c06 1A1D     		adds	r2, r3, #4
 2211 0c08 FA60     		str	r2, [r7, #12]
 2212 0c0a 1B68     		ldr	r3, [r3]
 2213 0c0c 0B60     		str	r3, [r1]
1498:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2214              		.loc 1 1498 0 discriminator 3
 2215 0c0e FB69     		ldr	r3, [r7, #28]
 2216 0c10 0133     		adds	r3, r3, #1
 2217 0c12 FB61     		str	r3, [r7, #28]
 2218              	.L134:
1498:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2219              		.loc 1 1498 0 is_stmt 0 discriminator 1
 2220 0c14 BB68     		ldr	r3, [r7, #8]
 2221 0c16 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2222 0c18 1A46     		mov	r2, r3
 2223 0c1a FB69     		ldr	r3, [r7, #28]
 2224 0c1c 9A42     		cmp	r2, r3
 2225 0c1e E7DC     		bgt	.L135
1501:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1502:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1503:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1504:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1505:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1506:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + (ptCurve->ui8Size % 2));
 2226              		.loc 1 1506 0 is_stmt 1
 2227 0c20 BB68     		ldr	r3, [r7, #8]
 2228 0c22 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2229 0c24 03F00102 		and	r2, r3, #1
 2230 0c28 FB69     		ldr	r3, [r7, #28]
 2231 0c2a 1344     		add	r3, r3, r2
 2232 0c2c 9B00     		lsls	r3, r3, #2
 2233 0c2e 1A46     		mov	r2, r3
 2234 0c30 BB69     		ldr	r3, [r7, #24]
 2235 0c32 1344     		add	r3, r3, r2
 2236 0c34 BB61     		str	r3, [r7, #24]
1507:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1508:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1509:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1510:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the curve parameters will be stored.
1511:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1512:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_BPTR) = offset >> 2;
 2237              		.loc 1 1512 0
 2238 0c36 714A     		ldr	r2, .L146+8
 2239 0c38 BB69     		ldr	r3, [r7, #24]
 2240 0c3a 9B08     		lsrs	r3, r3, #2
 2241 0c3c 1360     		str	r3, [r2]
1513:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1514:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1515:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B.
1516:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1517:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2242              		.loc 1 1517 0
 2243 0c3e 0023     		movs	r3, #0
 2244 0c40 FB61     		str	r3, [r7, #28]
 2245 0c42 13E0     		b	.L136
 2246              	.L137:
1518:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1519:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 2247              		.loc 1 1519 0 discriminator 3
 2248 0c44 FB69     		ldr	r3, [r7, #28]
 2249 0c46 9B00     		lsls	r3, r3, #2
 2250 0c48 1A46     		mov	r2, r3
 2251 0c4a BB69     		ldr	r3, [r7, #24]
 2252 0c4c 1344     		add	r3, r3, r2
 2253 0c4e 03F18843 		add	r3, r3, #1140850688
 2254 0c52 03F5C043 		add	r3, r3, #24576
 2255 0c56 1946     		mov	r1, r3
1520:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2256              		.loc 1 1520 0 discriminator 3
 2257 0c58 BB68     		ldr	r3, [r7, #8]
 2258 0c5a 9A68     		ldr	r2, [r3, #8]
 2259 0c5c FB69     		ldr	r3, [r7, #28]
 2260 0c5e 9B00     		lsls	r3, r3, #2
 2261 0c60 1344     		add	r3, r3, r2
 2262 0c62 1B68     		ldr	r3, [r3]
1519:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2263              		.loc 1 1519 0 discriminator 3
 2264 0c64 0B60     		str	r3, [r1]
1517:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2265              		.loc 1 1517 0 discriminator 3
 2266 0c66 FB69     		ldr	r3, [r7, #28]
 2267 0c68 0133     		adds	r3, r3, #1
 2268 0c6a FB61     		str	r3, [r7, #28]
 2269              	.L136:
1517:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2270              		.loc 1 1517 0 is_stmt 0 discriminator 1
 2271 0c6c BB68     		ldr	r3, [r7, #8]
 2272 0c6e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2273 0c70 1A46     		mov	r2, r3
 2274 0c72 FB69     		ldr	r3, [r7, #28]
 2275 0c74 9A42     		cmp	r2, r3
 2276 0c76 E5DC     		bgt	.L137
1521:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1522:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1523:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1524:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1525:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1526:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2277              		.loc 1 1526 0 is_stmt 1
 2278 0c78 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2279 0c7a FB69     		ldr	r3, [r7, #28]
 2280 0c7c 1344     		add	r3, r3, r2
 2281 0c7e 9B00     		lsls	r3, r3, #2
 2282 0c80 1A46     		mov	r2, r3
 2283 0c82 BB69     		ldr	r3, [r7, #24]
 2284 0c84 1344     		add	r3, r3, r2
 2285 0c86 BB61     		str	r3, [r7, #24]
1527:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1528:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1529:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write curve parameter 'a' in PKA RAM.
1530:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1531:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2286              		.loc 1 1531 0
 2287 0c88 0023     		movs	r3, #0
 2288 0c8a FB61     		str	r3, [r7, #28]
 2289 0c8c 13E0     		b	.L138
 2290              	.L139:
1532:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1533:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 2291              		.loc 1 1533 0 discriminator 3
 2292 0c8e FB69     		ldr	r3, [r7, #28]
 2293 0c90 9B00     		lsls	r3, r3, #2
 2294 0c92 1A46     		mov	r2, r3
 2295 0c94 BB69     		ldr	r3, [r7, #24]
 2296 0c96 1344     		add	r3, r3, r2
 2297 0c98 03F18843 		add	r3, r3, #1140850688
 2298 0c9c 03F5C043 		add	r3, r3, #24576
 2299 0ca0 1946     		mov	r1, r3
 2300 0ca2 BB68     		ldr	r3, [r7, #8]
 2301 0ca4 1A69     		ldr	r2, [r3, #16]
 2302 0ca6 FB69     		ldr	r3, [r7, #28]
 2303 0ca8 9B00     		lsls	r3, r3, #2
 2304 0caa 1344     		add	r3, r3, r2
 2305 0cac 1B68     		ldr	r3, [r3]
 2306 0cae 0B60     		str	r3, [r1]
1531:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2307              		.loc 1 1531 0 discriminator 3
 2308 0cb0 FB69     		ldr	r3, [r7, #28]
 2309 0cb2 0133     		adds	r3, r3, #1
 2310 0cb4 FB61     		str	r3, [r7, #28]
 2311              	.L138:
1531:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2312              		.loc 1 1531 0 is_stmt 0 discriminator 1
 2313 0cb6 BB68     		ldr	r3, [r7, #8]
 2314 0cb8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2315 0cba 1A46     		mov	r2, r3
 2316 0cbc FB69     		ldr	r3, [r7, #28]
 2317 0cbe 9A42     		cmp	r2, r3
 2318 0cc0 E5DC     		bgt	.L139
1534:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1535:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1536:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1537:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1538:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1539:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2319              		.loc 1 1539 0 is_stmt 1
 2320 0cc2 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2321 0cc4 FB69     		ldr	r3, [r7, #28]
 2322 0cc6 1344     		add	r3, r3, r2
 2323 0cc8 9B00     		lsls	r3, r3, #2
 2324 0cca 1A46     		mov	r2, r3
 2325 0ccc BB69     		ldr	r3, [r7, #24]
 2326 0cce 1344     		add	r3, r3, r2
 2327 0cd0 BB61     		str	r3, [r7, #24]
1540:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1541:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1542:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // write curve parameter 'b' in PKA RAM.
1543:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1544:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2328              		.loc 1 1544 0
 2329 0cd2 0023     		movs	r3, #0
 2330 0cd4 FB61     		str	r3, [r7, #28]
 2331 0cd6 13E0     		b	.L140
 2332              	.L141:
1545:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1546:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32B[i];
 2333              		.loc 1 1546 0 discriminator 3
 2334 0cd8 FB69     		ldr	r3, [r7, #28]
 2335 0cda 9B00     		lsls	r3, r3, #2
 2336 0cdc 1A46     		mov	r2, r3
 2337 0cde BB69     		ldr	r3, [r7, #24]
 2338 0ce0 1344     		add	r3, r3, r2
 2339 0ce2 03F18843 		add	r3, r3, #1140850688
 2340 0ce6 03F5C043 		add	r3, r3, #24576
 2341 0cea 1946     		mov	r1, r3
 2342 0cec BB68     		ldr	r3, [r7, #8]
 2343 0cee 5A69     		ldr	r2, [r3, #20]
 2344 0cf0 FB69     		ldr	r3, [r7, #28]
 2345 0cf2 9B00     		lsls	r3, r3, #2
 2346 0cf4 1344     		add	r3, r3, r2
 2347 0cf6 1B68     		ldr	r3, [r3]
 2348 0cf8 0B60     		str	r3, [r1]
1544:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2349              		.loc 1 1544 0 discriminator 3
 2350 0cfa FB69     		ldr	r3, [r7, #28]
 2351 0cfc 0133     		adds	r3, r3, #1
 2352 0cfe FB61     		str	r3, [r7, #28]
 2353              	.L140:
1544:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2354              		.loc 1 1544 0 is_stmt 0 discriminator 1
 2355 0d00 BB68     		ldr	r3, [r7, #8]
 2356 0d02 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2357 0d04 1A46     		mov	r2, r3
 2358 0d06 FB69     		ldr	r3, [r7, #28]
 2359 0d08 9A42     		cmp	r2, r3
 2360 0d0a E5DC     		bgt	.L141
1547:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1548:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1549:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1550:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1551:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1552:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2361              		.loc 1 1552 0 is_stmt 1
 2362 0d0c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2363 0d0e FB69     		ldr	r3, [r7, #28]
 2364 0d10 1344     		add	r3, r3, r2
 2365 0d12 9B00     		lsls	r3, r3, #2
 2366 0d14 1A46     		mov	r2, r3
 2367 0d16 BB69     		ldr	r3, [r7, #24]
 2368 0d18 1344     		add	r3, r3, r2
 2369 0d1a BB61     		str	r3, [r7, #24]
1553:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1554:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1555:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1556:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the Gx, Gy will be stored.
1557:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1558:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_CPTR) = offset >> 2;
 2370              		.loc 1 1558 0
 2371 0d1c 384A     		ldr	r2, .L146+12
 2372 0d1e BB69     		ldr	r3, [r7, #24]
 2373 0d20 9B08     		lsrs	r3, r3, #2
 2374 0d22 1360     		str	r3, [r2]
1559:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1560:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1561:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write x co-ordinate value of the Generator point in PKA RAM.
1562:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1563:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2375              		.loc 1 1563 0
 2376 0d24 0023     		movs	r3, #0
 2377 0d26 FB61     		str	r3, [r7, #28]
 2378 0d28 13E0     		b	.L142
 2379              	.L143:
1564:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1565:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32Gx[i];
 2380              		.loc 1 1565 0 discriminator 3
 2381 0d2a FB69     		ldr	r3, [r7, #28]
 2382 0d2c 9B00     		lsls	r3, r3, #2
 2383 0d2e 1A46     		mov	r2, r3
 2384 0d30 BB69     		ldr	r3, [r7, #24]
 2385 0d32 1344     		add	r3, r3, r2
 2386 0d34 03F18843 		add	r3, r3, #1140850688
 2387 0d38 03F5C043 		add	r3, r3, #24576
 2388 0d3c 1946     		mov	r1, r3
 2389 0d3e BB68     		ldr	r3, [r7, #8]
 2390 0d40 9A69     		ldr	r2, [r3, #24]
 2391 0d42 FB69     		ldr	r3, [r7, #28]
 2392 0d44 9B00     		lsls	r3, r3, #2
 2393 0d46 1344     		add	r3, r3, r2
 2394 0d48 1B68     		ldr	r3, [r3]
 2395 0d4a 0B60     		str	r3, [r1]
1563:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2396              		.loc 1 1563 0 discriminator 3
 2397 0d4c FB69     		ldr	r3, [r7, #28]
 2398 0d4e 0133     		adds	r3, r3, #1
 2399 0d50 FB61     		str	r3, [r7, #28]
 2400              	.L142:
1563:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2401              		.loc 1 1563 0 is_stmt 0 discriminator 1
 2402 0d52 BB68     		ldr	r3, [r7, #8]
 2403 0d54 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2404 0d56 1A46     		mov	r2, r3
 2405 0d58 FB69     		ldr	r3, [r7, #28]
 2406 0d5a 9A42     		cmp	r2, r3
 2407 0d5c E5DC     		bgt	.L143
1566:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1567:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1568:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1569:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1570:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1571:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2408              		.loc 1 1571 0 is_stmt 1
 2409 0d5e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2410 0d60 FB69     		ldr	r3, [r7, #28]
 2411 0d62 1344     		add	r3, r3, r2
 2412 0d64 9B00     		lsls	r3, r3, #2
 2413 0d66 1A46     		mov	r2, r3
 2414 0d68 BB69     		ldr	r3, [r7, #24]
 2415 0d6a 1344     		add	r3, r3, r2
 2416 0d6c BB61     		str	r3, [r7, #24]
1572:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1573:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1574:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write y co-ordinate value of the Generator point in PKA RAM.
1575:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1576:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2417              		.loc 1 1576 0
 2418 0d6e 0023     		movs	r3, #0
 2419 0d70 FB61     		str	r3, [r7, #28]
 2420 0d72 13E0     		b	.L144
 2421              	.L145:
1577:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1578:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32Gy[i];
 2422              		.loc 1 1578 0 discriminator 3
 2423 0d74 FB69     		ldr	r3, [r7, #28]
 2424 0d76 9B00     		lsls	r3, r3, #2
 2425 0d78 1A46     		mov	r2, r3
 2426 0d7a BB69     		ldr	r3, [r7, #24]
 2427 0d7c 1344     		add	r3, r3, r2
 2428 0d7e 03F18843 		add	r3, r3, #1140850688
 2429 0d82 03F5C043 		add	r3, r3, #24576
 2430 0d86 1946     		mov	r1, r3
 2431 0d88 BB68     		ldr	r3, [r7, #8]
 2432 0d8a DA69     		ldr	r2, [r3, #28]
 2433 0d8c FB69     		ldr	r3, [r7, #28]
 2434 0d8e 9B00     		lsls	r3, r3, #2
 2435 0d90 1344     		add	r3, r3, r2
 2436 0d92 1B68     		ldr	r3, [r3]
 2437 0d94 0B60     		str	r3, [r1]
1576:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2438              		.loc 1 1576 0 discriminator 3
 2439 0d96 FB69     		ldr	r3, [r7, #28]
 2440 0d98 0133     		adds	r3, r3, #1
 2441 0d9a FB61     		str	r3, [r7, #28]
 2442              	.L144:
1576:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2443              		.loc 1 1576 0 is_stmt 0 discriminator 1
 2444 0d9c BB68     		ldr	r3, [r7, #8]
 2445 0d9e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2446 0da0 1A46     		mov	r2, r3
 2447 0da2 FB69     		ldr	r3, [r7, #28]
 2448 0da4 9A42     		cmp	r2, r3
 2449 0da6 E5DC     		bgt	.L145
1579:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1580:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1581:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1582:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1583:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1584:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2450              		.loc 1 1584 0 is_stmt 1
 2451 0da8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2452 0daa FB69     		ldr	r3, [r7, #28]
 2453 0dac 1344     		add	r3, r3, r2
 2454 0dae 9B00     		lsls	r3, r3, #2
 2455 0db0 1A46     		mov	r2, r3
 2456 0db2 BB69     		ldr	r3, [r7, #24]
 2457 0db4 1344     		add	r3, r3, r2
 2458 0db6 BB61     		str	r3, [r7, #24]
1585:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1586:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1587:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the result location.
1588:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1589:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32ResultVector =  PKA_RAM_BASE + offset;
 2459              		.loc 1 1589 0
 2460 0db8 BB69     		ldr	r3, [r7, #24]
 2461 0dba 03F18843 		add	r3, r3, #1140850688
 2462 0dbe 03F5C043 		add	r3, r3, #24576
 2463 0dc2 7A68     		ldr	r2, [r7, #4]
 2464 0dc4 1360     		str	r3, [r2]
1590:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1591:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1592:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1593:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1594:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 2465              		.loc 1 1594 0
 2466 0dc6 0F4A     		ldr	r2, .L146+16
 2467 0dc8 BB69     		ldr	r3, [r7, #24]
 2468 0dca 9B08     		lsrs	r3, r3, #2
 2469 0dcc 1360     		str	r3, [r2]
1595:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1596:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1597:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load length registers.
1598:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1599:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_ALENGTH) = ptCurve->ui8Size;
 2470              		.loc 1 1599 0
 2471 0dce 0E4A     		ldr	r2, .L146+20
 2472 0dd0 BB68     		ldr	r3, [r7, #8]
 2473 0dd2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2474 0dd4 1360     		str	r3, [r2]
1600:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 2475              		.loc 1 1600 0
 2476 0dd6 0D4A     		ldr	r2, .L146+24
 2477 0dd8 BB68     		ldr	r3, [r7, #8]
 2478 0dda 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2479 0ddc 1360     		str	r3, [r2]
1601:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1602:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1603:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Set the PKA function to ECC-MULT and start the operation.
1604:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1605:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000D000;
 2480              		.loc 1 1605 0
 2481 0dde 054B     		ldr	r3, .L146
 2482 0de0 4FF45042 		mov	r2, #53248
 2483 0de4 1A60     		str	r2, [r3]
1606:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1607:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 2484              		.loc 1 1607 0
 2485 0de6 0023     		movs	r3, #0
 2486              	.L133:
1608:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 2487              		.loc 1 1608 0
 2488 0de8 1846     		mov	r0, r3
 2489 0dea 2437     		adds	r7, r7, #36
 2490              		.cfi_def_cfa_offset 4
 2491 0dec BD46     		mov	sp, r7
 2492              		.cfi_def_cfa_register 13
 2493              		@ sp needed
 2494 0dee 5DF8047B 		ldr	r7, [sp], #4
 2495              		.cfi_restore 7
 2496              		.cfi_def_cfa_offset 0
 2497 0df2 7047     		bx	lr
 2498              	.L147:
 2499              		.align	2
 2500              	.L146:
 2501 0df4 1C400044 		.word	1140867100
 2502 0df8 00400044 		.word	1140867072
 2503 0dfc 04400044 		.word	1140867076
 2504 0e00 08400044 		.word	1140867080
 2505 0e04 0C400044 		.word	1140867084
 2506 0e08 10400044 		.word	1140867088
 2507 0e0c 14400044 		.word	1140867092
 2508              		.cfi_endproc
 2509              	.LFE18:
 2511              		.align	2
 2512              		.global	PKAECCMultGenPtGetResult
 2513              		.thumb
 2514              		.thumb_func
 2516              	PKAECCMultGenPtGetResult:
 2517              	.LFB19:
1609:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1610:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1611:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1612:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Gets the result of ECC Multiplication with Generator point.
1613:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1614:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant EC
1615:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! point will be stored.  The callee is responsible to allocate the space for
1616:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the ec point structure and the x and y co-ordinate as well.
1617:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1618:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! was provided by the start function \sa PKAECCMultGenPtStart().
1619:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1620:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function gets the result of ecc point multiplication operation on the
1621:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! scalar point and the known generator point on the curve, previously started
1622:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! using the function \sa PKAECCMultGenPtStart().
1623:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1624:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns:
1625:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1626:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1627:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the operation.
1628:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1629:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1630:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1631:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1632:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
1633:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAECCMultGenPtGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1634:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 2518              		.loc 1 1634 0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 24
 2521              		@ frame_needed = 1, uses_anonymous_args = 0
 2522              		@ link register save eliminated.
 2523 0e10 80B4     		push	{r7}
 2524              		.cfi_def_cfa_offset 4
 2525              		.cfi_offset 7, -4
 2526 0e12 87B0     		sub	sp, sp, #28
 2527              		.cfi_def_cfa_offset 32
 2528 0e14 00AF     		add	r7, sp, #0
 2529              		.cfi_def_cfa_register 7
 2530 0e16 7860     		str	r0, [r7, #4]
 2531 0e18 3960     		str	r1, [r7]
1635:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
1636:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t regMSWVal;
1637:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t addr;
1638:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t len;
1639:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1640:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1641:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for the arguments.
1642:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1643:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1644:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1645:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1646:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1647:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1648:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1649:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1650:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Verify that the operation is completed.
1651:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1652:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2532              		.loc 1 1652 0
 2533 0e1a 314B     		ldr	r3, .L157
 2534 0e1c 1B68     		ldr	r3, [r3]
 2535 0e1e 03F40043 		and	r3, r3, #32768
 2536 0e22 002B     		cmp	r3, #0
 2537 0e24 01D0     		beq	.L149
1653:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1654:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2538              		.loc 1 1654 0
 2539 0e26 0723     		movs	r3, #7
 2540 0e28 54E0     		b	.L150
 2541              	.L149:
1655:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1656:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1657:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 2542              		.loc 1 1657 0
 2543 0e2a 2E4B     		ldr	r3, .L157+4
 2544 0e2c 1B68     		ldr	r3, [r3]
 2545 0e2e 002B     		cmp	r3, #0
 2546 0e30 4FD1     		bne	.L151
1658:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1659:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1660:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Get the MSW register value.
1661:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1662:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 2547              		.loc 1 1662 0
 2548 0e32 2D4B     		ldr	r3, .L157+8
 2549 0e34 1B68     		ldr	r3, [r3]
 2550 0e36 3B61     		str	r3, [r7, #16]
1663:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1664:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1665:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1666:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1667:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 2551              		.loc 1 1667 0
 2552 0e38 3B69     		ldr	r3, [r7, #16]
 2553 0e3a 03F40043 		and	r3, r3, #32768
 2554 0e3e 002B     		cmp	r3, #0
 2555 0e40 01D0     		beq	.L152
1668:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1669:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 2556              		.loc 1 1669 0
 2557 0e42 0423     		movs	r3, #4
 2558 0e44 46E0     		b	.L150
 2559              	.L152:
1670:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1671:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1672:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1673:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Get the length of the result.
1674:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1675:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 2560              		.loc 1 1675 0
 2561 0e46 3B69     		ldr	r3, [r7, #16]
 2562 0e48 C3F30A02 		ubfx	r2, r3, #0, #11
1676:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2563              		.loc 1 1676 0
 2564 0e4c 3B68     		ldr	r3, [r7]
 2565 0e4e 03F13C43 		add	r3, r3, #-1140850688
 2566 0e52 A3F5C043 		sub	r3, r3, #24576
 2567 0e56 9B08     		lsrs	r3, r3, #2
1675:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2568              		.loc 1 1675 0
 2569 0e58 D31A     		subs	r3, r2, r3
 2570 0e5a 0133     		adds	r3, r3, #1
 2571 0e5c FB60     		str	r3, [r7, #12]
1677:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1678:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         addr = ui32ResVectorLoc;
 2572              		.loc 1 1678 0
 2573 0e5e 3B68     		ldr	r3, [r7]
 2574 0e60 BB60     		str	r3, [r7, #8]
1679:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1680:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1681:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Copy the x co-ordinate value of the result from vector D into the
1682:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // EC point.
1683:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1684:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         for(i = 0; i < len; i++)
 2575              		.loc 1 1684 0
 2576 0e62 0023     		movs	r3, #0
 2577 0e64 7B61     		str	r3, [r7, #20]
 2578 0e66 0EE0     		b	.L153
 2579              	.L154:
1685:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1686:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG( (addr + 4*i) );
 2580              		.loc 1 1686 0 discriminator 3
 2581 0e68 7B68     		ldr	r3, [r7, #4]
 2582 0e6a 1A68     		ldr	r2, [r3]
 2583 0e6c 7B69     		ldr	r3, [r7, #20]
 2584 0e6e 9B00     		lsls	r3, r3, #2
 2585 0e70 1344     		add	r3, r3, r2
 2586 0e72 7A69     		ldr	r2, [r7, #20]
 2587 0e74 9200     		lsls	r2, r2, #2
 2588 0e76 1146     		mov	r1, r2
 2589 0e78 BA68     		ldr	r2, [r7, #8]
 2590 0e7a 0A44     		add	r2, r2, r1
 2591 0e7c 1268     		ldr	r2, [r2]
 2592 0e7e 1A60     		str	r2, [r3]
1684:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 2593              		.loc 1 1684 0 discriminator 3
 2594 0e80 7B69     		ldr	r3, [r7, #20]
 2595 0e82 0133     		adds	r3, r3, #1
 2596 0e84 7B61     		str	r3, [r7, #20]
 2597              	.L153:
1684:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 2598              		.loc 1 1684 0 is_stmt 0 discriminator 1
 2599 0e86 7A69     		ldr	r2, [r7, #20]
 2600 0e88 FB68     		ldr	r3, [r7, #12]
 2601 0e8a 9A42     		cmp	r2, r3
 2602 0e8c ECD3     		bcc	.L154
1687:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1688:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1689:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 2603              		.loc 1 1689 0 is_stmt 1
 2604 0e8e FB68     		ldr	r3, [r7, #12]
 2605 0e90 03F00102 		and	r2, r3, #1
 2606 0e94 7B69     		ldr	r3, [r7, #20]
 2607 0e96 1344     		add	r3, r3, r2
 2608 0e98 0233     		adds	r3, r3, #2
 2609 0e9a 9B00     		lsls	r3, r3, #2
 2610 0e9c BA68     		ldr	r2, [r7, #8]
 2611 0e9e 1344     		add	r3, r3, r2
 2612 0ea0 BB60     		str	r3, [r7, #8]
1690:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1691:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1692:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Copy the y co-ordinate value of the result from vector D into the
1693:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // EC point.
1694:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1695:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         for(i = 0; i < len; i++)
 2613              		.loc 1 1695 0
 2614 0ea2 0023     		movs	r3, #0
 2615 0ea4 7B61     		str	r3, [r7, #20]
 2616 0ea6 0EE0     		b	.L155
 2617              	.L156:
1696:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1697:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG( (addr + 4*i) );
 2618              		.loc 1 1697 0 discriminator 3
 2619 0ea8 7B68     		ldr	r3, [r7, #4]
 2620 0eaa 5A68     		ldr	r2, [r3, #4]
 2621 0eac 7B69     		ldr	r3, [r7, #20]
 2622 0eae 9B00     		lsls	r3, r3, #2
 2623 0eb0 1344     		add	r3, r3, r2
 2624 0eb2 7A69     		ldr	r2, [r7, #20]
 2625 0eb4 9200     		lsls	r2, r2, #2
 2626 0eb6 1146     		mov	r1, r2
 2627 0eb8 BA68     		ldr	r2, [r7, #8]
 2628 0eba 0A44     		add	r2, r2, r1
 2629 0ebc 1268     		ldr	r2, [r2]
 2630 0ebe 1A60     		str	r2, [r3]
1695:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 2631              		.loc 1 1695 0 discriminator 3
 2632 0ec0 7B69     		ldr	r3, [r7, #20]
 2633 0ec2 0133     		adds	r3, r3, #1
 2634 0ec4 7B61     		str	r3, [r7, #20]
 2635              	.L155:
1695:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 2636              		.loc 1 1695 0 is_stmt 0 discriminator 1
 2637 0ec6 7A69     		ldr	r2, [r7, #20]
 2638 0ec8 FB68     		ldr	r3, [r7, #12]
 2639 0eca 9A42     		cmp	r2, r3
 2640 0ecc ECD3     		bcc	.L156
1698:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1699:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1700:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2641              		.loc 1 1700 0 is_stmt 1
 2642 0ece 0023     		movs	r3, #0
 2643 0ed0 00E0     		b	.L150
 2644              	.L151:
1701:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1702:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     else
1703:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1704:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 2645              		.loc 1 1704 0
 2646 0ed2 0123     		movs	r3, #1
 2647              	.L150:
1705:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1706:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 2648              		.loc 1 1706 0
 2649 0ed4 1846     		mov	r0, r3
 2650 0ed6 1C37     		adds	r7, r7, #28
 2651              		.cfi_def_cfa_offset 4
 2652 0ed8 BD46     		mov	sp, r7
 2653              		.cfi_def_cfa_register 13
 2654              		@ sp needed
 2655 0eda 5DF8047B 		ldr	r7, [sp], #4
 2656              		.cfi_restore 7
 2657              		.cfi_def_cfa_offset 0
 2658 0ede 7047     		bx	lr
 2659              	.L158:
 2660              		.align	2
 2661              	.L157:
 2662 0ee0 1C400044 		.word	1140867100
 2663 0ee4 18400044 		.word	1140867096
 2664 0ee8 24400044 		.word	1140867108
 2665              		.cfi_endproc
 2666              	.LFE19:
 2668              		.align	2
 2669              		.global	PKAECCAddStart
 2670              		.thumb
 2671              		.thumb_func
 2673              	PKAECCAddStart:
 2674              	.LFB20:
1707:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1708:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1709:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1710:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Starts the ECC Addition.
1711:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1712:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptEcPt1 is the pointer to the structure containing the first
1713:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! ecc point.
1714:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptEcPt2 is the pointer to the structure containing the
1715:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! second ecc point.
1716:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1717:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! info.
1718:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1719:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! which will be set by this function.
1720:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1721:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function starts the ecc point addition operation on the
1722:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! two given ec points and generates the resultant ecc point.
1723:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1724:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!\return Returns: 
1725:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1726:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1727:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! some other operation.
1728:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1729:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1730:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
1731:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAECCAddStart(tECPt* ptEcPt1, tECPt* ptEcPt2,tECCCurveInfo* ptCurve,
1732:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****                uint32_t* pui32ResultVector)
1733:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 2675              		.loc 1 1733 0
 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 32
 2678              		@ frame_needed = 1, uses_anonymous_args = 0
 2679              		@ link register save eliminated.
 2680 0eec 80B4     		push	{r7}
 2681              		.cfi_def_cfa_offset 4
 2682              		.cfi_offset 7, -4
 2683 0eee 89B0     		sub	sp, sp, #36
 2684              		.cfi_def_cfa_offset 40
 2685 0ef0 00AF     		add	r7, sp, #0
 2686              		.cfi_def_cfa_register 7
 2687 0ef2 F860     		str	r0, [r7, #12]
 2688 0ef4 B960     		str	r1, [r7, #8]
 2689 0ef6 7A60     		str	r2, [r7, #4]
 2690 0ef8 3B60     		str	r3, [r7]
1734:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint8_t extraBuf;
1735:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t offset;
1736:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
1737:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1738:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1739:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for the arguments.
1740:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1741:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt1);
1742:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt1->pui32X);
1743:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt1->pui32Y);
1744:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt2);
1745:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt2->pui32X);
1746:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptEcPt2->pui32Y);
1747:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1748:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1749:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1750:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset = 0;
 2691              		.loc 1 1750 0
 2692 0efa 0023     		movs	r3, #0
 2693 0efc BB61     		str	r3, [r7, #24]
1751:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1752:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1753:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Make sure no operation is in progress.
1754:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1755:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2694              		.loc 1 1755 0
 2695 0efe 894B     		ldr	r3, .L174
 2696 0f00 1B68     		ldr	r3, [r3]
 2697 0f02 03F40043 		and	r3, r3, #32768
 2698 0f06 002B     		cmp	r3, #0
 2699 0f08 01D0     		beq	.L160
1756:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1757:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2700              		.loc 1 1757 0
 2701 0f0a 0723     		movs	r3, #7
 2702 0f0c 04E1     		b	.L161
 2703              	.L160:
1758:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1759:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1760:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1761:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Calculate the extra buffer requirement.
1762:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1763:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 2704              		.loc 1 1763 0
 2705 0f0e 7B68     		ldr	r3, [r7, #4]
 2706 0f10 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2707 0f12 03F00103 		and	r3, r3, #1
 2708 0f16 DBB2     		uxtb	r3, r3
 2709 0f18 0233     		adds	r3, r3, #2
 2710 0f1a FB75     		strb	r3, [r7, #23]
1764:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1765:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1766:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1767:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the first ecPt will be stored.
1768:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1769:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_APTR) = offset >> 2;
 2711              		.loc 1 1769 0
 2712 0f1c 824A     		ldr	r2, .L174+4
 2713 0f1e BB69     		ldr	r3, [r7, #24]
 2714 0f20 9B08     		lsrs	r3, r3, #2
 2715 0f22 1360     		str	r3, [r2]
1770:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1771:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1772:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the x co-ordinate value of the first EC point in PKA RAM.
1773:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1774:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2716              		.loc 1 1774 0
 2717 0f24 0023     		movs	r3, #0
 2718 0f26 FB61     		str	r3, [r7, #28]
 2719 0f28 13E0     		b	.L162
 2720              	.L163:
1775:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1776:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt1->pui32X[i];
 2721              		.loc 1 1776 0 discriminator 3
 2722 0f2a FB69     		ldr	r3, [r7, #28]
 2723 0f2c 9B00     		lsls	r3, r3, #2
 2724 0f2e 1A46     		mov	r2, r3
 2725 0f30 BB69     		ldr	r3, [r7, #24]
 2726 0f32 1344     		add	r3, r3, r2
 2727 0f34 03F18843 		add	r3, r3, #1140850688
 2728 0f38 03F5C043 		add	r3, r3, #24576
 2729 0f3c 1946     		mov	r1, r3
 2730 0f3e FB68     		ldr	r3, [r7, #12]
 2731 0f40 1A68     		ldr	r2, [r3]
 2732 0f42 FB69     		ldr	r3, [r7, #28]
 2733 0f44 9B00     		lsls	r3, r3, #2
 2734 0f46 1344     		add	r3, r3, r2
 2735 0f48 1B68     		ldr	r3, [r3]
 2736 0f4a 0B60     		str	r3, [r1]
1774:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2737              		.loc 1 1774 0 discriminator 3
 2738 0f4c FB69     		ldr	r3, [r7, #28]
 2739 0f4e 0133     		adds	r3, r3, #1
 2740 0f50 FB61     		str	r3, [r7, #28]
 2741              	.L162:
1774:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2742              		.loc 1 1774 0 is_stmt 0 discriminator 1
 2743 0f52 7B68     		ldr	r3, [r7, #4]
 2744 0f54 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2745 0f56 1A46     		mov	r2, r3
 2746 0f58 FB69     		ldr	r3, [r7, #28]
 2747 0f5a 9A42     		cmp	r2, r3
 2748 0f5c E5DC     		bgt	.L163
1777:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1778:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1779:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1780:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1781:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1782:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2749              		.loc 1 1782 0 is_stmt 1
 2750 0f5e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2751 0f60 FB69     		ldr	r3, [r7, #28]
 2752 0f62 1344     		add	r3, r3, r2
 2753 0f64 9B00     		lsls	r3, r3, #2
 2754 0f66 1A46     		mov	r2, r3
 2755 0f68 BB69     		ldr	r3, [r7, #24]
 2756 0f6a 1344     		add	r3, r3, r2
 2757 0f6c BB61     		str	r3, [r7, #24]
1783:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1784:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1785:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the y co-ordinate value of the first EC point in PKA RAM.
1786:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1787:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2758              		.loc 1 1787 0
 2759 0f6e 0023     		movs	r3, #0
 2760 0f70 FB61     		str	r3, [r7, #28]
 2761 0f72 13E0     		b	.L164
 2762              	.L165:
1788:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1789:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt1->pui32Y[i];
 2763              		.loc 1 1789 0 discriminator 3
 2764 0f74 FB69     		ldr	r3, [r7, #28]
 2765 0f76 9B00     		lsls	r3, r3, #2
 2766 0f78 1A46     		mov	r2, r3
 2767 0f7a BB69     		ldr	r3, [r7, #24]
 2768 0f7c 1344     		add	r3, r3, r2
 2769 0f7e 03F18843 		add	r3, r3, #1140850688
 2770 0f82 03F5C043 		add	r3, r3, #24576
 2771 0f86 1946     		mov	r1, r3
 2772 0f88 FB68     		ldr	r3, [r7, #12]
 2773 0f8a 5A68     		ldr	r2, [r3, #4]
 2774 0f8c FB69     		ldr	r3, [r7, #28]
 2775 0f8e 9B00     		lsls	r3, r3, #2
 2776 0f90 1344     		add	r3, r3, r2
 2777 0f92 1B68     		ldr	r3, [r3]
 2778 0f94 0B60     		str	r3, [r1]
1787:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2779              		.loc 1 1787 0 discriminator 3
 2780 0f96 FB69     		ldr	r3, [r7, #28]
 2781 0f98 0133     		adds	r3, r3, #1
 2782 0f9a FB61     		str	r3, [r7, #28]
 2783              	.L164:
1787:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2784              		.loc 1 1787 0 is_stmt 0 discriminator 1
 2785 0f9c 7B68     		ldr	r3, [r7, #4]
 2786 0f9e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2787 0fa0 1A46     		mov	r2, r3
 2788 0fa2 FB69     		ldr	r3, [r7, #28]
 2789 0fa4 9A42     		cmp	r2, r3
 2790 0fa6 E5DC     		bgt	.L165
1790:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1791:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1792:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1793:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1794:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1795:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2791              		.loc 1 1795 0 is_stmt 1
 2792 0fa8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2793 0faa FB69     		ldr	r3, [r7, #28]
 2794 0fac 1344     		add	r3, r3, r2
 2795 0fae 9B00     		lsls	r3, r3, #2
 2796 0fb0 1A46     		mov	r2, r3
 2797 0fb2 BB69     		ldr	r3, [r7, #24]
 2798 0fb4 1344     		add	r3, r3, r2
 2799 0fb6 BB61     		str	r3, [r7, #24]
1796:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1797:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1798:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1799:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the curve parameters will be stored.
1800:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1801:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_BPTR) = offset >> 2;
 2800              		.loc 1 1801 0
 2801 0fb8 5C4A     		ldr	r2, .L174+8
 2802 0fba BB69     		ldr	r3, [r7, #24]
 2803 0fbc 9B08     		lsrs	r3, r3, #2
 2804 0fbe 1360     		str	r3, [r2]
1802:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1803:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1804:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B
1805:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1806:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2805              		.loc 1 1806 0
 2806 0fc0 0023     		movs	r3, #0
 2807 0fc2 FB61     		str	r3, [r7, #28]
 2808 0fc4 13E0     		b	.L166
 2809              	.L167:
1807:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1808:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 2810              		.loc 1 1808 0 discriminator 3
 2811 0fc6 FB69     		ldr	r3, [r7, #28]
 2812 0fc8 9B00     		lsls	r3, r3, #2
 2813 0fca 1A46     		mov	r2, r3
 2814 0fcc BB69     		ldr	r3, [r7, #24]
 2815 0fce 1344     		add	r3, r3, r2
 2816 0fd0 03F18843 		add	r3, r3, #1140850688
 2817 0fd4 03F5C043 		add	r3, r3, #24576
 2818 0fd8 1946     		mov	r1, r3
1809:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2819              		.loc 1 1809 0 discriminator 3
 2820 0fda 7B68     		ldr	r3, [r7, #4]
 2821 0fdc 9A68     		ldr	r2, [r3, #8]
 2822 0fde FB69     		ldr	r3, [r7, #28]
 2823 0fe0 9B00     		lsls	r3, r3, #2
 2824 0fe2 1344     		add	r3, r3, r2
 2825 0fe4 1B68     		ldr	r3, [r3]
1808:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2826              		.loc 1 1808 0 discriminator 3
 2827 0fe6 0B60     		str	r3, [r1]
1806:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2828              		.loc 1 1806 0 discriminator 3
 2829 0fe8 FB69     		ldr	r3, [r7, #28]
 2830 0fea 0133     		adds	r3, r3, #1
 2831 0fec FB61     		str	r3, [r7, #28]
 2832              	.L166:
1806:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2833              		.loc 1 1806 0 is_stmt 0 discriminator 1
 2834 0fee 7B68     		ldr	r3, [r7, #4]
 2835 0ff0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2836 0ff2 1A46     		mov	r2, r3
 2837 0ff4 FB69     		ldr	r3, [r7, #28]
 2838 0ff6 9A42     		cmp	r2, r3
 2839 0ff8 E5DC     		bgt	.L167
1810:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1811:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1812:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1813:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1814:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1815:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2840              		.loc 1 1815 0 is_stmt 1
 2841 0ffa FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2842 0ffc FB69     		ldr	r3, [r7, #28]
 2843 0ffe 1344     		add	r3, r3, r2
 2844 1000 9B00     		lsls	r3, r3, #2
 2845 1002 1A46     		mov	r2, r3
 2846 1004 BB69     		ldr	r3, [r7, #24]
 2847 1006 1344     		add	r3, r3, r2
 2848 1008 BB61     		str	r3, [r7, #24]
1816:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1817:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1818:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Write curve parameter 'a'.
1819:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1820:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2849              		.loc 1 1820 0
 2850 100a 0023     		movs	r3, #0
 2851 100c FB61     		str	r3, [r7, #28]
 2852 100e 13E0     		b	.L168
 2853              	.L169:
1821:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1822:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 2854              		.loc 1 1822 0 discriminator 3
 2855 1010 FB69     		ldr	r3, [r7, #28]
 2856 1012 9B00     		lsls	r3, r3, #2
 2857 1014 1A46     		mov	r2, r3
 2858 1016 BB69     		ldr	r3, [r7, #24]
 2859 1018 1344     		add	r3, r3, r2
 2860 101a 03F18843 		add	r3, r3, #1140850688
 2861 101e 03F5C043 		add	r3, r3, #24576
 2862 1022 1946     		mov	r1, r3
 2863 1024 7B68     		ldr	r3, [r7, #4]
 2864 1026 1A69     		ldr	r2, [r3, #16]
 2865 1028 FB69     		ldr	r3, [r7, #28]
 2866 102a 9B00     		lsls	r3, r3, #2
 2867 102c 1344     		add	r3, r3, r2
 2868 102e 1B68     		ldr	r3, [r3]
 2869 1030 0B60     		str	r3, [r1]
1820:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2870              		.loc 1 1820 0 discriminator 3
 2871 1032 FB69     		ldr	r3, [r7, #28]
 2872 1034 0133     		adds	r3, r3, #1
 2873 1036 FB61     		str	r3, [r7, #28]
 2874              	.L168:
1820:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2875              		.loc 1 1820 0 is_stmt 0 discriminator 1
 2876 1038 7B68     		ldr	r3, [r7, #4]
 2877 103a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2878 103c 1A46     		mov	r2, r3
 2879 103e FB69     		ldr	r3, [r7, #28]
 2880 1040 9A42     		cmp	r2, r3
 2881 1042 E5DC     		bgt	.L169
1823:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1824:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1825:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1826:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1827:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1828:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2882              		.loc 1 1828 0 is_stmt 1
 2883 1044 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2884 1046 FB69     		ldr	r3, [r7, #28]
 2885 1048 1344     		add	r3, r3, r2
 2886 104a 9B00     		lsls	r3, r3, #2
 2887 104c 1A46     		mov	r2, r3
 2888 104e BB69     		ldr	r3, [r7, #24]
 2889 1050 1344     		add	r3, r3, r2
 2890 1052 BB61     		str	r3, [r7, #24]
1829:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1830:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1831:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1832:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // where the ecPt2 will be stored.
1833:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1834:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_CPTR) = offset >> 2;
 2891              		.loc 1 1834 0
 2892 1054 364A     		ldr	r2, .L174+12
 2893 1056 BB69     		ldr	r3, [r7, #24]
 2894 1058 9B08     		lsrs	r3, r3, #2
 2895 105a 1360     		str	r3, [r2]
1835:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1836:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1837:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the x co-ordinate value of the second EC point in PKA RAM.
1838:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1839:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2896              		.loc 1 1839 0
 2897 105c 0023     		movs	r3, #0
 2898 105e FB61     		str	r3, [r7, #28]
 2899 1060 13E0     		b	.L170
 2900              	.L171:
1840:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1841:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt2->pui32X[i];
 2901              		.loc 1 1841 0 discriminator 3
 2902 1062 FB69     		ldr	r3, [r7, #28]
 2903 1064 9B00     		lsls	r3, r3, #2
 2904 1066 1A46     		mov	r2, r3
 2905 1068 BB69     		ldr	r3, [r7, #24]
 2906 106a 1344     		add	r3, r3, r2
 2907 106c 03F18843 		add	r3, r3, #1140850688
 2908 1070 03F5C043 		add	r3, r3, #24576
 2909 1074 1946     		mov	r1, r3
 2910 1076 BB68     		ldr	r3, [r7, #8]
 2911 1078 1A68     		ldr	r2, [r3]
 2912 107a FB69     		ldr	r3, [r7, #28]
 2913 107c 9B00     		lsls	r3, r3, #2
 2914 107e 1344     		add	r3, r3, r2
 2915 1080 1B68     		ldr	r3, [r3]
 2916 1082 0B60     		str	r3, [r1]
1839:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2917              		.loc 1 1839 0 discriminator 3
 2918 1084 FB69     		ldr	r3, [r7, #28]
 2919 1086 0133     		adds	r3, r3, #1
 2920 1088 FB61     		str	r3, [r7, #28]
 2921              	.L170:
1839:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2922              		.loc 1 1839 0 is_stmt 0 discriminator 1
 2923 108a 7B68     		ldr	r3, [r7, #4]
 2924 108c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2925 108e 1A46     		mov	r2, r3
 2926 1090 FB69     		ldr	r3, [r7, #28]
 2927 1092 9A42     		cmp	r2, r3
 2928 1094 E5DC     		bgt	.L171
1842:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1843:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1844:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1845:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1846:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1847:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2929              		.loc 1 1847 0 is_stmt 1
 2930 1096 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2931 1098 FB69     		ldr	r3, [r7, #28]
 2932 109a 1344     		add	r3, r3, r2
 2933 109c 9B00     		lsls	r3, r3, #2
 2934 109e 1A46     		mov	r2, r3
 2935 10a0 BB69     		ldr	r3, [r7, #24]
 2936 10a2 1344     		add	r3, r3, r2
 2937 10a4 BB61     		str	r3, [r7, #24]
1848:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1849:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1850:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load the y co-ordinate value of the second EC point in PKA RAM.
1851:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1852:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2938              		.loc 1 1852 0
 2939 10a6 0023     		movs	r3, #0
 2940 10a8 FB61     		str	r3, [r7, #28]
 2941 10aa 13E0     		b	.L172
 2942              	.L173:
1853:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1854:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt2->pui32Y[i];
 2943              		.loc 1 1854 0 discriminator 3
 2944 10ac FB69     		ldr	r3, [r7, #28]
 2945 10ae 9B00     		lsls	r3, r3, #2
 2946 10b0 1A46     		mov	r2, r3
 2947 10b2 BB69     		ldr	r3, [r7, #24]
 2948 10b4 1344     		add	r3, r3, r2
 2949 10b6 03F18843 		add	r3, r3, #1140850688
 2950 10ba 03F5C043 		add	r3, r3, #24576
 2951 10be 1946     		mov	r1, r3
 2952 10c0 BB68     		ldr	r3, [r7, #8]
 2953 10c2 5A68     		ldr	r2, [r3, #4]
 2954 10c4 FB69     		ldr	r3, [r7, #28]
 2955 10c6 9B00     		lsls	r3, r3, #2
 2956 10c8 1344     		add	r3, r3, r2
 2957 10ca 1B68     		ldr	r3, [r3]
 2958 10cc 0B60     		str	r3, [r1]
1852:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2959              		.loc 1 1852 0 discriminator 3
 2960 10ce FB69     		ldr	r3, [r7, #28]
 2961 10d0 0133     		adds	r3, r3, #1
 2962 10d2 FB61     		str	r3, [r7, #28]
 2963              	.L172:
1852:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
 2964              		.loc 1 1852 0 is_stmt 0 discriminator 1
 2965 10d4 7B68     		ldr	r3, [r7, #4]
 2966 10d6 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2967 10d8 1A46     		mov	r2, r3
 2968 10da FB69     		ldr	r3, [r7, #28]
 2969 10dc 9A42     		cmp	r2, r3
 2970 10de E5DC     		bgt	.L173
1855:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1856:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1857:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1858:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1859:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1860:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2971              		.loc 1 1860 0 is_stmt 1
 2972 10e0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2973 10e2 FB69     		ldr	r3, [r7, #28]
 2974 10e4 1344     		add	r3, r3, r2
 2975 10e6 9B00     		lsls	r3, r3, #2
 2976 10e8 1A46     		mov	r2, r3
 2977 10ea BB69     		ldr	r3, [r7, #24]
 2978 10ec 1344     		add	r3, r3, r2
 2979 10ee BB61     		str	r3, [r7, #24]
1861:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1862:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1863:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Copy the result vector location.
1864:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1865:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 2980              		.loc 1 1865 0
 2981 10f0 BB69     		ldr	r3, [r7, #24]
 2982 10f2 03F18843 		add	r3, r3, #1140850688
 2983 10f6 03F5C043 		add	r3, r3, #24576
 2984 10fa 3A68     		ldr	r2, [r7]
 2985 10fc 1360     		str	r3, [r2]
1866:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1867:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1868:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1869:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1870:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 2986              		.loc 1 1870 0
 2987 10fe 0D4A     		ldr	r2, .L174+16
 2988 1100 BB69     		ldr	r3, [r7, #24]
 2989 1102 9B08     		lsrs	r3, r3, #2
 2990 1104 1360     		str	r3, [r2]
1871:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1872:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1873:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Load length registers.
1874:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1875:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 2991              		.loc 1 1875 0
 2992 1106 0C4A     		ldr	r2, .L174+20
 2993 1108 7B68     		ldr	r3, [r7, #4]
 2994 110a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2995 110c 1360     		str	r3, [r2]
1876:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1877:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1878:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Set the PKA Function to ECC-ADD and start the operation.
1879:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1880:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000B000;
 2996              		.loc 1 1880 0
 2997 110e 054B     		ldr	r3, .L174
 2998 1110 4FF43042 		mov	r2, #45056
 2999 1114 1A60     		str	r2, [r3]
1881:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1882:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 3000              		.loc 1 1882 0
 3001 1116 0023     		movs	r3, #0
 3002              	.L161:
1883:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 3003              		.loc 1 1883 0
 3004 1118 1846     		mov	r0, r3
 3005 111a 2437     		adds	r7, r7, #36
 3006              		.cfi_def_cfa_offset 4
 3007 111c BD46     		mov	sp, r7
 3008              		.cfi_def_cfa_register 13
 3009              		@ sp needed
 3010 111e 5DF8047B 		ldr	r7, [sp], #4
 3011              		.cfi_restore 7
 3012              		.cfi_def_cfa_offset 0
 3013 1122 7047     		bx	lr
 3014              	.L175:
 3015              		.align	2
 3016              	.L174:
 3017 1124 1C400044 		.word	1140867100
 3018 1128 00400044 		.word	1140867072
 3019 112c 04400044 		.word	1140867076
 3020 1130 08400044 		.word	1140867080
 3021 1134 0C400044 		.word	1140867084
 3022 1138 14400044 		.word	1140867092
 3023              		.cfi_endproc
 3024              	.LFE20:
 3026              		.align	2
 3027              		.global	PKAECCAddGetResult
 3028              		.thumb
 3029              		.thumb_func
 3031              	PKAECCAddGetResult:
 3032              	.LFB21:
1884:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1885:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1886:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1887:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! Gets the result of the ECC Addition
1888:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1889:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant
1890:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!        point will be stored. The callee is responsible to allocate memory,
1891:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!        for the ec point structure including the memory for x and y
1892:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!        co-ordinate values.
1893:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1894:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!        was provided by the function \sa PKAECCAddStart().
1895:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1896:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! This function gets the result of ecc point addition operation on the
1897:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! on the two given ec points, previously started using the function \sa
1898:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! PKAECCAddStart().
1899:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //!
1900:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! \return Returns:
1901:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1902:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1903:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! the operation.
1904:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1905:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1906:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //
1907:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** //*****************************************************************************
1908:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** tPKAStatus
1909:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** PKAECCAddGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1910:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** {
 3033              		.loc 1 1910 0
 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 24
 3036              		@ frame_needed = 1, uses_anonymous_args = 0
 3037              		@ link register save eliminated.
 3038 113c 80B4     		push	{r7}
 3039              		.cfi_def_cfa_offset 4
 3040              		.cfi_offset 7, -4
 3041 113e 87B0     		sub	sp, sp, #28
 3042              		.cfi_def_cfa_offset 32
 3043 1140 00AF     		add	r7, sp, #0
 3044              		.cfi_def_cfa_register 7
 3045 1142 7860     		str	r0, [r7, #4]
 3046 1144 3960     		str	r1, [r7]
1911:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t regMSWVal;
1912:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t addr;
1913:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     int i;
1914:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     uint32_t len;
1915:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1916:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1917:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     // Check for the arguments.
1918:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     //
1919:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1920:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1921:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1922:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1923:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1924:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1925:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 3047              		.loc 1 1925 0
 3048 1146 314B     		ldr	r3, .L185
 3049 1148 1B68     		ldr	r3, [r3]
 3050 114a 03F40043 		and	r3, r3, #32768
 3051 114e 002B     		cmp	r3, #0
 3052 1150 01D0     		beq	.L177
1926:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1927:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 3053              		.loc 1 1927 0
 3054 1152 0723     		movs	r3, #7
 3055 1154 54E0     		b	.L178
 3056              	.L177:
1928:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1929:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1930:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 3057              		.loc 1 1930 0
 3058 1156 2E4B     		ldr	r3, .L185+4
 3059 1158 1B68     		ldr	r3, [r3]
 3060 115a 002B     		cmp	r3, #0
 3061 115c 4FD1     		bne	.L179
1931:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1932:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1933:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Get the MSW register value.
1934:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1935:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 3062              		.loc 1 1935 0
 3063 115e 2D4B     		ldr	r3, .L185+8
 3064 1160 1B68     		ldr	r3, [r3]
 3065 1162 3B61     		str	r3, [r7, #16]
1936:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1937:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1938:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1939:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1940:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 3066              		.loc 1 1940 0
 3067 1164 3B69     		ldr	r3, [r7, #16]
 3068 1166 03F40043 		and	r3, r3, #32768
 3069 116a 002B     		cmp	r3, #0
 3070 116c 01D0     		beq	.L180
1941:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1942:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 3071              		.loc 1 1942 0
 3072 116e 0423     		movs	r3, #4
 3073 1170 46E0     		b	.L178
 3074              	.L180:
1943:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1944:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1945:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1946:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Get the length of the result.
1947:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1948:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 3075              		.loc 1 1948 0
 3076 1172 3B69     		ldr	r3, [r7, #16]
 3077 1174 C3F30A02 		ubfx	r2, r3, #0, #11
1949:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 3078              		.loc 1 1949 0
 3079 1178 3B68     		ldr	r3, [r7]
 3080 117a 03F13C43 		add	r3, r3, #-1140850688
 3081 117e A3F5C043 		sub	r3, r3, #24576
 3082 1182 9B08     		lsrs	r3, r3, #2
1948:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 3083              		.loc 1 1948 0
 3084 1184 D31A     		subs	r3, r2, r3
 3085 1186 0133     		adds	r3, r3, #1
 3086 1188 FB60     		str	r3, [r7, #12]
1950:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1951:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         addr = ui32ResVectorLoc;
 3087              		.loc 1 1951 0
 3088 118a 3B68     		ldr	r3, [r7]
 3089 118c BB60     		str	r3, [r7, #8]
1952:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1953:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1954:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Copy the x co-ordinate value of result from vector D into the
1955:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // the output EC Point.
1956:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1957:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         for(i = 0; i < len; i++)
 3090              		.loc 1 1957 0
 3091 118e 0023     		movs	r3, #0
 3092 1190 7B61     		str	r3, [r7, #20]
 3093 1192 0EE0     		b	.L181
 3094              	.L182:
1958:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1959:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG((addr + 4*i));
 3095              		.loc 1 1959 0 discriminator 3
 3096 1194 7B68     		ldr	r3, [r7, #4]
 3097 1196 1A68     		ldr	r2, [r3]
 3098 1198 7B69     		ldr	r3, [r7, #20]
 3099 119a 9B00     		lsls	r3, r3, #2
 3100 119c 1344     		add	r3, r3, r2
 3101 119e 7A69     		ldr	r2, [r7, #20]
 3102 11a0 9200     		lsls	r2, r2, #2
 3103 11a2 1146     		mov	r1, r2
 3104 11a4 BA68     		ldr	r2, [r7, #8]
 3105 11a6 0A44     		add	r2, r2, r1
 3106 11a8 1268     		ldr	r2, [r2]
 3107 11aa 1A60     		str	r2, [r3]
1957:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 3108              		.loc 1 1957 0 discriminator 3
 3109 11ac 7B69     		ldr	r3, [r7, #20]
 3110 11ae 0133     		adds	r3, r3, #1
 3111 11b0 7B61     		str	r3, [r7, #20]
 3112              	.L181:
1957:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 3113              		.loc 1 1957 0 is_stmt 0 discriminator 1
 3114 11b2 7A69     		ldr	r2, [r7, #20]
 3115 11b4 FB68     		ldr	r3, [r7, #12]
 3116 11b6 9A42     		cmp	r2, r3
 3117 11b8 ECD3     		bcc	.L182
1960:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1961:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1962:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 3118              		.loc 1 1962 0 is_stmt 1
 3119 11ba FB68     		ldr	r3, [r7, #12]
 3120 11bc 03F00102 		and	r2, r3, #1
 3121 11c0 7B69     		ldr	r3, [r7, #20]
 3122 11c2 1344     		add	r3, r3, r2
 3123 11c4 0233     		adds	r3, r3, #2
 3124 11c6 9B00     		lsls	r3, r3, #2
 3125 11c8 BA68     		ldr	r2, [r7, #8]
 3126 11ca 1344     		add	r3, r3, r2
 3127 11cc BB60     		str	r3, [r7, #8]
1963:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1964:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1965:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // Copy the y co-ordinate value of result from vector D into the
1966:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         // the output EC Point.
1967:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         //
1968:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         for(i = 0; i < len; i++)
 3128              		.loc 1 1968 0
 3129 11ce 0023     		movs	r3, #0
 3130 11d0 7B61     		str	r3, [r7, #20]
 3131 11d2 0EE0     		b	.L183
 3132              	.L184:
1969:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
1970:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG((addr + 4*i));
 3133              		.loc 1 1970 0 discriminator 3
 3134 11d4 7B68     		ldr	r3, [r7, #4]
 3135 11d6 5A68     		ldr	r2, [r3, #4]
 3136 11d8 7B69     		ldr	r3, [r7, #20]
 3137 11da 9B00     		lsls	r3, r3, #2
 3138 11dc 1344     		add	r3, r3, r2
 3139 11de 7A69     		ldr	r2, [r7, #20]
 3140 11e0 9200     		lsls	r2, r2, #2
 3141 11e2 1146     		mov	r1, r2
 3142 11e4 BA68     		ldr	r2, [r7, #8]
 3143 11e6 0A44     		add	r2, r2, r1
 3144 11e8 1268     		ldr	r2, [r2]
 3145 11ea 1A60     		str	r2, [r3]
1968:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 3146              		.loc 1 1968 0 discriminator 3
 3147 11ec 7B69     		ldr	r3, [r7, #20]
 3148 11ee 0133     		adds	r3, r3, #1
 3149 11f0 7B61     		str	r3, [r7, #20]
 3150              	.L183:
1968:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         {
 3151              		.loc 1 1968 0 is_stmt 0 discriminator 1
 3152 11f2 7A69     		ldr	r2, [r7, #20]
 3153 11f4 FB68     		ldr	r3, [r7, #12]
 3154 11f6 9A42     		cmp	r2, r3
 3155 11f8 ECD3     		bcc	.L184
1971:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         }
1972:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** 
1973:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 3156              		.loc 1 1973 0 is_stmt 1
 3157 11fa 0023     		movs	r3, #0
 3158 11fc 00E0     		b	.L178
 3159              	.L179:
1974:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1975:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     else
1976:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     {
1977:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 3160              		.loc 1 1977 0
 3161 11fe 0123     		movs	r3, #1
 3162              	.L178:
1978:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c ****     }
1979:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.c **** }
 3163              		.loc 1 1979 0
 3164 1200 1846     		mov	r0, r3
 3165 1202 1C37     		adds	r7, r7, #28
 3166              		.cfi_def_cfa_offset 4
 3167 1204 BD46     		mov	sp, r7
 3168              		.cfi_def_cfa_register 13
 3169              		@ sp needed
 3170 1206 5DF8047B 		ldr	r7, [sp], #4
 3171              		.cfi_restore 7
 3172              		.cfi_def_cfa_offset 0
 3173 120a 7047     		bx	lr
 3174              	.L186:
 3175              		.align	2
 3176              	.L185:
 3177 120c 1C400044 		.word	1140867100
 3178 1210 18400044 		.word	1140867096
 3179 1214 24400044 		.word	1140867108
 3180              		.cfi_endproc
 3181              	.LFE21:
 3183              	.Letext0:
 3184              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3185              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3186              		.file 4 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/ecc_curveinfo.h"
 3187              		.file 5 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/pka.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pka.c
     /tmp/cc613lLI.s:18     .text:0000000000000000 $t
     /tmp/cc613lLI.s:23     .text:0000000000000000 PKAEnableInt
     /tmp/cc613lLI.s:49     .text:000000000000000c PKADisableInt
     /tmp/cc613lLI.s:74     .text:0000000000000018 PKAClearInt
     /tmp/cc613lLI.s:99     .text:0000000000000024 PKARegInt
     /tmp/cc613lLI.s:133    .text:000000000000003c PKAUnRegInt
     /tmp/cc613lLI.s:158    .text:0000000000000048 PKAGetOpsStatus
     /tmp/cc613lLI.s:195    .text:0000000000000068 $d
     /tmp/cc613lLI.s:199    .text:000000000000006c $t
     /tmp/cc613lLI.s:204    .text:000000000000006c PKABigNumModStart
     /tmp/cc613lLI.s:373    .text:0000000000000174 $d
     /tmp/cc613lLI.s:382    .text:000000000000018c $t
     /tmp/cc613lLI.s:387    .text:000000000000018c PKABigNumModGetResult
     /tmp/cc613lLI.s:493    .text:000000000000021c $d
     /tmp/cc613lLI.s:498    .text:0000000000000224 $t
     /tmp/cc613lLI.s:503    .text:0000000000000224 PKABigNumCmpStart
     /tmp/cc613lLI.s:639    .text:00000000000002f0 $d
     /tmp/cc613lLI.s:646    .text:0000000000000300 $t
     /tmp/cc613lLI.s:651    .text:0000000000000300 PKABigNumCmpGetResult
     /tmp/cc613lLI.s:728    .text:0000000000000350 $d
     /tmp/cc613lLI.s:733    .text:0000000000000358 $t
     /tmp/cc613lLI.s:738    .text:0000000000000358 PKABigNumInvModStart
     /tmp/cc613lLI.s:902    .text:0000000000000458 $d
     /tmp/cc613lLI.s:911    .text:0000000000000470 $t
     /tmp/cc613lLI.s:916    .text:0000000000000470 PKABigNumInvModGetResult
     /tmp/cc613lLI.s:1022   .text:0000000000000500 $d
     /tmp/cc613lLI.s:1027   .text:0000000000000508 $t
     /tmp/cc613lLI.s:1032   .text:0000000000000508 PKABigNumMultiplyStart
     /tmp/cc613lLI.s:1198   .text:0000000000000608 $d
     /tmp/cc613lLI.s:1207   .text:0000000000000620 $t
     /tmp/cc613lLI.s:1212   .text:0000000000000620 PKABigNumMultGetResult
     /tmp/cc613lLI.s:1323   .text:00000000000006b8 $d
     /tmp/cc613lLI.s:1328   .text:00000000000006c0 $t
     /tmp/cc613lLI.s:1333   .text:00000000000006c0 PKABigNumAddStart
     /tmp/cc613lLI.s:1497   .text:00000000000007c0 $d
     /tmp/cc613lLI.s:1506   .text:00000000000007d8 $t
     /tmp/cc613lLI.s:1511   .text:00000000000007d8 PKABigNumAddGetResult
     /tmp/cc613lLI.s:1622   .text:0000000000000870 $d
     /tmp/cc613lLI.s:1627   .text:0000000000000878 $t
     /tmp/cc613lLI.s:1632   .text:0000000000000878 PKAECCMultiplyStart
     /tmp/cc613lLI.s:1981   .text:0000000000000abc $d
     /tmp/cc613lLI.s:1991   .text:0000000000000ad8 $t
     /tmp/cc613lLI.s:1996   .text:0000000000000ad8 PKAECCMultiplyGetResult
     /tmp/cc613lLI.s:2142   .text:0000000000000ba8 $d
     /tmp/cc613lLI.s:2148   .text:0000000000000bb4 $t
     /tmp/cc613lLI.s:2153   .text:0000000000000bb4 PKAECCMultGenPtStart
     /tmp/cc613lLI.s:2501   .text:0000000000000df4 $d
     /tmp/cc613lLI.s:2511   .text:0000000000000e10 $t
     /tmp/cc613lLI.s:2516   .text:0000000000000e10 PKAECCMultGenPtGetResult
     /tmp/cc613lLI.s:2662   .text:0000000000000ee0 $d
     /tmp/cc613lLI.s:2668   .text:0000000000000eec $t
     /tmp/cc613lLI.s:2673   .text:0000000000000eec PKAECCAddStart
     /tmp/cc613lLI.s:3017   .text:0000000000001124 $d
     /tmp/cc613lLI.s:3026   .text:000000000000113c $t
     /tmp/cc613lLI.s:3031   .text:000000000000113c PKAECCAddGetResult
     /tmp/cc613lLI.s:3177   .text:000000000000120c $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.59116071098782a37a9183a8102fe91b
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_pka.h.39.21ddda4008595aed4ecf0317dc241440
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.pka.h.64.e6658a746a1332f9f0f055d6d08ac005
                           .group:0000000000000000 wm4.sys_ctrl.h.41.c6bbd4dace326d685c1afa45bc1ba1e2
                           .group:0000000000000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a

UNDEFINED SYMBOLS
IntEnable
IntDisable
IntPendClear
IntRegister
IntUnregister
