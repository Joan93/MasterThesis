   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"uarthal.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	UARTParityModeSet
  20              		.thumb
  21              		.thumb_func
  23              	UARTParityModeSet:
  24              	.LFB0:
  25              		.file 1 "build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c"
   1:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** /******************************************************************************
   2:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  Filename:       uart.c
   3:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  Revised:        $Date: 2013-04-16 12:01:40 +0200 (Tue, 16 Apr 2013) $
   4:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  Revision:       $Revision: 9777 $
   5:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
   6:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  Description:    Driver for the UART.
   7:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
   8:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
  10:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
  11:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  modification, are permitted provided that the following conditions
  13:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  are met:
  14:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
  15:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *    Redistributions of source code must retain the above copyright
  16:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
  18:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *    documentation and/or other materials provided with the distribution.
  21:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
  22:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *    its contributors may be used to endorse or promote products derived
  24:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *    from this software without specific prior written permission.
  25:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
  26:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** *
  38:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** ******************************************************************************/
  39:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
  40:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
  41:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
  42:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \addtogroup uart_api
  43:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! @{
  44:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
  45:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
  46:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
  47:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #include <headers/hw_ints.h>
  48:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #include <headers/hw_memmap.h>
  49:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #include <headers/hw_sys_ctrl.h>
  50:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #include <headers/hw_uart.h>
  51:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #include "debug.h"
  52:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #include "interrupt.h"
  53:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #include "uarthal.h"
  54:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
  55:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
  56:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
  57:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \internal
  58:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Checks a UART base address
  59:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
  60:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
  61:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
  62:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function determines if a UART port base address is valid.
  63:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
  64:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns \b true if the base address is valid and \b false
  65:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! otherwise.
  66:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
  67:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
  68:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #ifdef ENABLE_ASSERT
  69:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** static bool
  70:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTBaseValid(uint32_t ui32Base)
  71:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
  72:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return((ui32Base == UART0_BASE) || (ui32Base == UART1_BASE));
  73:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
  74:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** #endif
  75:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
  76:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
  77:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
  78:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Sets the type of parity
  79:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
  80:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
  81:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Parity specifies the type of parity to use.
  82:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
  83:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function sets the type of parity to use for transmitting and expect
  84:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! when receiving.  The \e ui32Parity parameter must be one of
  85:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN, \b UART_CONFIG_PAR_ODD,
  86:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ONE, or \b UART_CONFIG_PAR_ZERO.  The last two allow
  87:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! direct control of the parity bit; it is always either one or zero based on
  88:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the mode.
  89:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
  90:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
  91:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
  92:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
  93:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
  94:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTParityModeSet(uint32_t ui32Base, uint32_t ui32Parity)
  95:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
  26              		.loc 1 95 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
  39 0008 3960     		str	r1, [r7]
  96:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
  97:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
  98:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
  99:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 100:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT((ui32Parity == UART_CONFIG_PAR_NONE) ||
 101:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_EVEN) ||
 102:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ODD) ||
 103:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ONE) ||
 104:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ZERO));
 105:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 106:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 107:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set the parity mode.
 108:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ((HWREG(ui32Base + UART_O_LCRH) &
  40              		.loc 1 109 0
  41 000a 7B68     		ldr	r3, [r7, #4]
  42 000c 2C33     		adds	r3, r3, #44
  43 000e 1946     		mov	r1, r3
  44 0010 7B68     		ldr	r3, [r7, #4]
  45 0012 2C33     		adds	r3, r3, #44
  46 0014 1B68     		ldr	r3, [r3]
  47 0016 23F08602 		bic	r2, r3, #134
 110:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                       ~(UART_LCRH_SPS | UART_LCRH_EPS |
 111:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                         UART_LCRH_PEN)) | ui32Parity);
  48              		.loc 1 111 0
  49 001a 3B68     		ldr	r3, [r7]
  50 001c 1343     		orrs	r3, r3, r2
 109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                       ~(UART_LCRH_SPS | UART_LCRH_EPS |
  51              		.loc 1 109 0
  52 001e 0B60     		str	r3, [r1]
 112:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
  53              		.loc 1 112 0
  54 0020 0C37     		adds	r7, r7, #12
  55              		.cfi_def_cfa_offset 4
  56 0022 BD46     		mov	sp, r7
  57              		.cfi_def_cfa_register 13
  58              		@ sp needed
  59 0024 5DF8047B 		ldr	r7, [sp], #4
  60              		.cfi_restore 7
  61              		.cfi_def_cfa_offset 0
  62 0028 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE0:
  66 002a 00BF     		.align	2
  67              		.global	UARTParityModeGet
  68              		.thumb
  69              		.thumb_func
  71              	UARTParityModeGet:
  72              	.LFB1:
 113:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 114:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 115:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 116:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Gets the type of parity currently being used
 117:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 118:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 119:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 120:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function gets the type of parity used for transmitting data and
 121:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! expected when receiving data.
 122:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 123:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns the current parity settings, specified as one of
 124:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN, \b UART_CONFIG_PAR_ODD,
 125:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ONE, or \b UART_CONFIG_PAR_ZERO.
 126:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 127:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 128:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** uint32_t
 129:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTParityModeGet(uint32_t ui32Base)
 130:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
  73              		.loc 1 130 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78 002c 80B4     		push	{r7}
  79              		.cfi_def_cfa_offset 4
  80              		.cfi_offset 7, -4
  81 002e 83B0     		sub	sp, sp, #12
  82              		.cfi_def_cfa_offset 16
  83 0030 00AF     		add	r7, sp, #0
  84              		.cfi_def_cfa_register 7
  85 0032 7860     		str	r0, [r7, #4]
 131:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 132:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 133:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 135:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 136:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 137:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Return the current parity setting.
 138:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 139:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_LCRH) &
  86              		.loc 1 139 0
  87 0034 7B68     		ldr	r3, [r7, #4]
  88 0036 2C33     		adds	r3, r3, #44
  89 0038 1B68     		ldr	r3, [r3]
  90 003a 03F08603 		and	r3, r3, #134
 140:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (UART_LCRH_SPS | UART_LCRH_EPS | UART_LCRH_PEN));
 141:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
  91              		.loc 1 141 0
  92 003e 1846     		mov	r0, r3
  93 0040 0C37     		adds	r7, r7, #12
  94              		.cfi_def_cfa_offset 4
  95 0042 BD46     		mov	sp, r7
  96              		.cfi_def_cfa_register 13
  97              		@ sp needed
  98 0044 5DF8047B 		ldr	r7, [sp], #4
  99              		.cfi_restore 7
 100              		.cfi_def_cfa_offset 0
 101 0048 7047     		bx	lr
 102              		.cfi_endproc
 103              	.LFE1:
 105 004a 00BF     		.align	2
 106              		.global	UARTFIFOLevelSet
 107              		.thumb
 108              		.thumb_func
 110              	UARTFIFOLevelSet:
 111              	.LFB2:
 142:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 143:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 144:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 145:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Sets the FIFO level at which interrupts are generated
 146:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 147:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 148:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32TxLevel is the transmit FIFO interrupt level, specified as one of
 149:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8, \b UART_FIFO_TX4_8,
 150:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
 151:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32RxLevel is the receive FIFO interrupt level, specified as one of
 152:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8, \b UART_FIFO_RX4_8,
 153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
 154:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 155:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function sets the FIFO level at which transmit and receive interrupts
 156:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! are generated.
 157:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 158:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 159:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 160:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 161:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 162:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTFIFOLevelSet(uint32_t ui32Base, uint32_t ui32TxLevel,
 163:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                  uint32_t ui32RxLevel)
 164:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 112              		.loc 1 164 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 16
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 004c 80B4     		push	{r7}
 118              		.cfi_def_cfa_offset 4
 119              		.cfi_offset 7, -4
 120 004e 85B0     		sub	sp, sp, #20
 121              		.cfi_def_cfa_offset 24
 122 0050 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
 124 0052 F860     		str	r0, [r7, #12]
 125 0054 B960     		str	r1, [r7, #8]
 126 0056 7A60     		str	r2, [r7, #4]
 165:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 166:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 167:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 168:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 169:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT((ui32TxLevel == UART_FIFO_TX1_8) ||
 170:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX2_8) ||
 171:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX4_8) ||
 172:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX6_8) ||
 173:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX7_8));
 174:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT((ui32RxLevel == UART_FIFO_RX1_8) ||
 175:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX2_8) ||
 176:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX4_8) ||
 177:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX6_8) ||
 178:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX7_8));
 179:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 180:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 181:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set the FIFO interrupt levels.
 182:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 183:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 127              		.loc 1 183 0
 128 0058 FB68     		ldr	r3, [r7, #12]
 129 005a 3433     		adds	r3, r3, #52
 130 005c 1946     		mov	r1, r3
 131 005e BA68     		ldr	r2, [r7, #8]
 132 0060 7B68     		ldr	r3, [r7, #4]
 133 0062 1343     		orrs	r3, r3, r2
 134 0064 0B60     		str	r3, [r1]
 184:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 135              		.loc 1 184 0
 136 0066 1437     		adds	r7, r7, #20
 137              		.cfi_def_cfa_offset 4
 138 0068 BD46     		mov	sp, r7
 139              		.cfi_def_cfa_register 13
 140              		@ sp needed
 141 006a 5DF8047B 		ldr	r7, [sp], #4
 142              		.cfi_restore 7
 143              		.cfi_def_cfa_offset 0
 144 006e 7047     		bx	lr
 145              		.cfi_endproc
 146              	.LFE2:
 148              		.align	2
 149              		.global	UARTFIFOLevelGet
 150              		.thumb
 151              		.thumb_func
 153              	UARTFIFOLevelGet:
 154              	.LFB3:
 185:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 186:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 187:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 188:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Gets the FIFO level at which interrupts are generated
 189:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 190:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 191:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param pui32TxLevel is a pointer to storage for the transmit FIFO level,
 192:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! returned as one of \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8,
 193:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_FIFO_TX4_8, \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
 194:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param pui32RxLevel is a pointer to storage for the receive FIFO level,
 195:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! returned as one of \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8,
 196:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_FIFO_RX4_8, \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
 197:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 198:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function gets the FIFO level at which transmit and receive interrupts
 199:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! are generated.
 200:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 201:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 202:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 203:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 204:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 205:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTFIFOLevelGet(uint32_t ui32Base, uint32_t *pui32TxLevel,
 206:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                  uint32_t *pui32RxLevel)
 207:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 155              		.loc 1 207 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 24
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 0070 80B4     		push	{r7}
 161              		.cfi_def_cfa_offset 4
 162              		.cfi_offset 7, -4
 163 0072 87B0     		sub	sp, sp, #28
 164              		.cfi_def_cfa_offset 32
 165 0074 00AF     		add	r7, sp, #0
 166              		.cfi_def_cfa_register 7
 167 0076 F860     		str	r0, [r7, #12]
 168 0078 B960     		str	r1, [r7, #8]
 169 007a 7A60     		str	r2, [r7, #4]
 208:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     uint32_t ui32Temp;
 209:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 210:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 211:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 212:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 213:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 214:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 215:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 216:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Read the FIFO level register.
 217:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 218:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ui32Temp = HWREG(ui32Base + UART_O_IFLS);
 170              		.loc 1 218 0
 171 007c FB68     		ldr	r3, [r7, #12]
 172 007e 3433     		adds	r3, r3, #52
 173 0080 1B68     		ldr	r3, [r3]
 174 0082 7B61     		str	r3, [r7, #20]
 219:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 220:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 221:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Extract the transmit and receive FIFO levels.
 222:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 223:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     *pui32TxLevel = ui32Temp & UART_IFLS_TXIFLSEL_M;
 175              		.loc 1 223 0
 176 0084 7B69     		ldr	r3, [r7, #20]
 177 0086 03F00702 		and	r2, r3, #7
 178 008a BB68     		ldr	r3, [r7, #8]
 179 008c 1A60     		str	r2, [r3]
 224:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     *pui32RxLevel = ui32Temp & UART_IFLS_RXIFLSEL_M;
 180              		.loc 1 224 0
 181 008e 7B69     		ldr	r3, [r7, #20]
 182 0090 03F03802 		and	r2, r3, #56
 183 0094 7B68     		ldr	r3, [r7, #4]
 184 0096 1A60     		str	r2, [r3]
 225:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 185              		.loc 1 225 0
 186 0098 1C37     		adds	r7, r7, #28
 187              		.cfi_def_cfa_offset 4
 188 009a BD46     		mov	sp, r7
 189              		.cfi_def_cfa_register 13
 190              		@ sp needed
 191 009c 5DF8047B 		ldr	r7, [sp], #4
 192              		.cfi_restore 7
 193              		.cfi_def_cfa_offset 0
 194 00a0 7047     		bx	lr
 195              		.cfi_endproc
 196              	.LFE3:
 198 00a2 00BF     		.align	2
 199              		.global	UARTConfigSetExpClk
 200              		.thumb
 201              		.thumb_func
 203              	UARTConfigSetExpClk:
 204              	.LFB4:
 226:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 228:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 229:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Sets the configuration of a UART
 230:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 231:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 232:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32UARTClk is the rate of the clock supplied to the UART module.
 233:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Baud is the desired baud rate.
 234:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Config is the data format for the port (number of data bits,
 235:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! number of stop bits, and parity).
 236:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 237:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function configures the UART for operation in the specified data
 238:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! format.  The baud rate is provided in the \e ui32Baud parameter and the data
 239:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! format in the \e ui32Config parameter.
 240:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 241:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The \e ui32Config parameter is the logical OR of three values: the number of
 242:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! data bits, the number of stop bits, and the parity.  \b UART_CONFIG_WLEN_8,
 243:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_CONFIG_WLEN_7, \b UART_CONFIG_WLEN_6, and \b UART_CONFIG_WLEN_5
 244:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! select from eight to five data bits per byte (respectively).
 245:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_CONFIG_STOP_ONE and \b UART_CONFIG_STOP_TWO select one or two stop
 246:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! bits (respectively).  \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN,
 247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ODD, \b UART_CONFIG_PAR_ONE, and \b UART_CONFIG_PAR_ZERO
 248:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! select the parity mode (no parity bit, even parity bit, odd parity bit,
 249:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! parity bit always one, and parity bit always zero, respectively).
 250:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 251:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 252:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 253:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 254:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! UARTClockSourceSet(), or it can be explicitly hard coded if it is constant
 255:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! and known (to save the code/execution overhead of a call to
 256:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 257:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 258:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The CC2538 part has the ability to specify the UART baud clock
 259:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! source (via UARTClockSourceSet()), the peripheral clock can be changed to
 260:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! PIOSC.  In this case, the peripheral clock should be specified as
 261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! 16,000,000 (the nominal rate of PIOSC).
 262:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 263:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \sa See  UARTClockSourceSet()
 264:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 265:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 266:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 267:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 268:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 269:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTConfigSetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
 270:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                     uint32_t ui32Baud, uint32_t ui32Config)
 271:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 205              		.loc 1 271 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 24
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 00a4 80B5     		push	{r7, lr}
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 00a6 86B0     		sub	sp, sp, #24
 214              		.cfi_def_cfa_offset 32
 215 00a8 00AF     		add	r7, sp, #0
 216              		.cfi_def_cfa_register 7
 217 00aa F860     		str	r0, [r7, #12]
 218 00ac B960     		str	r1, [r7, #8]
 219 00ae 7A60     		str	r2, [r7, #4]
 220 00b0 3B60     		str	r3, [r7]
 272:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     uint32_t ui32Div;
 273:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 275:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 276:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 277:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 278:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(ui32Baud != 0);
 279:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 280:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 281:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Stop the UART.
 282:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 283:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     UARTDisable(ui32Base);
 221              		.loc 1 283 0
 222 00b2 F868     		ldr	r0, [r7, #12]
 223 00b4 FFF7FEFF 		bl	UARTDisable
 284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 285:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 286:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Is the required baud rate greater than the maximum rate supported
 287:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // without the use of high speed mode?
 288:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 289:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     if((ui32Baud * 16) > ui32UARTClk)
 224              		.loc 1 289 0
 225 00b8 7B68     		ldr	r3, [r7, #4]
 226 00ba 1A01     		lsls	r2, r3, #4
 227 00bc BB68     		ldr	r3, [r7, #8]
 228 00be 9A42     		cmp	r2, r3
 229 00c0 0CD9     		bls	.L7
 290:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 291:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 292:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // Enable high speed mode.
 293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 294:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= UART_CTL_HSE;
 230              		.loc 1 294 0
 231 00c2 FB68     		ldr	r3, [r7, #12]
 232 00c4 3033     		adds	r3, r3, #48
 233 00c6 1A46     		mov	r2, r3
 234 00c8 FB68     		ldr	r3, [r7, #12]
 235 00ca 3033     		adds	r3, r3, #48
 236 00cc 1B68     		ldr	r3, [r3]
 237 00ce 43F02003 		orr	r3, r3, #32
 238 00d2 1360     		str	r3, [r2]
 295:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 296:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 297:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // Half the supplied baud rate to compensate for enabling high speed
 298:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // mode.  This allows the following code to be common to both cases.
 299:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 300:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         ui32Baud /= 2;
 239              		.loc 1 300 0
 240 00d4 7B68     		ldr	r3, [r7, #4]
 241 00d6 5B08     		lsrs	r3, r3, #1
 242 00d8 7B60     		str	r3, [r7, #4]
 243 00da 08E0     		b	.L8
 244              	.L7:
 301:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 302:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     else
 303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 304:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 305:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // Disable high speed mode.
 306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 307:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_HSE);
 245              		.loc 1 307 0
 246 00dc FB68     		ldr	r3, [r7, #12]
 247 00de 3033     		adds	r3, r3, #48
 248 00e0 1A46     		mov	r2, r3
 249 00e2 FB68     		ldr	r3, [r7, #12]
 250 00e4 3033     		adds	r3, r3, #48
 251 00e6 1B68     		ldr	r3, [r3]
 252 00e8 23F02003 		bic	r3, r3, #32
 253 00ec 1360     		str	r3, [r2]
 254              	.L8:
 308:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 309:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 310:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 311:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Compute the fractional baud rate divider.
 312:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 313:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ui32Div = (((ui32UARTClk * 8) / ui32Baud) + 1) / 2;
 255              		.loc 1 313 0
 256 00ee BB68     		ldr	r3, [r7, #8]
 257 00f0 DA00     		lsls	r2, r3, #3
 258 00f2 7B68     		ldr	r3, [r7, #4]
 259 00f4 B2FBF3F3 		udiv	r3, r2, r3
 260 00f8 0133     		adds	r3, r3, #1
 261 00fa 5B08     		lsrs	r3, r3, #1
 262 00fc 7B61     		str	r3, [r7, #20]
 314:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 315:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 316:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set the baud rate.
 317:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 318:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IBRD) = ui32Div / 64;
 263              		.loc 1 318 0
 264 00fe FB68     		ldr	r3, [r7, #12]
 265 0100 2433     		adds	r3, r3, #36
 266 0102 1A46     		mov	r2, r3
 267 0104 7B69     		ldr	r3, [r7, #20]
 268 0106 9B09     		lsrs	r3, r3, #6
 269 0108 1360     		str	r3, [r2]
 319:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_FBRD) = ui32Div % 64;
 270              		.loc 1 319 0
 271 010a FB68     		ldr	r3, [r7, #12]
 272 010c 2833     		adds	r3, r3, #40
 273 010e 1A46     		mov	r2, r3
 274 0110 7B69     		ldr	r3, [r7, #20]
 275 0112 03F03F03 		and	r3, r3, #63
 276 0116 1360     		str	r3, [r2]
 320:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 321:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 322:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set parity, data length, and number of stop bits.
 323:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 324:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ui32Config;
 277              		.loc 1 324 0
 278 0118 FB68     		ldr	r3, [r7, #12]
 279 011a 2C33     		adds	r3, r3, #44
 280 011c 1A46     		mov	r2, r3
 281 011e 3B68     		ldr	r3, [r7]
 282 0120 1360     		str	r3, [r2]
 325:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 326:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 327:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Clear the flags register.
 328:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 329:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_FR) = 0;
 283              		.loc 1 329 0
 284 0122 FB68     		ldr	r3, [r7, #12]
 285 0124 1833     		adds	r3, r3, #24
 286 0126 1A46     		mov	r2, r3
 287 0128 0023     		movs	r3, #0
 288 012a 1360     		str	r3, [r2]
 330:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 289              		.loc 1 330 0
 290 012c 1837     		adds	r7, r7, #24
 291              		.cfi_def_cfa_offset 8
 292 012e BD46     		mov	sp, r7
 293              		.cfi_def_cfa_register 13
 294              		@ sp needed
 295 0130 80BD     		pop	{r7, pc}
 296              		.cfi_endproc
 297              	.LFE4:
 299 0132 00BF     		.align	2
 300              		.global	UARTConfigGetExpClk
 301              		.thumb
 302              		.thumb_func
 304              	UARTConfigGetExpClk:
 305              	.LFB5:
 331:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 332:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 333:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 334:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Gets the current configuration of a UART
 335:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 336:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 337:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32UARTClk is the rate of the clock supplied to the UART module.
 338:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param pui32Baud is a pointer to storage for the baud rate.
 339:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param pui32Config is a pointer to storage for the data format.
 340:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 341:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The baud rate and data format for the UART is determined, given an
 342:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! explicitly provided peripheral clock (hence the ExpClk suffix).  The
 343:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! returned baud rate is the actual baud rate; it may not be the exact baud
 344:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! rate requested or an ``official'' baud rate.  The data format returned in
 345:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \e pui32Config is enumerated the same as the \e ui32Config parameter of
 346:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! UARTConfigSetExpClk().
 347:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 348:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 349:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 350:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 351:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! UARTClockSourceSet(), or it can be explicitly hard coded if it is constant
 352:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! and known (to save the code/execution overhead of a call to
 353:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 354:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 355:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The CC2538 part has the ability to specify the UART baud clock
 356:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! source (via UARTClockSourceSet()), the peripheral clock can be changed to
 357:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! PIOSC.  In this case, the peripheral clock should be specified as
 358:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! 16,000,000 (the nominal rate of PIOSC).
 359:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 360:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 361:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 362:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 363:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 364:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTConfigGetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
 365:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                     uint32_t *pui32Baud, uint32_t *pui32Config)
 366:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 306              		.loc 1 366 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 24
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311 0134 80B4     		push	{r7}
 312              		.cfi_def_cfa_offset 4
 313              		.cfi_offset 7, -4
 314 0136 87B0     		sub	sp, sp, #28
 315              		.cfi_def_cfa_offset 32
 316 0138 00AF     		add	r7, sp, #0
 317              		.cfi_def_cfa_register 7
 318 013a F860     		str	r0, [r7, #12]
 319 013c B960     		str	r1, [r7, #8]
 320 013e 7A60     		str	r2, [r7, #4]
 321 0140 3B60     		str	r3, [r7]
 367:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     uint32_t ui32Int, ui32Frac;
 368:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 369:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 370:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 371:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 372:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 373:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 374:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 375:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Compute the baud rate.
 376:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 377:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ui32Int = HWREG(ui32Base + UART_O_IBRD);
 322              		.loc 1 377 0
 323 0142 FB68     		ldr	r3, [r7, #12]
 324 0144 2433     		adds	r3, r3, #36
 325 0146 1B68     		ldr	r3, [r3]
 326 0148 7B61     		str	r3, [r7, #20]
 378:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ui32Frac = HWREG(ui32Base + UART_O_FBRD);
 327              		.loc 1 378 0
 328 014a FB68     		ldr	r3, [r7, #12]
 329 014c 2833     		adds	r3, r3, #40
 330 014e 1B68     		ldr	r3, [r3]
 331 0150 3B61     		str	r3, [r7, #16]
 379:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     *pui32Baud = (ui32UARTClk * 4) / ((64 * ui32Int) + ui32Frac);
 332              		.loc 1 379 0
 333 0152 BB68     		ldr	r3, [r7, #8]
 334 0154 9A00     		lsls	r2, r3, #2
 335 0156 7B69     		ldr	r3, [r7, #20]
 336 0158 9901     		lsls	r1, r3, #6
 337 015a 3B69     		ldr	r3, [r7, #16]
 338 015c 0B44     		add	r3, r3, r1
 339 015e B2FBF3F2 		udiv	r2, r2, r3
 340 0162 7B68     		ldr	r3, [r7, #4]
 341 0164 1A60     		str	r2, [r3]
 380:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 381:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 382:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // See if high speed mode enabled.
 383:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 384:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     if(HWREG(ui32Base + UART_O_CTL) & UART_CTL_HSE)
 342              		.loc 1 384 0
 343 0166 FB68     		ldr	r3, [r7, #12]
 344 0168 3033     		adds	r3, r3, #48
 345 016a 1B68     		ldr	r3, [r3]
 346 016c 03F02003 		and	r3, r3, #32
 347 0170 002B     		cmp	r3, #0
 348 0172 04D0     		beq	.L10
 385:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 386:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 387:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // High speed mode is enabled so the actual baud rate is actually
 388:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // double what was just calculated.
 389:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 390:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         *pui32Baud *= 2;
 349              		.loc 1 390 0
 350 0174 7B68     		ldr	r3, [r7, #4]
 351 0176 1B68     		ldr	r3, [r3]
 352 0178 5A00     		lsls	r2, r3, #1
 353 017a 7B68     		ldr	r3, [r7, #4]
 354 017c 1A60     		str	r2, [r3]
 355              	.L10:
 391:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 392:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 393:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 394:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Get the parity, data length, and number of stop bits.
 395:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 396:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     *pui32Config = (HWREG(ui32Base + UART_O_LCRH) &
 356              		.loc 1 396 0
 357 017e FB68     		ldr	r3, [r7, #12]
 358 0180 2C33     		adds	r3, r3, #44
 359 0182 1B68     		ldr	r3, [r3]
 360 0184 03F0EE02 		and	r2, r3, #238
 361 0188 3B68     		ldr	r3, [r7]
 362 018a 1A60     		str	r2, [r3]
 397:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                     (UART_LCRH_SPS | UART_LCRH_WLEN_M | UART_LCRH_STP2 |
 398:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                      UART_LCRH_EPS | UART_LCRH_PEN));
 399:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 363              		.loc 1 399 0
 364 018c 1C37     		adds	r7, r7, #28
 365              		.cfi_def_cfa_offset 4
 366 018e BD46     		mov	sp, r7
 367              		.cfi_def_cfa_register 13
 368              		@ sp needed
 369 0190 5DF8047B 		ldr	r7, [sp], #4
 370              		.cfi_restore 7
 371              		.cfi_def_cfa_offset 0
 372 0194 7047     		bx	lr
 373              		.cfi_endproc
 374              	.LFE5:
 376 0196 00BF     		.align	2
 377              		.global	UARTEnable
 378              		.thumb
 379              		.thumb_func
 381              	UARTEnable:
 382              	.LFB6:
 400:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 401:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 402:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 403:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Enables transmitting and receiving
 404:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 405:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 406:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 407:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function sets the UARTEN, TXE, and RXE bits, and enables the transmit
 408:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! and receive FIFOs.
 409:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 410:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 411:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 412:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 413:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 414:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTEnable(uint32_t ui32Base)
 415:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 383              		.loc 1 415 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 8
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388 0198 80B4     		push	{r7}
 389              		.cfi_def_cfa_offset 4
 390              		.cfi_offset 7, -4
 391 019a 83B0     		sub	sp, sp, #12
 392              		.cfi_def_cfa_offset 16
 393 019c 00AF     		add	r7, sp, #0
 394              		.cfi_def_cfa_register 7
 395 019e 7860     		str	r0, [r7, #4]
 416:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 417:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 418:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 419:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 420:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 421:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 422:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Enable the FIFO.
 423:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 424:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 396              		.loc 1 424 0
 397 01a0 7B68     		ldr	r3, [r7, #4]
 398 01a2 2C33     		adds	r3, r3, #44
 399 01a4 1A46     		mov	r2, r3
 400 01a6 7B68     		ldr	r3, [r7, #4]
 401 01a8 2C33     		adds	r3, r3, #44
 402 01aa 1B68     		ldr	r3, [r3]
 403 01ac 43F01003 		orr	r3, r3, #16
 404 01b0 1360     		str	r3, [r2]
 425:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 426:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 427:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Enable RX, TX, and the UART.
 428:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 429:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 405              		.loc 1 429 0
 406 01b2 7B68     		ldr	r3, [r7, #4]
 407 01b4 3033     		adds	r3, r3, #48
 408 01b6 1A46     		mov	r2, r3
 409 01b8 7B68     		ldr	r3, [r7, #4]
 410 01ba 3033     		adds	r3, r3, #48
 411 01bc 1B68     		ldr	r3, [r3]
 412 01be 43F44073 		orr	r3, r3, #768
 413 01c2 43F00103 		orr	r3, r3, #1
 414 01c6 1360     		str	r3, [r2]
 430:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                      UART_CTL_RXE);
 431:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 415              		.loc 1 431 0
 416 01c8 0C37     		adds	r7, r7, #12
 417              		.cfi_def_cfa_offset 4
 418 01ca BD46     		mov	sp, r7
 419              		.cfi_def_cfa_register 13
 420              		@ sp needed
 421 01cc 5DF8047B 		ldr	r7, [sp], #4
 422              		.cfi_restore 7
 423              		.cfi_def_cfa_offset 0
 424 01d0 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE6:
 428 01d2 00BF     		.align	2
 429              		.global	UARTDisable
 430              		.thumb
 431              		.thumb_func
 433              	UARTDisable:
 434              	.LFB7:
 432:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 433:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 434:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 435:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Disables transmitting and receiving
 436:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 437:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 438:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 439:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function clears the UARTEN, TXE, and RXE bits, waits for the end of
 440:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! transmission of the current character, and flushes the transmit FIFO.
 441:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 442:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 443:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 444:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 445:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 446:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTDisable(uint32_t ui32Base)
 447:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 435              		.loc 1 447 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 8
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440 01d4 80B4     		push	{r7}
 441              		.cfi_def_cfa_offset 4
 442              		.cfi_offset 7, -4
 443 01d6 83B0     		sub	sp, sp, #12
 444              		.cfi_def_cfa_offset 16
 445 01d8 00AF     		add	r7, sp, #0
 446              		.cfi_def_cfa_register 7
 447 01da 7860     		str	r0, [r7, #4]
 448:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 449:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 450:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 451:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 452:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 453:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 454:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Wait for end of TX.
 455:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 456:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY)
 448              		.loc 1 456 0
 449 01dc 00BF     		nop
 450              	.L13:
 451              		.loc 1 456 0 is_stmt 0 discriminator 1
 452 01de 7B68     		ldr	r3, [r7, #4]
 453 01e0 1833     		adds	r3, r3, #24
 454 01e2 1B68     		ldr	r3, [r3]
 455 01e4 03F00803 		and	r3, r3, #8
 456 01e8 002B     		cmp	r3, #0
 457 01ea F8D1     		bne	.L13
 457:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 458:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 459:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 460:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 461:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Disable the FIFO.
 462:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 463:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) &= ~(UART_LCRH_FEN);
 458              		.loc 1 463 0 is_stmt 1
 459 01ec 7B68     		ldr	r3, [r7, #4]
 460 01ee 2C33     		adds	r3, r3, #44
 461 01f0 1A46     		mov	r2, r3
 462 01f2 7B68     		ldr	r3, [r7, #4]
 463 01f4 2C33     		adds	r3, r3, #44
 464 01f6 1B68     		ldr	r3, [r3]
 465 01f8 23F01003 		bic	r3, r3, #16
 466 01fc 1360     		str	r3, [r2]
 464:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 465:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 466:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Disable the UART.
 467:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 468:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_UARTEN | UART_CTL_TXE |
 467              		.loc 1 468 0
 468 01fe 7B68     		ldr	r3, [r7, #4]
 469 0200 3033     		adds	r3, r3, #48
 470 0202 1A46     		mov	r2, r3
 471 0204 7B68     		ldr	r3, [r7, #4]
 472 0206 3033     		adds	r3, r3, #48
 473 0208 1B68     		ldr	r3, [r3]
 474 020a 23F44073 		bic	r3, r3, #768
 475 020e 23F00103 		bic	r3, r3, #1
 476 0212 1360     		str	r3, [r2]
 469:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                       UART_CTL_RXE);
 470:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 477              		.loc 1 470 0
 478 0214 0C37     		adds	r7, r7, #12
 479              		.cfi_def_cfa_offset 4
 480 0216 BD46     		mov	sp, r7
 481              		.cfi_def_cfa_register 13
 482              		@ sp needed
 483 0218 5DF8047B 		ldr	r7, [sp], #4
 484              		.cfi_restore 7
 485              		.cfi_def_cfa_offset 0
 486 021c 7047     		bx	lr
 487              		.cfi_endproc
 488              	.LFE7:
 490 021e 00BF     		.align	2
 491              		.global	UARTFIFOEnable
 492              		.thumb
 493              		.thumb_func
 495              	UARTFIFOEnable:
 496              	.LFB8:
 471:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 472:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 473:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 474:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Enables the transmit and receive FIFOs
 475:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 476:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 477:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 478:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This functions enables the transmit and receive FIFOs in the UART.
 479:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 480:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 481:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 482:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 483:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 484:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTFIFOEnable(uint32_t ui32Base)
 485:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 497              		.loc 1 485 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 8
 500              		@ frame_needed = 1, uses_anonymous_args = 0
 501              		@ link register save eliminated.
 502 0220 80B4     		push	{r7}
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 7, -4
 505 0222 83B0     		sub	sp, sp, #12
 506              		.cfi_def_cfa_offset 16
 507 0224 00AF     		add	r7, sp, #0
 508              		.cfi_def_cfa_register 7
 509 0226 7860     		str	r0, [r7, #4]
 486:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 487:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 488:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 489:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 490:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 491:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 492:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Enable the FIFO.
 493:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 494:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 510              		.loc 1 494 0
 511 0228 7B68     		ldr	r3, [r7, #4]
 512 022a 2C33     		adds	r3, r3, #44
 513 022c 1A46     		mov	r2, r3
 514 022e 7B68     		ldr	r3, [r7, #4]
 515 0230 2C33     		adds	r3, r3, #44
 516 0232 1B68     		ldr	r3, [r3]
 517 0234 43F01003 		orr	r3, r3, #16
 518 0238 1360     		str	r3, [r2]
 495:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 519              		.loc 1 495 0
 520 023a 0C37     		adds	r7, r7, #12
 521              		.cfi_def_cfa_offset 4
 522 023c BD46     		mov	sp, r7
 523              		.cfi_def_cfa_register 13
 524              		@ sp needed
 525 023e 5DF8047B 		ldr	r7, [sp], #4
 526              		.cfi_restore 7
 527              		.cfi_def_cfa_offset 0
 528 0242 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE8:
 532              		.align	2
 533              		.global	UARTFIFODisable
 534              		.thumb
 535              		.thumb_func
 537              	UARTFIFODisable:
 538              	.LFB9:
 496:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 497:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 498:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 499:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Disables the transmit and receive FIFOs
 500:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 501:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 502:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 503:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This functions disables the transmit and receive FIFOs in the UART.
 504:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 505:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 506:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 507:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 508:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 509:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTFIFODisable(uint32_t ui32Base)
 510:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 539              		.loc 1 510 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 8
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 544 0244 80B4     		push	{r7}
 545              		.cfi_def_cfa_offset 4
 546              		.cfi_offset 7, -4
 547 0246 83B0     		sub	sp, sp, #12
 548              		.cfi_def_cfa_offset 16
 549 0248 00AF     		add	r7, sp, #0
 550              		.cfi_def_cfa_register 7
 551 024a 7860     		str	r0, [r7, #4]
 511:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 512:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 513:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 514:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 515:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 516:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 517:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Disable the FIFO.
 518:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 519:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) &= ~(UART_LCRH_FEN);
 552              		.loc 1 519 0
 553 024c 7B68     		ldr	r3, [r7, #4]
 554 024e 2C33     		adds	r3, r3, #44
 555 0250 1A46     		mov	r2, r3
 556 0252 7B68     		ldr	r3, [r7, #4]
 557 0254 2C33     		adds	r3, r3, #44
 558 0256 1B68     		ldr	r3, [r3]
 559 0258 23F01003 		bic	r3, r3, #16
 560 025c 1360     		str	r3, [r2]
 520:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 561              		.loc 1 520 0
 562 025e 0C37     		adds	r7, r7, #12
 563              		.cfi_def_cfa_offset 4
 564 0260 BD46     		mov	sp, r7
 565              		.cfi_def_cfa_register 13
 566              		@ sp needed
 567 0262 5DF8047B 		ldr	r7, [sp], #4
 568              		.cfi_restore 7
 569              		.cfi_def_cfa_offset 0
 570 0266 7047     		bx	lr
 571              		.cfi_endproc
 572              	.LFE9:
 574              		.align	2
 575              		.global	UARTEnableSIR
 576              		.thumb
 577              		.thumb_func
 579              	UARTEnableSIR:
 580              	.LFB10:
 521:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 522:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 523:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 524:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Enables SIR (IrDA) mode on the specified UART
 525:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 526:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 527:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param bLowPower indicates if SIR Low Power Mode is to be used.
 528:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 529:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function enables the SIREN control bit for IrDA mode on the UART.  If
 530:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the \e bLowPower flag is set, then SIRLP bit will also be set.
 531:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 532:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 533:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 534:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 535:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 536:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTEnableSIR(uint32_t ui32Base, bool bLowPower)
 537:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 581              		.loc 1 537 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 8
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586 0268 80B4     		push	{r7}
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 7, -4
 589 026a 83B0     		sub	sp, sp, #12
 590              		.cfi_def_cfa_offset 16
 591 026c 00AF     		add	r7, sp, #0
 592              		.cfi_def_cfa_register 7
 593 026e 7860     		str	r0, [r7, #4]
 594 0270 0B46     		mov	r3, r1
 595 0272 FB70     		strb	r3, [r7, #3]
 538:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 539:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 540:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 541:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 542:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 543:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 544:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Enable SIR and SIRLP (if appropriate).
 545:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 546:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     if(bLowPower)
 596              		.loc 1 546 0
 597 0274 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 598 0276 002B     		cmp	r3, #0
 599 0278 09D0     		beq	.L17
 547:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 548:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_SIREN | UART_CTL_SIRLP);
 600              		.loc 1 548 0
 601 027a 7B68     		ldr	r3, [r7, #4]
 602 027c 3033     		adds	r3, r3, #48
 603 027e 1A46     		mov	r2, r3
 604 0280 7B68     		ldr	r3, [r7, #4]
 605 0282 3033     		adds	r3, r3, #48
 606 0284 1B68     		ldr	r3, [r3]
 607 0286 43F00603 		orr	r3, r3, #6
 608 028a 1360     		str	r3, [r2]
 609 028c 08E0     		b	.L16
 610              	.L17:
 549:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 550:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     else
 551:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 552:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_SIREN);
 611              		.loc 1 552 0
 612 028e 7B68     		ldr	r3, [r7, #4]
 613 0290 3033     		adds	r3, r3, #48
 614 0292 1A46     		mov	r2, r3
 615 0294 7B68     		ldr	r3, [r7, #4]
 616 0296 3033     		adds	r3, r3, #48
 617 0298 1B68     		ldr	r3, [r3]
 618 029a 43F00203 		orr	r3, r3, #2
 619 029e 1360     		str	r3, [r2]
 620              	.L16:
 553:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 554:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 621              		.loc 1 554 0
 622 02a0 0C37     		adds	r7, r7, #12
 623              		.cfi_def_cfa_offset 4
 624 02a2 BD46     		mov	sp, r7
 625              		.cfi_def_cfa_register 13
 626              		@ sp needed
 627 02a4 5DF8047B 		ldr	r7, [sp], #4
 628              		.cfi_restore 7
 629              		.cfi_def_cfa_offset 0
 630 02a8 7047     		bx	lr
 631              		.cfi_endproc
 632              	.LFE10:
 634 02aa 00BF     		.align	2
 635              		.global	UARTDisableSIR
 636              		.thumb
 637              		.thumb_func
 639              	UARTDisableSIR:
 640              	.LFB11:
 555:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 556:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 557:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 558:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Disables SIR (IrDA) mode on the specified UART
 559:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 560:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 561:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 562:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function clears the SIREN (IrDA) and SIRLP (Low Power) bits.
 563:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 564:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 565:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 566:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 567:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 568:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTDisableSIR(uint32_t ui32Base)
 569:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 641              		.loc 1 569 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 8
 644              		@ frame_needed = 1, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646 02ac 80B4     		push	{r7}
 647              		.cfi_def_cfa_offset 4
 648              		.cfi_offset 7, -4
 649 02ae 83B0     		sub	sp, sp, #12
 650              		.cfi_def_cfa_offset 16
 651 02b0 00AF     		add	r7, sp, #0
 652              		.cfi_def_cfa_register 7
 653 02b2 7860     		str	r0, [r7, #4]
 570:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 571:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 572:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 573:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 574:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 575:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 576:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Disable SIR and SIRLP (if appropriate).
 577:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 578:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_SIREN | UART_CTL_SIRLP);
 654              		.loc 1 578 0
 655 02b4 7B68     		ldr	r3, [r7, #4]
 656 02b6 3033     		adds	r3, r3, #48
 657 02b8 1A46     		mov	r2, r3
 658 02ba 7B68     		ldr	r3, [r7, #4]
 659 02bc 3033     		adds	r3, r3, #48
 660 02be 1B68     		ldr	r3, [r3]
 661 02c0 23F00603 		bic	r3, r3, #6
 662 02c4 1360     		str	r3, [r2]
 579:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 663              		.loc 1 579 0
 664 02c6 0C37     		adds	r7, r7, #12
 665              		.cfi_def_cfa_offset 4
 666 02c8 BD46     		mov	sp, r7
 667              		.cfi_def_cfa_register 13
 668              		@ sp needed
 669 02ca 5DF8047B 		ldr	r7, [sp], #4
 670              		.cfi_restore 7
 671              		.cfi_def_cfa_offset 0
 672 02ce 7047     		bx	lr
 673              		.cfi_endproc
 674              	.LFE11:
 676              		.align	2
 677              		.global	UARTTxIntModeSet
 678              		.thumb
 679              		.thumb_func
 681              	UARTTxIntModeSet:
 682              	.LFB12:
 580:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 581:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 582:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 583:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Sets the operating mode for the UART transmit interrupt
 584:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 585:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 586:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Mode is the operating mode for the transmit interrupt.  It may be
 587:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_TXINT_MODE_EOT to trigger interrupts when the transmitter is idle
 588:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! or \b UART_TXINT_MODE_FIFO to trigger based on the current transmit FIFO
 589:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! level.
 590:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 591:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function allows the mode of the UART transmit interrupt to be set.  By
 592:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! default, the transmit interrupt is asserted when the FIFO level falls past
 593:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! a threshold set via a call to UARTFIFOLevelSet().  Alternatively, if this
 594:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! function is called with \e ui32Mode set to \b UART_TXINT_MODE_EOT, the
 595:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! transmit interrupt is asserted once the transmitter is completely idle -
 596:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the transmit FIFO is empty and all bits, including any stop bits, have
 597:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! cleared the transmitter.
 598:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 599:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 600:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 601:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 602:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 603:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTTxIntModeSet(uint32_t ui32Base, uint32_t ui32Mode)
 604:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 683              		.loc 1 604 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 8
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 02d0 80B4     		push	{r7}
 689              		.cfi_def_cfa_offset 4
 690              		.cfi_offset 7, -4
 691 02d2 83B0     		sub	sp, sp, #12
 692              		.cfi_def_cfa_offset 16
 693 02d4 00AF     		add	r7, sp, #0
 694              		.cfi_def_cfa_register 7
 695 02d6 7860     		str	r0, [r7, #4]
 696 02d8 3960     		str	r1, [r7]
 605:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 606:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 607:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 608:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 609:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT((ui32Mode == UART_TXINT_MODE_EOT) ||
 610:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****            (ui32Mode == UART_TXINT_MODE_FIFO));
 611:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 612:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 613:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set or clear the EOT bit of the UART control register as appropriate.
 614:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 615:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) = ((HWREG(ui32Base + UART_O_CTL) &
 697              		.loc 1 615 0
 698 02da 7B68     		ldr	r3, [r7, #4]
 699 02dc 3033     		adds	r3, r3, #48
 700 02de 1946     		mov	r1, r3
 701 02e0 7B68     		ldr	r3, [r7, #4]
 702 02e2 3033     		adds	r3, r3, #48
 703 02e4 1B68     		ldr	r3, [r3]
 704 02e6 23F01002 		bic	r2, r3, #16
 616:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                      ~(UART_TXINT_MODE_EOT |
 617:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                        UART_TXINT_MODE_FIFO)) | ui32Mode);
 705              		.loc 1 617 0
 706 02ea 3B68     		ldr	r3, [r7]
 707 02ec 1343     		orrs	r3, r3, r2
 615:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                      ~(UART_TXINT_MODE_EOT |
 708              		.loc 1 615 0
 709 02ee 0B60     		str	r3, [r1]
 618:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 710              		.loc 1 618 0
 711 02f0 0C37     		adds	r7, r7, #12
 712              		.cfi_def_cfa_offset 4
 713 02f2 BD46     		mov	sp, r7
 714              		.cfi_def_cfa_register 13
 715              		@ sp needed
 716 02f4 5DF8047B 		ldr	r7, [sp], #4
 717              		.cfi_restore 7
 718              		.cfi_def_cfa_offset 0
 719 02f8 7047     		bx	lr
 720              		.cfi_endproc
 721              	.LFE12:
 723 02fa 00BF     		.align	2
 724              		.global	UARTTxIntModeGet
 725              		.thumb
 726              		.thumb_func
 728              	UARTTxIntModeGet:
 729              	.LFB13:
 619:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 620:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 621:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 622:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Returns the current operating mode for the UART transmit interrupt
 623:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 624:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 625:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 626:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function returns the current operating mode for the UART transmit
 627:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! interrupt.  The return value is \b UART_TXINT_MODE_EOT if the transmit
 628:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! interrupt is currently set to be asserted once the transmitter is
 629:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! completely idle - the transmit FIFO is empty and all bits, including any
 630:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! stop bits, have cleared the transmitter.  The return value is
 631:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_TXINT_MODE_FIFO if the interrupt is set to be asserted based upon
 632:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the level of the transmit FIFO.
 633:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 634:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns \b UART_TXINT_MODE_FIFO or \b UART_TXINT_MODE_EOT.
 635:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 636:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 637:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** uint32_t
 638:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTTxIntModeGet(uint32_t ui32Base)
 639:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 730              		.loc 1 639 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 8
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734              		@ link register save eliminated.
 735 02fc 80B4     		push	{r7}
 736              		.cfi_def_cfa_offset 4
 737              		.cfi_offset 7, -4
 738 02fe 83B0     		sub	sp, sp, #12
 739              		.cfi_def_cfa_offset 16
 740 0300 00AF     		add	r7, sp, #0
 741              		.cfi_def_cfa_register 7
 742 0302 7860     		str	r0, [r7, #4]
 640:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 641:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 642:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 643:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 644:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 645:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 646:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Return the current transmit interrupt mode.
 647:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 648:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_CTL) & (UART_TXINT_MODE_EOT |
 743              		.loc 1 648 0
 744 0304 7B68     		ldr	r3, [r7, #4]
 745 0306 3033     		adds	r3, r3, #48
 746 0308 1B68     		ldr	r3, [r3]
 747 030a 03F01003 		and	r3, r3, #16
 649:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                            UART_TXINT_MODE_FIFO));
 650:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 748              		.loc 1 650 0
 749 030e 1846     		mov	r0, r3
 750 0310 0C37     		adds	r7, r7, #12
 751              		.cfi_def_cfa_offset 4
 752 0312 BD46     		mov	sp, r7
 753              		.cfi_def_cfa_register 13
 754              		@ sp needed
 755 0314 5DF8047B 		ldr	r7, [sp], #4
 756              		.cfi_restore 7
 757              		.cfi_def_cfa_offset 0
 758 0318 7047     		bx	lr
 759              		.cfi_endproc
 760              	.LFE13:
 762 031a 00BF     		.align	2
 763              		.global	UARTCharsAvail
 764              		.thumb
 765              		.thumb_func
 767              	UARTCharsAvail:
 768              	.LFB14:
 651:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 652:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 653:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 654:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Determines if there are any characters in the receive FIFO
 655:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 656:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 657:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 658:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function returns a flag indicating whether or not there is data
 659:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! available in the receive FIFO.
 660:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 661:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns \b true if there is data in the receive FIFO or \b false
 662:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! if there is no data in the receive FIFO.
 663:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 664:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 665:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** bool
 666:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTCharsAvail(uint32_t ui32Base)
 667:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 769              		.loc 1 667 0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 8
 772              		@ frame_needed = 1, uses_anonymous_args = 0
 773              		@ link register save eliminated.
 774 031c 80B4     		push	{r7}
 775              		.cfi_def_cfa_offset 4
 776              		.cfi_offset 7, -4
 777 031e 83B0     		sub	sp, sp, #12
 778              		.cfi_def_cfa_offset 16
 779 0320 00AF     		add	r7, sp, #0
 780              		.cfi_def_cfa_register 7
 781 0322 7860     		str	r0, [r7, #4]
 668:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 669:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 670:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 671:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 672:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 673:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 674:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Return the availability of characters.
 675:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 676:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE) ? false : true);
 782              		.loc 1 676 0
 783 0324 7B68     		ldr	r3, [r7, #4]
 784 0326 1833     		adds	r3, r3, #24
 785 0328 1B68     		ldr	r3, [r3]
 786 032a 03F01003 		and	r3, r3, #16
 787 032e 002B     		cmp	r3, #0
 788 0330 0CBF     		ite	eq
 789 0332 0123     		moveq	r3, #1
 790 0334 0023     		movne	r3, #0
 791 0336 DBB2     		uxtb	r3, r3
 677:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 792              		.loc 1 677 0
 793 0338 1846     		mov	r0, r3
 794 033a 0C37     		adds	r7, r7, #12
 795              		.cfi_def_cfa_offset 4
 796 033c BD46     		mov	sp, r7
 797              		.cfi_def_cfa_register 13
 798              		@ sp needed
 799 033e 5DF8047B 		ldr	r7, [sp], #4
 800              		.cfi_restore 7
 801              		.cfi_def_cfa_offset 0
 802 0342 7047     		bx	lr
 803              		.cfi_endproc
 804              	.LFE14:
 806              		.align	2
 807              		.global	UARTSpaceAvail
 808              		.thumb
 809              		.thumb_func
 811              	UARTSpaceAvail:
 812              	.LFB15:
 678:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 679:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 680:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 681:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Determines if there is any space in the transmit FIFO
 682:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 683:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 684:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 685:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function returns a flag indicating whether or not there is space
 686:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! available in the transmit FIFO.
 687:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 688:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns \b true if there is space available in the transmit FIFO
 689:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! or \b false if there is no space available in the transmit FIFO.
 690:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 691:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 692:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** bool
 693:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTSpaceAvail(uint32_t ui32Base)
 694:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 813              		.loc 1 694 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 8
 816              		@ frame_needed = 1, uses_anonymous_args = 0
 817              		@ link register save eliminated.
 818 0344 80B4     		push	{r7}
 819              		.cfi_def_cfa_offset 4
 820              		.cfi_offset 7, -4
 821 0346 83B0     		sub	sp, sp, #12
 822              		.cfi_def_cfa_offset 16
 823 0348 00AF     		add	r7, sp, #0
 824              		.cfi_def_cfa_register 7
 825 034a 7860     		str	r0, [r7, #4]
 695:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 696:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 697:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 698:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 699:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 700:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 701:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Return the availability of space.
 702:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 703:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF) ? false : true);
 826              		.loc 1 703 0
 827 034c 7B68     		ldr	r3, [r7, #4]
 828 034e 1833     		adds	r3, r3, #24
 829 0350 1B68     		ldr	r3, [r3]
 830 0352 03F02003 		and	r3, r3, #32
 831 0356 002B     		cmp	r3, #0
 832 0358 0CBF     		ite	eq
 833 035a 0123     		moveq	r3, #1
 834 035c 0023     		movne	r3, #0
 835 035e DBB2     		uxtb	r3, r3
 704:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 836              		.loc 1 704 0
 837 0360 1846     		mov	r0, r3
 838 0362 0C37     		adds	r7, r7, #12
 839              		.cfi_def_cfa_offset 4
 840 0364 BD46     		mov	sp, r7
 841              		.cfi_def_cfa_register 13
 842              		@ sp needed
 843 0366 5DF8047B 		ldr	r7, [sp], #4
 844              		.cfi_restore 7
 845              		.cfi_def_cfa_offset 0
 846 036a 7047     		bx	lr
 847              		.cfi_endproc
 848              	.LFE15:
 850              		.align	2
 851              		.global	UARTCharGetNonBlocking
 852              		.thumb
 853              		.thumb_func
 855              	UARTCharGetNonBlocking:
 856              	.LFB16:
 705:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 706:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 707:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 708:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Receives a character from the specified port
 709:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 710:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 711:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 712:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function gets a character from the receive FIFO for the specified
 713:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! port.
 714:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 715:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns the character read from the specified port, cast as a
 716:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \e int32_t.  A \b -1 is returned if there are no characters present in the
 717:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! receive FIFO.  The UARTCharsAvail() function should be called before
 718:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! attempting to call this function.
 719:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 720:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 721:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** int32_t
 722:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTCharGetNonBlocking(uint32_t ui32Base)
 723:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 857              		.loc 1 723 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 8
 860              		@ frame_needed = 1, uses_anonymous_args = 0
 861              		@ link register save eliminated.
 862 036c 80B4     		push	{r7}
 863              		.cfi_def_cfa_offset 4
 864              		.cfi_offset 7, -4
 865 036e 83B0     		sub	sp, sp, #12
 866              		.cfi_def_cfa_offset 16
 867 0370 00AF     		add	r7, sp, #0
 868              		.cfi_def_cfa_register 7
 869 0372 7860     		str	r0, [r7, #4]
 724:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 725:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 726:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 727:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 728:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 729:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 730:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // See if there are any characters in the receive FIFO.
 731:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 732:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     if(!(HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE))
 870              		.loc 1 732 0
 871 0374 7B68     		ldr	r3, [r7, #4]
 872 0376 1833     		adds	r3, r3, #24
 873 0378 1B68     		ldr	r3, [r3]
 874 037a 03F01003 		and	r3, r3, #16
 875 037e 002B     		cmp	r3, #0
 876 0380 02D1     		bne	.L28
 733:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 734:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 735:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // Read and return the next character.
 736:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 737:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_DR));
 877              		.loc 1 737 0
 878 0382 7B68     		ldr	r3, [r7, #4]
 879 0384 1B68     		ldr	r3, [r3]
 880 0386 01E0     		b	.L29
 881              	.L28:
 738:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 739:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     else
 740:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 741:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 742:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // There are no characters, so return a failure.
 743:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 744:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         return(-1);
 882              		.loc 1 744 0
 883 0388 4FF0FF33 		mov	r3, #-1
 884              	.L29:
 745:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 746:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 885              		.loc 1 746 0
 886 038c 1846     		mov	r0, r3
 887 038e 0C37     		adds	r7, r7, #12
 888              		.cfi_def_cfa_offset 4
 889 0390 BD46     		mov	sp, r7
 890              		.cfi_def_cfa_register 13
 891              		@ sp needed
 892 0392 5DF8047B 		ldr	r7, [sp], #4
 893              		.cfi_restore 7
 894              		.cfi_def_cfa_offset 0
 895 0396 7047     		bx	lr
 896              		.cfi_endproc
 897              	.LFE16:
 899              		.align	2
 900              		.global	UARTCharGet
 901              		.thumb
 902              		.thumb_func
 904              	UARTCharGet:
 905              	.LFB17:
 747:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 748:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 749:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 750:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Waits for a character from the specified port
 751:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 752:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 753:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 754:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function gets a character from the receive FIFO for the specified
 755:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! port.  If there are no characters available, this function waits until a
 756:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! character is received before returning.
 757:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 758:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns the character read from the specified port, cast as a
 759:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \e int32_t.
 760:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 761:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 762:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** int32_t
 763:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTCharGet(uint32_t ui32Base)
 764:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 906              		.loc 1 764 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 8
 909              		@ frame_needed = 1, uses_anonymous_args = 0
 910              		@ link register save eliminated.
 911 0398 80B4     		push	{r7}
 912              		.cfi_def_cfa_offset 4
 913              		.cfi_offset 7, -4
 914 039a 83B0     		sub	sp, sp, #12
 915              		.cfi_def_cfa_offset 16
 916 039c 00AF     		add	r7, sp, #0
 917              		.cfi_def_cfa_register 7
 918 039e 7860     		str	r0, [r7, #4]
 765:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 766:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 767:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 768:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 769:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 770:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 771:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Wait until a char is available.
 772:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 773:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE)
 919              		.loc 1 773 0
 920 03a0 00BF     		nop
 921              	.L31:
 922              		.loc 1 773 0 is_stmt 0 discriminator 1
 923 03a2 7B68     		ldr	r3, [r7, #4]
 924 03a4 1833     		adds	r3, r3, #24
 925 03a6 1B68     		ldr	r3, [r3]
 926 03a8 03F01003 		and	r3, r3, #16
 927 03ac 002B     		cmp	r3, #0
 928 03ae F8D1     		bne	.L31
 774:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 775:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 776:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 777:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 778:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Now get the char.
 779:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 780:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_DR));
 929              		.loc 1 780 0 is_stmt 1
 930 03b0 7B68     		ldr	r3, [r7, #4]
 931 03b2 1B68     		ldr	r3, [r3]
 781:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 932              		.loc 1 781 0
 933 03b4 1846     		mov	r0, r3
 934 03b6 0C37     		adds	r7, r7, #12
 935              		.cfi_def_cfa_offset 4
 936 03b8 BD46     		mov	sp, r7
 937              		.cfi_def_cfa_register 13
 938              		@ sp needed
 939 03ba 5DF8047B 		ldr	r7, [sp], #4
 940              		.cfi_restore 7
 941              		.cfi_def_cfa_offset 0
 942 03be 7047     		bx	lr
 943              		.cfi_endproc
 944              	.LFE17:
 946              		.align	2
 947              		.global	UARTCharPutNonBlocking
 948              		.thumb
 949              		.thumb_func
 951              	UARTCharPutNonBlocking:
 952              	.LFB18:
 782:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 783:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 784:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 785:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Sends a character to the specified port
 786:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 787:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 788:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui8Data is the character to be transmitted.
 789:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 790:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function writes the character \e ui8Data to the transmit FIFO for the
 791:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! specified port.  This function does not block, so if there is no space
 792:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! available, then a \b false is returned, and the application must retry the
 793:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! function later.
 794:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 795:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns \b true if the character was successfully placed in the
 796:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! transmit FIFO or \b false if there was no space available in the transmit
 797:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! FIFO.
 798:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 799:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 800:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** bool
 801:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTCharPutNonBlocking(uint32_t ui32Base, uint8_t ui8Data)
 802:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 953              		.loc 1 802 0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 8
 956              		@ frame_needed = 1, uses_anonymous_args = 0
 957              		@ link register save eliminated.
 958 03c0 80B4     		push	{r7}
 959              		.cfi_def_cfa_offset 4
 960              		.cfi_offset 7, -4
 961 03c2 83B0     		sub	sp, sp, #12
 962              		.cfi_def_cfa_offset 16
 963 03c4 00AF     		add	r7, sp, #0
 964              		.cfi_def_cfa_register 7
 965 03c6 7860     		str	r0, [r7, #4]
 966 03c8 0B46     		mov	r3, r1
 967 03ca FB70     		strb	r3, [r7, #3]
 803:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 804:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 805:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 806:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 807:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 808:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 809:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // See if there is space in the transmit FIFO.
 810:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 811:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     if(!(HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF))
 968              		.loc 1 811 0
 969 03cc 7B68     		ldr	r3, [r7, #4]
 970 03ce 1833     		adds	r3, r3, #24
 971 03d0 1B68     		ldr	r3, [r3]
 972 03d2 03F02003 		and	r3, r3, #32
 973 03d6 002B     		cmp	r3, #0
 974 03d8 04D1     		bne	.L34
 812:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 813:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 814:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // Write this character to the transmit FIFO.
 815:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 816:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_DR) = ui8Data;
 975              		.loc 1 816 0
 976 03da 7B68     		ldr	r3, [r7, #4]
 977 03dc FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 978 03de 1A60     		str	r2, [r3]
 817:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 818:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 819:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // Success.
 820:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 821:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         return(true);
 979              		.loc 1 821 0
 980 03e0 0123     		movs	r3, #1
 981 03e2 00E0     		b	.L35
 982              	.L34:
 822:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 823:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     else
 824:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 825:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 826:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         // There is no space in the transmit FIFO, so return a failure.
 827:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         //
 828:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         return(false);
 983              		.loc 1 828 0
 984 03e4 0023     		movs	r3, #0
 985              	.L35:
 829:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 830:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 986              		.loc 1 830 0
 987 03e6 1846     		mov	r0, r3
 988 03e8 0C37     		adds	r7, r7, #12
 989              		.cfi_def_cfa_offset 4
 990 03ea BD46     		mov	sp, r7
 991              		.cfi_def_cfa_register 13
 992              		@ sp needed
 993 03ec 5DF8047B 		ldr	r7, [sp], #4
 994              		.cfi_restore 7
 995              		.cfi_def_cfa_offset 0
 996 03f0 7047     		bx	lr
 997              		.cfi_endproc
 998              	.LFE18:
 1000 03f2 00BF     		.align	2
 1001              		.global	UARTCharPut
 1002              		.thumb
 1003              		.thumb_func
 1005              	UARTCharPut:
 1006              	.LFB19:
 831:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 832:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 833:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 834:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Waits to send a character from the specified port
 835:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 836:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 837:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui8Data is the character to be transmitted.
 838:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 839:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function sends the character \e ui8Data to the transmit FIFO for the
 840:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! specified port.  If there is no space available in the transmit FIFO, this
 841:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! function waits until there is space available before returning.
 842:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 843:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 844:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 845:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 846:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 847:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTCharPut(uint32_t ui32Base, uint8_t ui8Data)
 848:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1007              		.loc 1 848 0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 8
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011              		@ link register save eliminated.
 1012 03f4 80B4     		push	{r7}
 1013              		.cfi_def_cfa_offset 4
 1014              		.cfi_offset 7, -4
 1015 03f6 83B0     		sub	sp, sp, #12
 1016              		.cfi_def_cfa_offset 16
 1017 03f8 00AF     		add	r7, sp, #0
 1018              		.cfi_def_cfa_register 7
 1019 03fa 7860     		str	r0, [r7, #4]
 1020 03fc 0B46     		mov	r3, r1
 1021 03fe FB70     		strb	r3, [r7, #3]
 849:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 850:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 851:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 852:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 853:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 854:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 855:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Wait until space is available.
 856:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 857:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF)
 1022              		.loc 1 857 0
 1023 0400 00BF     		nop
 1024              	.L37:
 1025              		.loc 1 857 0 is_stmt 0 discriminator 1
 1026 0402 7B68     		ldr	r3, [r7, #4]
 1027 0404 1833     		adds	r3, r3, #24
 1028 0406 1B68     		ldr	r3, [r3]
 1029 0408 03F02003 		and	r3, r3, #32
 1030 040c 002B     		cmp	r3, #0
 1031 040e F8D1     		bne	.L37
 858:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
 859:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
 860:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 861:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 862:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Send the char.
 863:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 864:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DR) = ui8Data;
 1032              		.loc 1 864 0 is_stmt 1
 1033 0410 7B68     		ldr	r3, [r7, #4]
 1034 0412 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1035 0414 1A60     		str	r2, [r3]
 865:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1036              		.loc 1 865 0
 1037 0416 0C37     		adds	r7, r7, #12
 1038              		.cfi_def_cfa_offset 4
 1039 0418 BD46     		mov	sp, r7
 1040              		.cfi_def_cfa_register 13
 1041              		@ sp needed
 1042 041a 5DF8047B 		ldr	r7, [sp], #4
 1043              		.cfi_restore 7
 1044              		.cfi_def_cfa_offset 0
 1045 041e 7047     		bx	lr
 1046              		.cfi_endproc
 1047              	.LFE19:
 1049              		.align	2
 1050              		.global	UARTBreakCtl
 1051              		.thumb
 1052              		.thumb_func
 1054              	UARTBreakCtl:
 1055              	.LFB20:
 866:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 867:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 868:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 869:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Causes a BREAK to be sent
 870:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 871:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 872:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param bBreakState controls the output level.
 873:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 874:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Calling this function with \e bBreakState set to \b true asserts a break
 875:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! condition on the UART.  Calling this function with \e bBreakState set to
 876:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b false removes the break condition.  For proper transmission of a break
 877:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! command, the break must be asserted for at least two complete frames.
 878:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 879:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 880:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 881:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 882:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 883:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTBreakCtl(uint32_t ui32Base, bool bBreakState)
 884:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1056              		.loc 1 884 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 8
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 1061 0420 80B4     		push	{r7}
 1062              		.cfi_def_cfa_offset 4
 1063              		.cfi_offset 7, -4
 1064 0422 83B0     		sub	sp, sp, #12
 1065              		.cfi_def_cfa_offset 16
 1066 0424 00AF     		add	r7, sp, #0
 1067              		.cfi_def_cfa_register 7
 1068 0426 7860     		str	r0, [r7, #4]
 1069 0428 0B46     		mov	r3, r1
 1070 042a FB70     		strb	r3, [r7, #3]
 885:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 886:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 887:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 888:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 889:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 890:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 891:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set the break condition as requested.
 892:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 893:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) =
 1071              		.loc 1 893 0
 1072 042c 7B68     		ldr	r3, [r7, #4]
 1073 042e 2C33     		adds	r3, r3, #44
 1074 0430 1A46     		mov	r2, r3
 894:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         (bBreakState ?
 895:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) | UART_LCRH_BRK) :
 1075              		.loc 1 895 0
 1076 0432 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1077 0434 002B     		cmp	r3, #0
 1078 0436 05D0     		beq	.L39
 1079              		.loc 1 895 0 is_stmt 0 discriminator 1
 1080 0438 7B68     		ldr	r3, [r7, #4]
 1081 043a 2C33     		adds	r3, r3, #44
 1082 043c 1B68     		ldr	r3, [r3]
 1083 043e 43F00103 		orr	r3, r3, #1
 1084 0442 04E0     		b	.L40
 1085              	.L39:
 896:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) & ~(UART_LCRH_BRK)));
 1086              		.loc 1 896 0 is_stmt 1 discriminator 2
 1087 0444 7B68     		ldr	r3, [r7, #4]
 1088 0446 2C33     		adds	r3, r3, #44
 1089 0448 1B68     		ldr	r3, [r3]
 895:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) & ~(UART_LCRH_BRK)));
 1090              		.loc 1 895 0 discriminator 2
 1091 044a 23F00103 		bic	r3, r3, #1
 1092              	.L40:
 893:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         (bBreakState ?
 1093              		.loc 1 893 0
 1094 044e 1360     		str	r3, [r2]
 897:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1095              		.loc 1 897 0
 1096 0450 0C37     		adds	r7, r7, #12
 1097              		.cfi_def_cfa_offset 4
 1098 0452 BD46     		mov	sp, r7
 1099              		.cfi_def_cfa_register 13
 1100              		@ sp needed
 1101 0454 5DF8047B 		ldr	r7, [sp], #4
 1102              		.cfi_restore 7
 1103              		.cfi_def_cfa_offset 0
 1104 0458 7047     		bx	lr
 1105              		.cfi_endproc
 1106              	.LFE20:
 1108 045a 00BF     		.align	2
 1109              		.global	UARTBusy
 1110              		.thumb
 1111              		.thumb_func
 1113              	UARTBusy:
 1114              	.LFB21:
 898:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 899:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 900:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 901:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Determines whether the UART transmitter is busy or not
 902:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 903:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 904:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 905:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Allows the caller to determine whether all transmitted bytes have cleared
 906:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the transmitter hardware.  If \b false is returned, the transmit FIFO is
 907:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! empty and all bits of the last transmitted character, including all stop
 908:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! bits, have left the hardware shift register.
 909:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 910:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns \b true if the UART is transmitting or \b false if all
 911:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! transmissions are complete.
 912:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 913:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 914:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** bool
 915:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTBusy(uint32_t ui32Base)
 916:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1115              		.loc 1 916 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 8
 1118              		@ frame_needed = 1, uses_anonymous_args = 0
 1119              		@ link register save eliminated.
 1120 045c 80B4     		push	{r7}
 1121              		.cfi_def_cfa_offset 4
 1122              		.cfi_offset 7, -4
 1123 045e 83B0     		sub	sp, sp, #12
 1124              		.cfi_def_cfa_offset 16
 1125 0460 00AF     		add	r7, sp, #0
 1126              		.cfi_def_cfa_register 7
 1127 0462 7860     		str	r0, [r7, #4]
 917:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 918:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the argument.
 919:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 920:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 921:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 922:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 923:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Determine if the UART is busy.
 924:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 925:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ? true : false);
 1128              		.loc 1 925 0
 1129 0464 7B68     		ldr	r3, [r7, #4]
 1130 0466 1833     		adds	r3, r3, #24
 1131 0468 1B68     		ldr	r3, [r3]
 1132 046a 03F00803 		and	r3, r3, #8
 1133 046e 002B     		cmp	r3, #0
 1134 0470 14BF     		ite	ne
 1135 0472 0123     		movne	r3, #1
 1136 0474 0023     		moveq	r3, #0
 1137 0476 DBB2     		uxtb	r3, r3
 926:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1138              		.loc 1 926 0
 1139 0478 1846     		mov	r0, r3
 1140 047a 0C37     		adds	r7, r7, #12
 1141              		.cfi_def_cfa_offset 4
 1142 047c BD46     		mov	sp, r7
 1143              		.cfi_def_cfa_register 13
 1144              		@ sp needed
 1145 047e 5DF8047B 		ldr	r7, [sp], #4
 1146              		.cfi_restore 7
 1147              		.cfi_def_cfa_offset 0
 1148 0482 7047     		bx	lr
 1149              		.cfi_endproc
 1150              	.LFE21:
 1152              		.align	2
 1153              		.global	UARTIntRegister
 1154              		.thumb
 1155              		.thumb_func
 1157              	UARTIntRegister:
 1158              	.LFB22:
 927:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 928:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 929:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 930:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Registers an interrupt handler for a UART interrupt
 931:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 932:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 933:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param pfnHandler is a pointer to the function to be called when the
 934:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! UART interrupt occurs.
 935:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 936:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function does the actual registering of the interrupt handler.  This
 937:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! function enables the global interrupt in the interrupt controller; specific
 938:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! UART interrupts must be enabled via UARTIntEnable().  It is the interrupt
 939:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! handler's responsibility to clear the interrupt source.
 940:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 941:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \sa IntRegister() for important information about registering interrupt
 942:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! handlers.
 943:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 944:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 945:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 946:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 947:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 948:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTIntRegister(uint32_t ui32Base, void (*pfnHandler)(void))
 949:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1159              		.loc 1 949 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 16
 1162              		@ frame_needed = 1, uses_anonymous_args = 0
 1163 0484 80B5     		push	{r7, lr}
 1164              		.cfi_def_cfa_offset 8
 1165              		.cfi_offset 7, -8
 1166              		.cfi_offset 14, -4
 1167 0486 84B0     		sub	sp, sp, #16
 1168              		.cfi_def_cfa_offset 24
 1169 0488 00AF     		add	r7, sp, #0
 1170              		.cfi_def_cfa_register 7
 1171 048a 7860     		str	r0, [r7, #4]
 1172 048c 3960     		str	r1, [r7]
 950:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     uint32_t ui32Int;
 951:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 952:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 953:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 954:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 955:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 956:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 957:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 958:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Determine the interrupt number based on the UART port.
 959:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 960:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ui32Int = ((ui32Base == UART0_BASE) ? INT_UART0 : INT_UART1);
 1173              		.loc 1 960 0
 1174 048e 7B68     		ldr	r3, [r7, #4]
 1175 0490 084A     		ldr	r2, .L46
 1176 0492 9342     		cmp	r3, r2
 1177 0494 01D1     		bne	.L44
 1178              		.loc 1 960 0 is_stmt 0 discriminator 1
 1179 0496 1523     		movs	r3, #21
 1180 0498 00E0     		b	.L45
 1181              	.L44:
 1182              		.loc 1 960 0 discriminator 2
 1183 049a 1623     		movs	r3, #22
 1184              	.L45:
 1185              		.loc 1 960 0 discriminator 4
 1186 049c FB60     		str	r3, [r7, #12]
 961:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 962:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 963:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Register the interrupt handler.
 964:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 965:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     IntRegister(ui32Int, pfnHandler);
 1187              		.loc 1 965 0 is_stmt 1 discriminator 4
 1188 049e F868     		ldr	r0, [r7, #12]
 1189 04a0 3968     		ldr	r1, [r7]
 1190 04a2 FFF7FEFF 		bl	IntRegister
 966:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 967:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 968:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Enable the UART interrupt.
 969:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 970:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     IntEnable(ui32Int);
 1191              		.loc 1 970 0 discriminator 4
 1192 04a6 F868     		ldr	r0, [r7, #12]
 1193 04a8 FFF7FEFF 		bl	IntEnable
 971:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1194              		.loc 1 971 0 discriminator 4
 1195 04ac 1037     		adds	r7, r7, #16
 1196              		.cfi_def_cfa_offset 8
 1197 04ae BD46     		mov	sp, r7
 1198              		.cfi_def_cfa_register 13
 1199              		@ sp needed
 1200 04b0 80BD     		pop	{r7, pc}
 1201              	.L47:
 1202 04b2 00BF     		.align	2
 1203              	.L46:
 1204 04b4 00C00040 		.word	1073790976
 1205              		.cfi_endproc
 1206              	.LFE22:
 1208              		.align	2
 1209              		.global	UARTIntUnregister
 1210              		.thumb
 1211              		.thumb_func
 1213              	UARTIntUnregister:
 1214              	.LFB23:
 972:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 973:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 974:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 975:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Unregisters an interrupt handler for a UART interrupt
 976:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 977:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 978:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 979:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function does the actual unregistering of the interrupt handler.  It
 980:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! clears the handler to be called when a UART interrupt occurs.  This
 981:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! function also masks off the interrupt in the interrupt controller so that
 982:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the interrupt handler no longer is called.
 983:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 984:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \sa IntRegister() for important information about registering interrupt
 985:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! handlers.
 986:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
 987:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
 988:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
 989:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
 990:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
 991:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTIntUnregister(uint32_t ui32Base)
 992:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1215              		.loc 1 992 0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 16
 1218              		@ frame_needed = 1, uses_anonymous_args = 0
 1219 04b8 80B5     		push	{r7, lr}
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 7, -8
 1222              		.cfi_offset 14, -4
 1223 04ba 84B0     		sub	sp, sp, #16
 1224              		.cfi_def_cfa_offset 24
 1225 04bc 00AF     		add	r7, sp, #0
 1226              		.cfi_def_cfa_register 7
 1227 04be 7860     		str	r0, [r7, #4]
 993:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     uint32_t ui32Int;
 994:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
 995:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 996:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
 997:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
 998:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 999:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1000:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1001:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Determine the interrupt number based on the UART port.
1002:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1003:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ui32Int = ((ui32Base == UART0_BASE) ? INT_UART0 : INT_UART1);
 1228              		.loc 1 1003 0
 1229 04c0 7B68     		ldr	r3, [r7, #4]
 1230 04c2 084A     		ldr	r2, .L51
 1231 04c4 9342     		cmp	r3, r2
 1232 04c6 01D1     		bne	.L49
 1233              		.loc 1 1003 0 is_stmt 0 discriminator 1
 1234 04c8 1523     		movs	r3, #21
 1235 04ca 00E0     		b	.L50
 1236              	.L49:
 1237              		.loc 1 1003 0 discriminator 2
 1238 04cc 1623     		movs	r3, #22
 1239              	.L50:
 1240              		.loc 1 1003 0 discriminator 4
 1241 04ce FB60     		str	r3, [r7, #12]
1004:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1005:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1006:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Disable the interrupt.
1007:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1008:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     IntDisable(ui32Int);
 1242              		.loc 1 1008 0 is_stmt 1 discriminator 4
 1243 04d0 F868     		ldr	r0, [r7, #12]
 1244 04d2 FFF7FEFF 		bl	IntDisable
1009:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1010:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1011:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Unregister the interrupt handler.
1012:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1013:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     IntUnregister(ui32Int);
 1245              		.loc 1 1013 0 discriminator 4
 1246 04d6 F868     		ldr	r0, [r7, #12]
 1247 04d8 FFF7FEFF 		bl	IntUnregister
1014:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1248              		.loc 1 1014 0 discriminator 4
 1249 04dc 1037     		adds	r7, r7, #16
 1250              		.cfi_def_cfa_offset 8
 1251 04de BD46     		mov	sp, r7
 1252              		.cfi_def_cfa_register 13
 1253              		@ sp needed
 1254 04e0 80BD     		pop	{r7, pc}
 1255              	.L52:
 1256 04e2 00BF     		.align	2
 1257              	.L51:
 1258 04e4 00C00040 		.word	1073790976
 1259              		.cfi_endproc
 1260              	.LFE23:
 1262              		.align	2
 1263              		.global	UARTIntEnable
 1264              		.thumb
 1265              		.thumb_func
 1267              	UARTIntEnable:
 1268              	.LFB24:
1015:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1016:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1017:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1018:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Enables individual UART interrupt sources
1019:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1020:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1021:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be enabled.
1022:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1023:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function enables the indicated UART interrupt sources.  Only the
1024:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! sources that are enabled can be reflected to the processor interrupt;
1025:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! disabled sources have no effect on the processor.
1026:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1027:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The \e ui32IntFlags parameter is the logical OR of any of the following:
1028:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1029:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_9BIT - 9-bit address match interrupt
1030:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_OE - Overrun Error interrupt
1031:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_BE - Break Error interrupt
1032:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_PE - Parity Error interrupt
1033:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_FE - Framing Error interrupt
1034:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_RT - Receive Timeout interrupt
1035:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_TX - Transmit interrupt
1036:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_RX - Receive interrupt
1037:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - \b UART_INT_CTS - CTS interrupt (UART1 only)
1038:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1039:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1040:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1041:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1042:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1043:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags)
1044:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1269              		.loc 1 1044 0
 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 8
 1272              		@ frame_needed = 1, uses_anonymous_args = 0
 1273              		@ link register save eliminated.
 1274 04e8 80B4     		push	{r7}
 1275              		.cfi_def_cfa_offset 4
 1276              		.cfi_offset 7, -4
 1277 04ea 83B0     		sub	sp, sp, #12
 1278              		.cfi_def_cfa_offset 16
 1279 04ec 00AF     		add	r7, sp, #0
 1280              		.cfi_def_cfa_register 7
 1281 04ee 7860     		str	r0, [r7, #4]
 1282 04f0 3960     		str	r1, [r7]
1045:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1046:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1047:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1048:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1049:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1050:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1051:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Enable the specified interrupts.
1052:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1053:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IM) |= ui32IntFlags;
 1283              		.loc 1 1053 0
 1284 04f2 7B68     		ldr	r3, [r7, #4]
 1285 04f4 3833     		adds	r3, r3, #56
 1286 04f6 1946     		mov	r1, r3
 1287 04f8 7B68     		ldr	r3, [r7, #4]
 1288 04fa 3833     		adds	r3, r3, #56
 1289 04fc 1A68     		ldr	r2, [r3]
 1290 04fe 3B68     		ldr	r3, [r7]
 1291 0500 1343     		orrs	r3, r3, r2
 1292 0502 0B60     		str	r3, [r1]
1054:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1293              		.loc 1 1054 0
 1294 0504 0C37     		adds	r7, r7, #12
 1295              		.cfi_def_cfa_offset 4
 1296 0506 BD46     		mov	sp, r7
 1297              		.cfi_def_cfa_register 13
 1298              		@ sp needed
 1299 0508 5DF8047B 		ldr	r7, [sp], #4
 1300              		.cfi_restore 7
 1301              		.cfi_def_cfa_offset 0
 1302 050c 7047     		bx	lr
 1303              		.cfi_endproc
 1304              	.LFE24:
 1306 050e 00BF     		.align	2
 1307              		.global	UARTIntDisable
 1308              		.thumb
 1309              		.thumb_func
 1311              	UARTIntDisable:
 1312              	.LFB25:
1055:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1056:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1057:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1058:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Disables individual UART interrupt sources
1059:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1060:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1061:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be disabled.
1062:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1063:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function disables the indicated UART interrupt sources.  Only the
1064:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! sources that are enabled can be reflected to the processor interrupt;
1065:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! disabled sources have no effect on the processor.
1066:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1067:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1068:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! parameter to UARTIntEnable().
1069:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1070:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1071:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1072:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1073:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1074:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags)
1075:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1313              		.loc 1 1075 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 8
 1316              		@ frame_needed = 1, uses_anonymous_args = 0
 1317              		@ link register save eliminated.
 1318 0510 80B4     		push	{r7}
 1319              		.cfi_def_cfa_offset 4
 1320              		.cfi_offset 7, -4
 1321 0512 83B0     		sub	sp, sp, #12
 1322              		.cfi_def_cfa_offset 16
 1323 0514 00AF     		add	r7, sp, #0
 1324              		.cfi_def_cfa_register 7
 1325 0516 7860     		str	r0, [r7, #4]
 1326 0518 3960     		str	r1, [r7]
1076:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1077:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1078:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1079:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1080:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1081:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1082:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Disable the specified interrupts.
1083:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1084:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IM) &= ~(ui32IntFlags);
 1327              		.loc 1 1084 0
 1328 051a 7B68     		ldr	r3, [r7, #4]
 1329 051c 3833     		adds	r3, r3, #56
 1330 051e 1946     		mov	r1, r3
 1331 0520 7B68     		ldr	r3, [r7, #4]
 1332 0522 3833     		adds	r3, r3, #56
 1333 0524 1A68     		ldr	r2, [r3]
 1334 0526 3B68     		ldr	r3, [r7]
 1335 0528 DB43     		mvns	r3, r3
 1336 052a 1340     		ands	r3, r3, r2
 1337 052c 0B60     		str	r3, [r1]
1085:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1338              		.loc 1 1085 0
 1339 052e 0C37     		adds	r7, r7, #12
 1340              		.cfi_def_cfa_offset 4
 1341 0530 BD46     		mov	sp, r7
 1342              		.cfi_def_cfa_register 13
 1343              		@ sp needed
 1344 0532 5DF8047B 		ldr	r7, [sp], #4
 1345              		.cfi_restore 7
 1346              		.cfi_def_cfa_offset 0
 1347 0536 7047     		bx	lr
 1348              		.cfi_endproc
 1349              	.LFE25:
 1351              		.align	2
 1352              		.global	UARTIntStatus
 1353              		.thumb
 1354              		.thumb_func
 1356              	UARTIntStatus:
 1357              	.LFB26:
1086:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1087:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1088:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1089:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Gets the current interrupt status
1090:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1091:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1092:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param bMasked is \b false if the raw interrupt status is required and
1093:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b true if the masked interrupt status is required.
1094:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1095:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function returns the interrupt status for the specified UART.  Either
1096:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the raw interrupt status or the status of interrupts that are allowed to
1097:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! reflect to the processor can be returned.
1098:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1099:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns the current interrupt status, enumerated as a bit field of
1100:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! values described in UARTIntEnable().
1101:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1102:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1103:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** uint32_t
1104:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTIntStatus(uint32_t ui32Base, bool bMasked)
1105:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1358              		.loc 1 1105 0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 8
 1361              		@ frame_needed = 1, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 1363 0538 80B4     		push	{r7}
 1364              		.cfi_def_cfa_offset 4
 1365              		.cfi_offset 7, -4
 1366 053a 83B0     		sub	sp, sp, #12
 1367              		.cfi_def_cfa_offset 16
 1368 053c 00AF     		add	r7, sp, #0
 1369              		.cfi_def_cfa_register 7
 1370 053e 7860     		str	r0, [r7, #4]
 1371 0540 0B46     		mov	r3, r1
 1372 0542 FB70     		strb	r3, [r7, #3]
1106:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1107:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1108:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1109:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1110:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1111:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1112:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Return either the interrupt status or the raw interrupt status as
1113:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // requested.
1114:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1115:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     if(bMasked)
 1373              		.loc 1 1115 0
 1374 0544 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1375 0546 002B     		cmp	r3, #0
 1376 0548 03D0     		beq	.L56
1116:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
1117:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_MIS));
 1377              		.loc 1 1117 0
 1378 054a 7B68     		ldr	r3, [r7, #4]
 1379 054c 4033     		adds	r3, r3, #64
 1380 054e 1B68     		ldr	r3, [r3]
 1381 0550 02E0     		b	.L57
 1382              	.L56:
1118:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
1119:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     else
1120:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
1121:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_RIS));
 1383              		.loc 1 1121 0
 1384 0552 7B68     		ldr	r3, [r7, #4]
 1385 0554 3C33     		adds	r3, r3, #60
 1386 0556 1B68     		ldr	r3, [r3]
 1387              	.L57:
1122:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
1123:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1388              		.loc 1 1123 0
 1389 0558 1846     		mov	r0, r3
 1390 055a 0C37     		adds	r7, r7, #12
 1391              		.cfi_def_cfa_offset 4
 1392 055c BD46     		mov	sp, r7
 1393              		.cfi_def_cfa_register 13
 1394              		@ sp needed
 1395 055e 5DF8047B 		ldr	r7, [sp], #4
 1396              		.cfi_restore 7
 1397              		.cfi_def_cfa_offset 0
 1398 0562 7047     		bx	lr
 1399              		.cfi_endproc
 1400              	.LFE26:
 1402              		.align	2
 1403              		.global	UARTIntClear
 1404              		.thumb
 1405              		.thumb_func
 1407              	UARTIntClear:
 1408              	.LFB27:
1124:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1125:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1126:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1127:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Clears UART interrupt sources
1128:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1129:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1130:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
1131:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1132:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The specified UART interrupt sources are cleared, so that they no longer
1133:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! assert.  This function must be called in the interrupt handler to keep the
1134:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! interrupt from being recognized again immediately upon exit.
1135:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1136:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1137:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! parameter to UARTIntEnable().
1138:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1139:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \note Because there is a write buffer in the Cortex-M3 processor, it may
1140:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! take several clock cycles before the interrupt source is actually cleared.
1141:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
1142:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the interrupt handler (as opposed to the very last action) to avoid
1143:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! returning from the interrupt handler before the interrupt source is
1144:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
1145:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! being immediately reentered (because the interrupt controller still sees
1146:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the interrupt source asserted).
1147:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1148:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1149:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1150:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1151:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1152:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTIntClear(uint32_t ui32Base, uint32_t ui32IntFlags)
1153:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1409              		.loc 1 1153 0
 1410              		.cfi_startproc
 1411              		@ args = 0, pretend = 0, frame = 8
 1412              		@ frame_needed = 1, uses_anonymous_args = 0
 1413              		@ link register save eliminated.
 1414 0564 80B4     		push	{r7}
 1415              		.cfi_def_cfa_offset 4
 1416              		.cfi_offset 7, -4
 1417 0566 83B0     		sub	sp, sp, #12
 1418              		.cfi_def_cfa_offset 16
 1419 0568 00AF     		add	r7, sp, #0
 1420              		.cfi_def_cfa_register 7
 1421 056a 7860     		str	r0, [r7, #4]
 1422 056c 3960     		str	r1, [r7]
1154:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1155:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1156:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1157:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1158:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1159:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1160:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Clear the requested interrupt sources.
1161:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1162:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 1423              		.loc 1 1162 0
 1424 056e 7B68     		ldr	r3, [r7, #4]
 1425 0570 4433     		adds	r3, r3, #68
 1426 0572 1A46     		mov	r2, r3
 1427 0574 3B68     		ldr	r3, [r7]
 1428 0576 1360     		str	r3, [r2]
1163:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1429              		.loc 1 1163 0
 1430 0578 0C37     		adds	r7, r7, #12
 1431              		.cfi_def_cfa_offset 4
 1432 057a BD46     		mov	sp, r7
 1433              		.cfi_def_cfa_register 13
 1434              		@ sp needed
 1435 057c 5DF8047B 		ldr	r7, [sp], #4
 1436              		.cfi_restore 7
 1437              		.cfi_def_cfa_offset 0
 1438 0580 7047     		bx	lr
 1439              		.cfi_endproc
 1440              	.LFE27:
 1442 0582 00BF     		.align	2
 1443              		.global	UARTDMAEnable
 1444              		.thumb
 1445              		.thumb_func
 1447              	UARTDMAEnable:
 1448              	.LFB28:
1164:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1165:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1166:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1167:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Enable UART DMA operation
1168:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1169:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1170:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to enable.
1171:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1172:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The specified UART DMA features are enabled.  The UART can be
1173:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! configured to use DMA for transmit or receive, and to disable
1174:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! receive if an error occurs.  The \e ui32DMAFlags parameter is the
1175:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! logical OR of any of the following values:
1176:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1177:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - UART_DMA_RX - enable DMA for receive
1178:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - UART_DMA_TX - enable DMA for transmit
1179:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - UART_DMA_ERR_RXSTOP - disable DMA receive on UART error
1180:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1181:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \note The uDMA controller must also be set up before DMA can be used
1182:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! with the UART.
1183:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1184:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1185:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1186:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1187:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1188:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags)
1189:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1449              		.loc 1 1189 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 8
 1452              		@ frame_needed = 1, uses_anonymous_args = 0
 1453              		@ link register save eliminated.
 1454 0584 80B4     		push	{r7}
 1455              		.cfi_def_cfa_offset 4
 1456              		.cfi_offset 7, -4
 1457 0586 83B0     		sub	sp, sp, #12
 1458              		.cfi_def_cfa_offset 16
 1459 0588 00AF     		add	r7, sp, #0
 1460              		.cfi_def_cfa_register 7
 1461 058a 7860     		str	r0, [r7, #4]
 1462 058c 3960     		str	r1, [r7]
1190:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1191:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1192:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1193:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1194:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1195:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1196:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set the requested bits in the UART DMA control register.
1197:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1198:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DMACTL) |= ui32DMAFlags;
 1463              		.loc 1 1198 0
 1464 058e 7B68     		ldr	r3, [r7, #4]
 1465 0590 4833     		adds	r3, r3, #72
 1466 0592 1946     		mov	r1, r3
 1467 0594 7B68     		ldr	r3, [r7, #4]
 1468 0596 4833     		adds	r3, r3, #72
 1469 0598 1A68     		ldr	r2, [r3]
 1470 059a 3B68     		ldr	r3, [r7]
 1471 059c 1343     		orrs	r3, r3, r2
 1472 059e 0B60     		str	r3, [r1]
1199:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1473              		.loc 1 1199 0
 1474 05a0 0C37     		adds	r7, r7, #12
 1475              		.cfi_def_cfa_offset 4
 1476 05a2 BD46     		mov	sp, r7
 1477              		.cfi_def_cfa_register 13
 1478              		@ sp needed
 1479 05a4 5DF8047B 		ldr	r7, [sp], #4
 1480              		.cfi_restore 7
 1481              		.cfi_def_cfa_offset 0
 1482 05a8 7047     		bx	lr
 1483              		.cfi_endproc
 1484              	.LFE28:
 1486 05aa 00BF     		.align	2
 1487              		.global	UARTDMADisable
 1488              		.thumb
 1489              		.thumb_func
 1491              	UARTDMADisable:
 1492              	.LFB29:
1200:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1201:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1202:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1203:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Disable UART DMA operation
1204:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1205:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1206:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to disable.
1207:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1208:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function is used to disable UART DMA features that were enabled
1209:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! by UARTDMAEnable().  The specified UART DMA features are disabled.  The
1210:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \e ui32DMAFlags parameter is the logical OR of any of the following values:
1211:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1212:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - UART_DMA_RX - disable DMA for receive
1213:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - UART_DMA_TX - disable DMA for transmit
1214:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! - UART_DMA_ERR_RXSTOP - do not disable DMA receive on UART error
1215:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1216:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1217:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1218:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1219:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1220:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags)
1221:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1493              		.loc 1 1221 0
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 8
 1496              		@ frame_needed = 1, uses_anonymous_args = 0
 1497              		@ link register save eliminated.
 1498 05ac 80B4     		push	{r7}
 1499              		.cfi_def_cfa_offset 4
 1500              		.cfi_offset 7, -4
 1501 05ae 83B0     		sub	sp, sp, #12
 1502              		.cfi_def_cfa_offset 16
 1503 05b0 00AF     		add	r7, sp, #0
 1504              		.cfi_def_cfa_register 7
 1505 05b2 7860     		str	r0, [r7, #4]
 1506 05b4 3960     		str	r1, [r7]
1222:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1223:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1224:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1225:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1226:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1227:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1228:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Clear the requested bits in the UART DMA control register.
1229:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1230:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DMACTL) &= ~ui32DMAFlags;
 1507              		.loc 1 1230 0
 1508 05b6 7B68     		ldr	r3, [r7, #4]
 1509 05b8 4833     		adds	r3, r3, #72
 1510 05ba 1946     		mov	r1, r3
 1511 05bc 7B68     		ldr	r3, [r7, #4]
 1512 05be 4833     		adds	r3, r3, #72
 1513 05c0 1A68     		ldr	r2, [r3]
 1514 05c2 3B68     		ldr	r3, [r7]
 1515 05c4 DB43     		mvns	r3, r3
 1516 05c6 1340     		ands	r3, r3, r2
 1517 05c8 0B60     		str	r3, [r1]
1231:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1518              		.loc 1 1231 0
 1519 05ca 0C37     		adds	r7, r7, #12
 1520              		.cfi_def_cfa_offset 4
 1521 05cc BD46     		mov	sp, r7
 1522              		.cfi_def_cfa_register 13
 1523              		@ sp needed
 1524 05ce 5DF8047B 		ldr	r7, [sp], #4
 1525              		.cfi_restore 7
 1526              		.cfi_def_cfa_offset 0
 1527 05d2 7047     		bx	lr
 1528              		.cfi_endproc
 1529              	.LFE29:
 1531              		.align	2
 1532              		.global	UARTRxErrorGet
 1533              		.thumb
 1534              		.thumb_func
 1536              	UARTRxErrorGet:
 1537              	.LFB30:
1232:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1233:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1234:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1235:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Gets current receiver errors
1236:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1237:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1238:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1239:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function returns the current state of each of the 4 receiver error
1240:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! sources.  The returned errors are equivalent to the four error bits
1241:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! returned via the previous call to UARTCharGet() or UARTCharGetNonBlocking()
1242:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! with the exception that the overrun error is set immediately the overrun
1243:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! occurs rather than when a character is next read.
1244:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1245:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return Returns a logical OR combination of the receiver error flags,
1246:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \b UART_RXERROR_FRAMING, \b UART_RXERROR_PARITY, \b UART_RXERROR_BREAK
1247:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! and \b UART_RXERROR_OVERRUN.
1248:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1249:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1250:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** uint32_t
1251:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTRxErrorGet(uint32_t ui32Base)
1252:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1538              		.loc 1 1252 0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 8
 1541              		@ frame_needed = 1, uses_anonymous_args = 0
 1542              		@ link register save eliminated.
 1543 05d4 80B4     		push	{r7}
 1544              		.cfi_def_cfa_offset 4
 1545              		.cfi_offset 7, -4
 1546 05d6 83B0     		sub	sp, sp, #12
 1547              		.cfi_def_cfa_offset 16
 1548 05d8 00AF     		add	r7, sp, #0
 1549              		.cfi_def_cfa_register 7
 1550 05da 7860     		str	r0, [r7, #4]
1253:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1254:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1255:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1256:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1257:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1258:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1259:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Return the current value of the receive status register.
1260:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1261:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_RSR) & 0x0000000F);
 1551              		.loc 1 1261 0
 1552 05dc 7B68     		ldr	r3, [r7, #4]
 1553 05de 0433     		adds	r3, r3, #4
 1554 05e0 1B68     		ldr	r3, [r3]
 1555 05e2 03F00F03 		and	r3, r3, #15
1262:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1556              		.loc 1 1262 0
 1557 05e6 1846     		mov	r0, r3
 1558 05e8 0C37     		adds	r7, r7, #12
 1559              		.cfi_def_cfa_offset 4
 1560 05ea BD46     		mov	sp, r7
 1561              		.cfi_def_cfa_register 13
 1562              		@ sp needed
 1563 05ec 5DF8047B 		ldr	r7, [sp], #4
 1564              		.cfi_restore 7
 1565              		.cfi_def_cfa_offset 0
 1566 05f0 7047     		bx	lr
 1567              		.cfi_endproc
 1568              	.LFE30:
 1570 05f2 00BF     		.align	2
 1571              		.global	UARTRxErrorClear
 1572              		.thumb
 1573              		.thumb_func
 1575              	UARTRxErrorClear:
 1576              	.LFB31:
1263:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1264:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1265:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1266:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Clears all reported receiver errors
1267:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1268:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1269:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1270:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function is used to clear all receiver error conditions reported via
1271:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! UARTRxErrorGet().  If using the overrun, framing error, parity error or
1272:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! break interrupts, this function must be called after clearing the interrupt
1273:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! to ensure that later errors of the same type trigger another interrupt.
1274:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1275:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1276:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1277:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1278:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1279:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTRxErrorClear(uint32_t ui32Base)
1280:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1577              		.loc 1 1280 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 8
 1580              		@ frame_needed = 1, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 1582 05f4 80B4     		push	{r7}
 1583              		.cfi_def_cfa_offset 4
 1584              		.cfi_offset 7, -4
 1585 05f6 83B0     		sub	sp, sp, #12
 1586              		.cfi_def_cfa_offset 16
 1587 05f8 00AF     		add	r7, sp, #0
 1588              		.cfi_def_cfa_register 7
 1589 05fa 7860     		str	r0, [r7, #4]
1281:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1282:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1283:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1284:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1285:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1286:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1287:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Any write to the Error Clear Register will clear all bits which are
1288:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // currently set.
1289:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1290:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_ECR) = 0;
 1590              		.loc 1 1290 0
 1591 05fc 7B68     		ldr	r3, [r7, #4]
 1592 05fe 0433     		adds	r3, r3, #4
 1593 0600 1A46     		mov	r2, r3
 1594 0602 0023     		movs	r3, #0
 1595 0604 1360     		str	r3, [r2]
1291:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1596              		.loc 1 1291 0
 1597 0606 0C37     		adds	r7, r7, #12
 1598              		.cfi_def_cfa_offset 4
 1599 0608 BD46     		mov	sp, r7
 1600              		.cfi_def_cfa_register 13
 1601              		@ sp needed
 1602 060a 5DF8047B 		ldr	r7, [sp], #4
 1603              		.cfi_restore 7
 1604              		.cfi_def_cfa_offset 0
 1605 060e 7047     		bx	lr
 1606              		.cfi_endproc
 1607              	.LFE31:
 1609              		.align	2
 1610              		.global	UARTClockSourceSet
 1611              		.thumb
 1612              		.thumb_func
 1614              	UARTClockSourceSet:
 1615              	.LFB32:
1292:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1293:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1294:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1295:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Sets the baud clock source for the specified UART
1296:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1297:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1298:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Source is the baud clock source for the UART.
1299:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1300:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function allows the baud clock source for the UART to be selected.
1301:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The possible clock source are the system clock (\b UART_CLOCK_SYSTEM) or
1302:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the precision internal oscillator (\b UART_CLOCK_PIOSC).
1303:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1304:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! If \b UART_CLOCK_SYSTEM is chosen, the IO clock frequency must thus be
1305:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! queried by SysCtrlClcokSet().
1306:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! If \b UART_CLOCK_PIOSC the SysCtrlIOClcokSet() function must be used.
1307:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1308:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Changing the baud clock source will change the baud rate generated by the
1309:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! UART.  Therefore, the baud rate should be reconfigured after any change to
1310:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the baud clock source.
1311:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1312:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \note If the precision internal oscillator (\b UART_CLOCK_PIOSC) is used
1313:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! for the UART baud clock, the system clock frequency must be at least
1314:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! 9 MHz in Run mode.
1315:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1316:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \sa UARTConfigSetExpClk()
1317:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1318:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1319:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1320:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1321:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1322:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTClockSourceSet(uint32_t ui32Base, uint32_t ui32Source)
1323:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1616              		.loc 1 1323 0
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 8
 1619              		@ frame_needed = 1, uses_anonymous_args = 0
 1620              		@ link register save eliminated.
 1621 0610 80B4     		push	{r7}
 1622              		.cfi_def_cfa_offset 4
 1623              		.cfi_offset 7, -4
 1624 0612 83B0     		sub	sp, sp, #12
 1625              		.cfi_def_cfa_offset 16
 1626 0614 00AF     		add	r7, sp, #0
 1627              		.cfi_def_cfa_register 7
 1628 0616 7860     		str	r0, [r7, #4]
 1629 0618 3960     		str	r1, [r7]
1324:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1325:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1326:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1327:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1328:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT((ui32Source == UART_CLOCK_SYSTEM) || (ui32Source == UART_CLOCK_PIOSC));
1329:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1330:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1331:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set the UART clock source.
1332:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1333:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CC) = ui32Source;
 1630              		.loc 1 1333 0
 1631 061a 7B68     		ldr	r3, [r7, #4]
 1632 061c 03F6C873 		addw	r3, r3, #4040
 1633 0620 1A46     		mov	r2, r3
 1634 0622 3B68     		ldr	r3, [r7]
 1635 0624 1360     		str	r3, [r2]
1334:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1636              		.loc 1 1334 0
 1637 0626 0C37     		adds	r7, r7, #12
 1638              		.cfi_def_cfa_offset 4
 1639 0628 BD46     		mov	sp, r7
 1640              		.cfi_def_cfa_register 13
 1641              		@ sp needed
 1642 062a 5DF8047B 		ldr	r7, [sp], #4
 1643              		.cfi_restore 7
 1644              		.cfi_def_cfa_offset 0
 1645 062e 7047     		bx	lr
 1646              		.cfi_endproc
 1647              	.LFE32:
 1649              		.align	2
 1650              		.global	UARTClockSourceGet
 1651              		.thumb
 1652              		.thumb_func
 1654              	UARTClockSourceGet:
 1655              	.LFB33:
1335:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1336:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1337:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1338:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Gets the baud clock source for the specified UART
1339:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1340:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1341:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1342:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function returns the baud clock source for the specified UART.  The
1343:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! possible baud clock source are the system clock (\b UART_CLOCK_SYSTEM) or
1344:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the precision internal oscillator (\b UART_CLOCK_PIOSC).
1345:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1346:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1347:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1348:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1349:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** uint32_t
1350:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UARTClockSourceGet(uint32_t ui32Base)
1351:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1656              		.loc 1 1351 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 8
 1659              		@ frame_needed = 1, uses_anonymous_args = 0
 1660              		@ link register save eliminated.
 1661 0630 80B4     		push	{r7}
 1662              		.cfi_def_cfa_offset 4
 1663              		.cfi_offset 7, -4
 1664 0632 83B0     		sub	sp, sp, #12
 1665              		.cfi_def_cfa_offset 16
 1666 0634 00AF     		add	r7, sp, #0
 1667              		.cfi_def_cfa_register 7
 1668 0636 7860     		str	r0, [r7, #4]
1352:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1353:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1354:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1355:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1356:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1357:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1358:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Return the UART clock source.
1359:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1360:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_CC));
 1669              		.loc 1 1360 0
 1670 0638 7B68     		ldr	r3, [r7, #4]
 1671 063a 03F6C873 		addw	r3, r3, #4040
 1672 063e 1B68     		ldr	r3, [r3]
1361:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1673              		.loc 1 1361 0
 1674 0640 1846     		mov	r0, r3
 1675 0642 0C37     		adds	r7, r7, #12
 1676              		.cfi_def_cfa_offset 4
 1677 0644 BD46     		mov	sp, r7
 1678              		.cfi_def_cfa_register 13
 1679              		@ sp needed
 1680 0646 5DF8047B 		ldr	r7, [sp], #4
 1681              		.cfi_restore 7
 1682              		.cfi_def_cfa_offset 0
 1683 064a 7047     		bx	lr
 1684              		.cfi_endproc
 1685              	.LFE33:
 1687              		.align	2
 1688              		.global	UART9BitEnable
 1689              		.thumb
 1690              		.thumb_func
 1692              	UART9BitEnable:
 1693              	.LFB34:
1362:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1363:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1364:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1365:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Enables 9-bit mode on the specified UART
1366:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1367:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1368:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1369:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function enables the 9-bit operational mode of the UART.
1370:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1371:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1372:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1373:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1374:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1375:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UART9BitEnable(uint32_t ui32Base)
1376:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1694              		.loc 1 1376 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 8
 1697              		@ frame_needed = 1, uses_anonymous_args = 0
 1698              		@ link register save eliminated.
 1699 064c 80B4     		push	{r7}
 1700              		.cfi_def_cfa_offset 4
 1701              		.cfi_offset 7, -4
 1702 064e 83B0     		sub	sp, sp, #12
 1703              		.cfi_def_cfa_offset 16
 1704 0650 00AF     		add	r7, sp, #0
 1705              		.cfi_def_cfa_register 7
 1706 0652 7860     		str	r0, [r7, #4]
1377:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1378:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1379:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1380:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1381:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1382:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1383:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Enable 9-bit mode.
1384:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1385:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) |= UART_NINEBITADDR_NINEBITEN;
 1707              		.loc 1 1385 0
 1708 0654 7B68     		ldr	r3, [r7, #4]
 1709 0656 A433     		adds	r3, r3, #164
 1710 0658 1A46     		mov	r2, r3
 1711 065a 7B68     		ldr	r3, [r7, #4]
 1712 065c A433     		adds	r3, r3, #164
 1713 065e 1B68     		ldr	r3, [r3]
 1714 0660 43F40043 		orr	r3, r3, #32768
 1715 0664 1360     		str	r3, [r2]
1386:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1716              		.loc 1 1386 0
 1717 0666 0C37     		adds	r7, r7, #12
 1718              		.cfi_def_cfa_offset 4
 1719 0668 BD46     		mov	sp, r7
 1720              		.cfi_def_cfa_register 13
 1721              		@ sp needed
 1722 066a 5DF8047B 		ldr	r7, [sp], #4
 1723              		.cfi_restore 7
 1724              		.cfi_def_cfa_offset 0
 1725 066e 7047     		bx	lr
 1726              		.cfi_endproc
 1727              	.LFE34:
 1729              		.align	2
 1730              		.global	UART9BitDisable
 1731              		.thumb
 1732              		.thumb_func
 1734              	UART9BitDisable:
 1735              	.LFB35:
1387:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1388:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1389:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1390:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Disables 9-bit mode on the specified UART
1391:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1392:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1393:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1394:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function disables the 9-bit operational mode of the UART.
1395:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1396:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1397:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1398:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1399:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1400:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UART9BitDisable(uint32_t ui32Base)
1401:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1736              		.loc 1 1401 0
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 8
 1739              		@ frame_needed = 1, uses_anonymous_args = 0
 1740              		@ link register save eliminated.
 1741 0670 80B4     		push	{r7}
 1742              		.cfi_def_cfa_offset 4
 1743              		.cfi_offset 7, -4
 1744 0672 83B0     		sub	sp, sp, #12
 1745              		.cfi_def_cfa_offset 16
 1746 0674 00AF     		add	r7, sp, #0
 1747              		.cfi_def_cfa_register 7
 1748 0676 7860     		str	r0, [r7, #4]
1402:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1403:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1404:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1405:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1406:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1407:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1408:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Disable 9-bit mode.
1409:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1410:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) &= ~UART_NINEBITADDR_NINEBITEN;
 1749              		.loc 1 1410 0
 1750 0678 7B68     		ldr	r3, [r7, #4]
 1751 067a A433     		adds	r3, r3, #164
 1752 067c 1A46     		mov	r2, r3
 1753 067e 7B68     		ldr	r3, [r7, #4]
 1754 0680 A433     		adds	r3, r3, #164
 1755 0682 1B68     		ldr	r3, [r3]
 1756 0684 23F40043 		bic	r3, r3, #32768
 1757 0688 1360     		str	r3, [r2]
1411:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1758              		.loc 1 1411 0
 1759 068a 0C37     		adds	r7, r7, #12
 1760              		.cfi_def_cfa_offset 4
 1761 068c BD46     		mov	sp, r7
 1762              		.cfi_def_cfa_register 13
 1763              		@ sp needed
 1764 068e 5DF8047B 		ldr	r7, [sp], #4
 1765              		.cfi_restore 7
 1766              		.cfi_def_cfa_offset 0
 1767 0692 7047     		bx	lr
 1768              		.cfi_endproc
 1769              	.LFE35:
 1771              		.align	2
 1772              		.global	UART9BitAddrSet
 1773              		.thumb
 1774              		.thumb_func
 1776              	UART9BitAddrSet:
 1777              	.LFB36:
1412:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1413:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1414:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1415:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Sets the device address(es) for 9-bit mode
1416:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1417:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1418:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui8Addr is the device address.
1419:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui8Mask is the device address mask.
1420:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1421:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function sets the device address, or range of device addresses, that
1422:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! respond to requests on the 9-bit UART port.  The received address is masked
1423:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! with the mask and then compared against the given address, allowing either
1424:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! a single address (if \b ui8Mask is 0xff) or a set of addresses to be
1425:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! matched.
1426:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1427:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1428:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1429:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1430:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1431:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UART9BitAddrSet(uint32_t ui32Base, uint8_t ui8Addr,
1432:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                 uint8_t ui8Mask)
1433:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1778              		.loc 1 1433 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 8
 1781              		@ frame_needed = 1, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
 1783 0694 80B4     		push	{r7}
 1784              		.cfi_def_cfa_offset 4
 1785              		.cfi_offset 7, -4
 1786 0696 83B0     		sub	sp, sp, #12
 1787              		.cfi_def_cfa_offset 16
 1788 0698 00AF     		add	r7, sp, #0
 1789              		.cfi_def_cfa_register 7
 1790 069a 7860     		str	r0, [r7, #4]
 1791 069c 0B46     		mov	r3, r1
 1792 069e FB70     		strb	r3, [r7, #3]
 1793 06a0 1346     		mov	r3, r2
 1794 06a2 BB70     		strb	r3, [r7, #2]
1434:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1435:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1436:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1437:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1438:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1439:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1440:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Set the address and mask.
1441:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1442:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) = ui8Addr << UART_NINEBITADDR_ADDR_S;
 1795              		.loc 1 1442 0
 1796 06a4 7B68     		ldr	r3, [r7, #4]
 1797 06a6 A433     		adds	r3, r3, #164
 1798 06a8 1A46     		mov	r2, r3
 1799 06aa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1800 06ac 1360     		str	r3, [r2]
1443:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITAMASK) = ui8Mask << UART_NINEBITAMASK_MASK_S;
 1801              		.loc 1 1443 0
 1802 06ae 7B68     		ldr	r3, [r7, #4]
 1803 06b0 A833     		adds	r3, r3, #168
 1804 06b2 1A46     		mov	r2, r3
 1805 06b4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1806 06b6 1360     		str	r3, [r2]
1444:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1807              		.loc 1 1444 0
 1808 06b8 0C37     		adds	r7, r7, #12
 1809              		.cfi_def_cfa_offset 4
 1810 06ba BD46     		mov	sp, r7
 1811              		.cfi_def_cfa_register 13
 1812              		@ sp needed
 1813 06bc 5DF8047B 		ldr	r7, [sp], #4
 1814              		.cfi_restore 7
 1815              		.cfi_def_cfa_offset 0
 1816 06c0 7047     		bx	lr
 1817              		.cfi_endproc
 1818              	.LFE36:
 1820 06c2 00BF     		.align	2
 1821              		.global	UART9BitAddrSend
 1822              		.thumb
 1823              		.thumb_func
 1825              	UART9BitAddrSend:
 1826              	.LFB37:
1445:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1446:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1447:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1448:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! Sends an address character from the specified port when operating in 9-bit
1449:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! mode
1450:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1451:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1452:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \param ui8Addr is the address to be transmitted.
1453:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1454:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! This function waits until all data has been sent from the specified port
1455:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! and then sends the given address as an address byte.  It then waits until
1456:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! the address byte has been transmitted before returning.
1457:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1458:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! The normal data functions (UARTCharPut(), UARTCharPutNonBlocking(),
1459:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! UARTCharGet(), and UARTCharGetNonBlocking()) are used to send and receive
1460:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! data characters in 9-bit mode.
1461:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //!
1462:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //! \return None
1463:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //
1464:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** //*****************************************************************************
1465:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** void
1466:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** UART9BitAddrSend(uint32_t ui32Base, uint8_t ui8Addr)
1467:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** {
 1827              		.loc 1 1467 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 16
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832 06c4 80B4     		push	{r7}
 1833              		.cfi_def_cfa_offset 4
 1834              		.cfi_offset 7, -4
 1835 06c6 85B0     		sub	sp, sp, #20
 1836              		.cfi_def_cfa_offset 24
 1837 06c8 00AF     		add	r7, sp, #0
 1838              		.cfi_def_cfa_register 7
 1839 06ca 7860     		str	r0, [r7, #4]
 1840 06cc 0B46     		mov	r3, r1
 1841 06ce FB70     		strb	r3, [r7, #3]
1468:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     uint32_t ui32LCRH;
1469:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1470:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1471:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Check the arguments.
1472:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1473:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1474:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1475:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1476:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Wait until the FIFO is empty and the UART is not busy.
1477:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1478:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     while((HWREG(ui32Base + UART_O_FR) & (UART_FR_TXFE | UART_FR_BUSY)) !=
 1842              		.loc 1 1478 0
 1843 06d0 00BF     		nop
 1844              	.L71:
 1845              		.loc 1 1478 0 is_stmt 0 discriminator 1
 1846 06d2 7B68     		ldr	r3, [r7, #4]
 1847 06d4 1833     		adds	r3, r3, #24
 1848 06d6 1B68     		ldr	r3, [r3]
 1849 06d8 03F08803 		and	r3, r3, #136
 1850 06dc 802B     		cmp	r3, #128
 1851 06de F8D1     		bne	.L71
1479:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****             UART_FR_TXFE)
1480:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
1481:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
1482:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1483:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1484:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1485:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Force the address/data bit to 1 to indicate this is an address byte.
1486:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1487:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     ui32LCRH = HWREG(ui32Base + UART_O_LCRH);
 1852              		.loc 1 1487 0 is_stmt 1
 1853 06e0 7B68     		ldr	r3, [r7, #4]
 1854 06e2 2C33     		adds	r3, r3, #44
 1855 06e4 1B68     		ldr	r3, [r3]
 1856 06e6 FB60     		str	r3, [r7, #12]
1488:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ((ui32LCRH & ~UART_LCRH_EPS) | UART_LCRH_SPS |
 1857              		.loc 1 1488 0
 1858 06e8 7B68     		ldr	r3, [r7, #4]
 1859 06ea 2C33     		adds	r3, r3, #44
 1860 06ec 1A46     		mov	r2, r3
 1861 06ee FB68     		ldr	r3, [r7, #12]
 1862 06f0 23F08603 		bic	r3, r3, #134
 1863 06f4 43F08203 		orr	r3, r3, #130
 1864 06f8 1360     		str	r3, [r2]
1489:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****                                      UART_LCRH_PEN);
1490:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1491:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1492:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Send the address.
1493:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1494:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DR) = ui8Addr;
 1865              		.loc 1 1494 0
 1866 06fa 7B68     		ldr	r3, [r7, #4]
 1867 06fc FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1868 06fe 1A60     		str	r2, [r3]
1495:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1496:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1497:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Wait until the address has been sent.
1498:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1499:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     while((HWREG(ui32Base + UART_O_FR) & (UART_FR_TXFE | UART_FR_BUSY)) !=
 1869              		.loc 1 1499 0
 1870 0700 00BF     		nop
 1871              	.L72:
 1872              		.loc 1 1499 0 is_stmt 0 discriminator 1
 1873 0702 7B68     		ldr	r3, [r7, #4]
 1874 0704 1833     		adds	r3, r3, #24
 1875 0706 1B68     		ldr	r3, [r3]
 1876 0708 03F08803 		and	r3, r3, #136
 1877 070c 802B     		cmp	r3, #128
 1878 070e F8D1     		bne	.L72
1500:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****             UART_FR_TXFE)
1501:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     {
1502:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     }
1503:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** 
1504:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1505:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     // Restore the address/data setting.
1506:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     //
1507:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ui32LCRH;
 1879              		.loc 1 1507 0 is_stmt 1
 1880 0710 7B68     		ldr	r3, [r7, #4]
 1881 0712 2C33     		adds	r3, r3, #44
 1882 0714 1A46     		mov	r2, r3
 1883 0716 FB68     		ldr	r3, [r7, #12]
 1884 0718 1360     		str	r3, [r2]
1508:build/OpenMote-CC2538_armgcc/bsp/boards/OpenMote-CC2538/source/uarthal.c **** }
 1885              		.loc 1 1508 0
 1886 071a 1437     		adds	r7, r7, #20
 1887              		.cfi_def_cfa_offset 4
 1888 071c BD46     		mov	sp, r7
 1889              		.cfi_def_cfa_register 13
 1890              		@ sp needed
 1891 071e 5DF8047B 		ldr	r7, [sp], #4
 1892              		.cfi_restore 7
 1893              		.cfi_def_cfa_offset 0
 1894 0722 7047     		bx	lr
 1895              		.cfi_endproc
 1896              	.LFE37:
 1898              	.Letext0:
 1899              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1900              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uarthal.c
     /tmp/ccqe87vm.s:18     .text:0000000000000000 $t
     /tmp/ccqe87vm.s:23     .text:0000000000000000 UARTParityModeSet
     /tmp/ccqe87vm.s:71     .text:000000000000002c UARTParityModeGet
     /tmp/ccqe87vm.s:110    .text:000000000000004c UARTFIFOLevelSet
     /tmp/ccqe87vm.s:153    .text:0000000000000070 UARTFIFOLevelGet
     /tmp/ccqe87vm.s:203    .text:00000000000000a4 UARTConfigSetExpClk
     /tmp/ccqe87vm.s:433    .text:00000000000001d4 UARTDisable
     /tmp/ccqe87vm.s:304    .text:0000000000000134 UARTConfigGetExpClk
     /tmp/ccqe87vm.s:381    .text:0000000000000198 UARTEnable
     /tmp/ccqe87vm.s:495    .text:0000000000000220 UARTFIFOEnable
     /tmp/ccqe87vm.s:537    .text:0000000000000244 UARTFIFODisable
     /tmp/ccqe87vm.s:579    .text:0000000000000268 UARTEnableSIR
     /tmp/ccqe87vm.s:639    .text:00000000000002ac UARTDisableSIR
     /tmp/ccqe87vm.s:681    .text:00000000000002d0 UARTTxIntModeSet
     /tmp/ccqe87vm.s:728    .text:00000000000002fc UARTTxIntModeGet
     /tmp/ccqe87vm.s:767    .text:000000000000031c UARTCharsAvail
     /tmp/ccqe87vm.s:811    .text:0000000000000344 UARTSpaceAvail
     /tmp/ccqe87vm.s:855    .text:000000000000036c UARTCharGetNonBlocking
     /tmp/ccqe87vm.s:904    .text:0000000000000398 UARTCharGet
     /tmp/ccqe87vm.s:951    .text:00000000000003c0 UARTCharPutNonBlocking
     /tmp/ccqe87vm.s:1005   .text:00000000000003f4 UARTCharPut
     /tmp/ccqe87vm.s:1054   .text:0000000000000420 UARTBreakCtl
     /tmp/ccqe87vm.s:1113   .text:000000000000045c UARTBusy
     /tmp/ccqe87vm.s:1157   .text:0000000000000484 UARTIntRegister
     /tmp/ccqe87vm.s:1204   .text:00000000000004b4 $d
     /tmp/ccqe87vm.s:1208   .text:00000000000004b8 $t
     /tmp/ccqe87vm.s:1213   .text:00000000000004b8 UARTIntUnregister
     /tmp/ccqe87vm.s:1258   .text:00000000000004e4 $d
     /tmp/ccqe87vm.s:1262   .text:00000000000004e8 $t
     /tmp/ccqe87vm.s:1267   .text:00000000000004e8 UARTIntEnable
     /tmp/ccqe87vm.s:1311   .text:0000000000000510 UARTIntDisable
     /tmp/ccqe87vm.s:1356   .text:0000000000000538 UARTIntStatus
     /tmp/ccqe87vm.s:1407   .text:0000000000000564 UARTIntClear
     /tmp/ccqe87vm.s:1447   .text:0000000000000584 UARTDMAEnable
     /tmp/ccqe87vm.s:1491   .text:00000000000005ac UARTDMADisable
     /tmp/ccqe87vm.s:1536   .text:00000000000005d4 UARTRxErrorGet
     /tmp/ccqe87vm.s:1575   .text:00000000000005f4 UARTRxErrorClear
     /tmp/ccqe87vm.s:1614   .text:0000000000000610 UARTClockSourceSet
     /tmp/ccqe87vm.s:1654   .text:0000000000000630 UARTClockSourceGet
     /tmp/ccqe87vm.s:1692   .text:000000000000064c UART9BitEnable
     /tmp/ccqe87vm.s:1734   .text:0000000000000670 UART9BitDisable
     /tmp/ccqe87vm.s:1776   .text:0000000000000694 UART9BitAddrSet
     /tmp/ccqe87vm.s:1825   .text:00000000000006c4 UART9BitAddrSend
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.59116071098782a37a9183a8102fe91b
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:0000000000000000 wm4.hw_uart.h.39.98a53ad3c72429c06a23b03415b2e5a7
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.uarthal.h.41.25db9539abdf5c44b7896bf33c1e7f12

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
